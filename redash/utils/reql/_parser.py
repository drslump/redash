# The file was automatically generated by Lark v0.5.5
#
#
#   Lark Stand-alone Generator Tool
# ----------------------------------
# Generates a stand-alone LALR(1) parser with a standard lexer
#
# Git:    https://github.com/erezsh/lark
# Author: Erez Shinan (erezshin@gmail.com)
#
#
#    >>> LICENSE
#
#    This tool and its generated code use a separate license from Lark.
#
#    It is licensed under GPLv2 or above.
#
#    If you wish to purchase a commercial license for this tool and its
#    generated code, contact me via email.
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    See <http://www.gnu.org/licenses/>.
#
#


import types
import functools
from contextlib import contextmanager

Str = type(u'')

def inline_args(f):
    # print '@@', f.__name__, type(f), isinstance(f, types.FunctionType), isinstance(f, types.TypeType), isinstance(f, types.BuiltinFunctionType)
    if isinstance(f, types.FunctionType):
        @functools.wraps(f)
        def _f_func(self, args):
            return f(self, *args)
        return _f_func
    elif isinstance(f, (type, types.BuiltinFunctionType)):
        @functools.wraps(f)
        def _f_builtin(_self, args):
            return f(*args)
        return _f_builtin
    elif isinstance(f, types.MethodType):
        @functools.wraps(f.__func__)
        def _f(self, args):
            return f.__func__(self, *args)
        return _f
    elif isinstance(f, functools.partial):
        # wraps does not work for partials in 2.7: https://bugs.python.org/issue3445
        # @functools.wraps(f)
        def _f(self, args):
            return f(*args)
        return _f
    else:
        @functools.wraps(f.__call__.__func__)
        def _f(self, args):
            return f.__call__.__func__(self, *args)
        return _f


try:
    from contextlib import suppress     # Python 3
except ImportError:
    @contextmanager
    def suppress(*excs):
        '''Catch and dismiss the provided exception

        >>> x = 'hello'
        >>> with suppress(IndexError):
        ...     x = x[10]
        >>> x
        'hello'
        '''
        try:
            yield
        except excs:
            pass


def is_terminal(sym):
    return sym.isupper()

class GrammarError(Exception):
    pass

class ParseError(Exception):
    pass

class UnexpectedToken(ParseError):
    def __init__(self, token, expected, seq, index, considered_rules=None):
        self.token = token
        self.expected = expected
        self.line = getattr(token, 'line', '?')
        self.column = getattr(token, 'column', '?')
        self.considered_rules = considered_rules

        try:
            context = ' '.join(['%r(%s)' % (t.value, t.type) for t in seq[index:index+5]])
        except AttributeError:
            context = seq[index:index+5]
        except TypeError:
            context = "<no context>"
        message = ("Unexpected token %r at line %s, column %s.\n"
                   "Expected: %s\n"
                   "Context: %s" % (token, self.line, self.column, expected, context))

        super(UnexpectedToken, self).__init__(message)



class Tree(object):
    def __init__(self, data, children):
        self.data = data
        self.children = children

    def __repr__(self):
        return 'Tree(%s, %s)' % (self.data, self.children)

    def _pretty_label(self):
        return self.data

    def _pretty(self, level, indent_str):
        if len(self.children) == 1 and not isinstance(self.children[0], Tree):
            return [ indent_str*level, self._pretty_label(), '\t', '%s' % (self.children[0],), '\n']

        l = [ indent_str*level, self._pretty_label(), '\n' ]
        for n in self.children:
            if isinstance(n, Tree):
                l += n._pretty(level+1, indent_str)
            else:
                l += [ indent_str*(level+1), '%s' % (n,), '\n' ]

        return l

    def pretty(self, indent_str='  '):
        return ''.join(self._pretty(0, indent_str))
class Transformer(object):
    def _get_func(self, name):
        return getattr(self, name)

    def transform(self, tree):
        items = []
        for c in tree.children:
            try:
                items.append(self.transform(c) if isinstance(c, Tree) else c)
            except Discard:
                pass
        try:
            f = self._get_func(tree.data)
        except AttributeError:
            return self.__default__(tree.data, items)
        else:
            return f(items)

    def __default__(self, data, children):
        return Tree(data, children)

    def __mul__(self, other):
        return TransformerChain(self, other)


class Discard(Exception):
    pass

class TransformerChain(object):
    def __init__(self, *transformers):
        self.transformers = transformers

    def transform(self, tree):
        for t in self.transformers:
            tree = t.transform(tree)
        return tree

    def __mul__(self, other):
        return TransformerChain(*self.transformers + (other,))



class InlineTransformer(Transformer):
    def _get_func(self, name):  # use super()._get_func
        return inline_args(getattr(self, name)).__get__(self)


class Visitor(object):
    def visit(self, tree):
        for child in tree.children:
            if isinstance(child, Tree):
                self.visit(child)

        f = getattr(self, tree.data, self.__default__)
        f(tree)
        return tree

    def __default__(self, tree):
        pass


class Visitor_NoRecurse(Visitor):
    def visit(self, tree):
        subtrees = list(tree.iter_subtrees())

        for subtree in (subtrees):
            getattr(self, subtree.data, self.__default__)(subtree)
        return tree


class Transformer_NoRecurse(Transformer):
    def transform(self, tree):
        subtrees = list(tree.iter_subtrees())

        def _t(t):
            # Assumes t is already transformed
            try:
                f = self._get_func(t.data)
            except AttributeError:
                return self.__default__(t)
            else:
                return f(t)

        for subtree in subtrees:
            children = []
            for c in subtree.children:
                try:
                    children.append(_t(c) if isinstance(c, Tree) else c)
                except Discard:
                    pass
            subtree.children = children

        return _t(tree)

    def __default__(self, t):
        return t

class Indenter:
    def __init__(self):
        self.paren_level = 0
        self.indent_level = [0]

    def handle_NL(self, token):
        if self.paren_level > 0:
            return

        yield token

        indent_str = token.rsplit('\n', 1)[1] # Tabs and spaces
        indent = indent_str.count(' ') + indent_str.count('\t') * self.tab_len

        if indent > self.indent_level[-1]:
            self.indent_level.append(indent)
            yield Token.new_borrow_pos(self.INDENT_type, indent_str, token)
        else:
            while indent < self.indent_level[-1]:
                self.indent_level.pop()
                yield Token.new_borrow_pos(self.DEDENT_type, indent_str, token)

            assert indent == self.indent_level[-1], '%s != %s' % (indent, self.indent_level[-1])

    def process(self, stream):
        for token in stream:
            if token.type == self.NL_type:
                for t in self.handle_NL(token):
                    yield t
            else:
                yield token

            if token.type in self.OPEN_PAREN_types:
                self.paren_level += 1
            elif token.type in self.CLOSE_PAREN_types:
                self.paren_level -= 1
                assert self.paren_level >= 0

        while len(self.indent_level) > 1:
            self.indent_level.pop()
            yield Token(self.DEDENT_type, '')

        assert self.indent_level == [0], self.indent_level

    # XXX Hack for ContextualLexer. Maybe there's a more elegant solution?
    @property
    def always_accept(self):
        return (self.NL_type,)


class LexError(Exception):
    pass

class UnexpectedInput(LexError):
    def __init__(self, seq, lex_pos, line, column, allowed=None, considered_rules=None):
        context = seq[lex_pos:lex_pos+5]
        message = "No token defined for: '%s' in %r at line %d col %d" % (seq[lex_pos], context, line, column)
        if allowed:
            message += '\n\nExpecting: %s\n' % allowed

        super(UnexpectedInput, self).__init__(message)

        self.line = line
        self.column = column
        self.context = context
        self.allowed = allowed
        self.considered_rules = considered_rules

class Token(Str):
    def __new__(cls, type_, value, pos_in_stream=None, line=None, column=None):
        self = super(Token, cls).__new__(cls, value)
        self.type = type_
        self.pos_in_stream = pos_in_stream
        self.value = value
        self.line = line
        self.column = column
        return self

    @classmethod
    def new_borrow_pos(cls, type_, value, borrow_t):
        return cls(type_, value, borrow_t.pos_in_stream, line=borrow_t.line, column=borrow_t.column)

    def __reduce__(self):
        return (self.__class__, (self.type, self.pos_in_stream, self.value, self.line, self.column, ))

    def __repr__(self):
        return 'Token(%s, %r)' % (self.type, self.value)

    def __deepcopy__(self, memo):
        return Token(self.type, self.value, self.pos_in_stream, self.line, self.column)

    def __eq__(self, other):
        if isinstance(other, Token) and self.type != other.type:
            return False

        return Str.__eq__(self, other)

    __hash__ = Str.__hash__


class LineCounter:
    def __init__(self):
        self.newline_char = '\n'
        self.char_pos = 0
        self.line = 1
        self.column = 0
        self.line_start_pos = 0

    def feed(self, token, test_newline=True):
        """Consume a token and calculate the new line & column.

        As an optional optimization, set test_newline=False is token doesn't contain a newline.
        """
        if test_newline:
            newlines = token.count(self.newline_char)
            if newlines:
                self.line += newlines
                self.line_start_pos = self.char_pos + token.rindex(self.newline_char) + 1

        self.char_pos += len(token)
        self.column = self.char_pos - self.line_start_pos

class _Lex:
    "Built to serve both Lexer and ContextualLexer"
    def __init__(self, lexer):
        self.lexer = lexer

    def lex(self, stream, newline_types, ignore_types):
        newline_types = list(newline_types)
        ignore_types = list(ignore_types)
        line_ctr = LineCounter()

        t = None
        while True:
            lexer = self.lexer
            for mre, type_from_index in lexer.mres:
                m = mre.match(stream, line_ctr.char_pos)
                if m:
                    value = m.group(0)
                    type_ = type_from_index[m.lastindex]
                    if type_ not in ignore_types:
                        t = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
                        if t.type in lexer.callback:
                            t = lexer.callback[t.type](t)
                        yield t
                    else:
                        if type_ in lexer.callback:
                            t = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
                            lexer.callback[type_](t)

                    line_ctr.feed(value, type_ in newline_types)
                    if t:
                        t.end_line = line_ctr.line
                        t.end_column = line_ctr.column
                    break
            else:
                if line_ctr.char_pos < len(stream):
                    raise UnexpectedInput(stream, line_ctr.char_pos, line_ctr.line, line_ctr.column)
                break

class UnlessCallback:
    def __init__(self, mres):
        self.mres = mres

    def __call__(self, t):
        for mre, type_from_index in self.mres:
            m = mre.match(t.value)
            if m:
                value = m.group(0)
                t.type = type_from_index[m.lastindex]
                break
        return t


from functools import partial


class ExpandSingleChild:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        if len(children) == 1:
            return children[0]
        else:
            return self.node_builder(children)


class CreateToken:
    "Used for fixing the results of scanless parsing"

    def __init__(self, token_name, node_builder):
        self.node_builder = node_builder
        self.token_name = token_name

    def __call__(self, children):
        return self.node_builder( [Token(self.token_name, ''.join(children))] )


class PropagatePositions:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        res = self.node_builder(children)

        if children:
            for a in children:
                with suppress(AttributeError):
                    res.line = a.line
                    res.column = a.column
                break

            for a in reversed(children):
                with suppress(AttributeError):
                    res.end_line = a.end_line
                    res.end_column = a.end_column
                break

        return res


class ChildFilter:
    def __init__(self, to_include, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include

    def __call__(self, children):
        filtered = []
        for i, to_expand in self.to_include:
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   # Optimize for left-recursion
                    filtered = children[i].children
            else:
                filtered.append(children[i])

        return self.node_builder(filtered)

def _should_expand(sym):
    return not is_terminal(sym) and sym.startswith('_')

def maybe_create_child_filter(expansion, filter_out):
    to_include = [(i, _should_expand(sym)) for i, sym in enumerate(expansion) if sym not in filter_out]

    if len(to_include) < len(expansion) or any(to_expand for i, to_expand in to_include):
        return partial(ChildFilter, to_include)


class Callback(object):
    pass

class ParseTreeBuilder:
    def __init__(self, rules, tree_class, propagate_positions=False, keep_all_tokens=False):
        self.tree_class = tree_class
        self.propagate_positions = propagate_positions
        self.always_keep_all_tokens = keep_all_tokens

        self.rule_builders = list(self._init_builders(rules))

        self.user_aliases = {}

    def _init_builders(self, rules):
        filter_out = {rule.origin for rule in rules if rule.options and rule.options.filter_out}
        filter_out |= {sym for rule in rules for sym in rule.expansion if is_terminal(sym) and sym.startswith('_')}
        assert all(x.startswith('_') for x in filter_out)

        for rule in rules:
            options = rule.options
            keep_all_tokens = self.always_keep_all_tokens or (options.keep_all_tokens if options else False)
            expand_single_child = options.expand1 if options else False
            create_token = options.create_token if options else False

            wrapper_chain = filter(None, [
                create_token and partial(CreateToken, create_token),
                (expand_single_child and not rule.alias) and ExpandSingleChild,
                maybe_create_child_filter(rule.expansion, () if keep_all_tokens else filter_out),
                self.propagate_positions and PropagatePositions,
            ])

            yield rule, wrapper_chain


    def create_callback(self, transformer=None):
        callback = Callback()

        for rule, wrapper_chain in self.rule_builders:
            internal_callback_name = '_callback_%s_%s' % (rule.origin, '_'.join(rule.expansion))

            user_callback_name = rule.alias or rule.origin
            try:
                f = transformer._get_func(user_callback_name)
            except AttributeError:
                f = partial(self.tree_class, user_callback_name)

            self.user_aliases[rule] = rule.alias
            rule.alias = internal_callback_name

            for w in wrapper_chain:
                f = w(f)

            if hasattr(callback, internal_callback_name):
                raise GrammarError("Rule '%s' already exists" % (rule,))
            setattr(callback, internal_callback_name, f)

        return callback



class _Parser:
    def __init__(self, parse_table, callbacks):
        self.states = parse_table.states
        self.start_state = parse_table.start_state
        self.end_state = parse_table.end_state
        self.callbacks = callbacks

    def parse(self, seq, set_state=None):
        i = 0
        token = None
        stream = iter(seq)
        states = self.states

        state_stack = [self.start_state]
        value_stack = []

        if set_state: set_state(self.start_state)

        def get_action(key):
            state = state_stack[-1]
            try:
                return states[state][key]
            except KeyError:
                expected = states[state].keys()

                raise UnexpectedToken(token, expected, seq, i)

        def reduce(rule):
            size = len(rule.expansion)
            if size:
                s = value_stack[-size:]
                del state_stack[-size:]
                del value_stack[-size:]
            else:
                s = []

            value = self.callbacks[rule](s)

            _action, new_state = get_action(rule.origin)
            assert _action is Shift
            state_stack.append(new_state)
            value_stack.append(value)

        # Main LALR-parser loop
        for i, token in enumerate(stream):
            while True:
                action, arg = get_action(token.type)
                assert arg != self.end_state

                if action is Shift:
                    state_stack.append(arg)
                    value_stack.append(token)
                    if set_state: set_state(arg)
                    break # next token
                else:
                    reduce(arg)

        while True:
            _action, arg = get_action('$END')
            if _action is Shift:
                assert arg == self.end_state
                val ,= value_stack
                return val
            else:
                reduce(arg)



class Rule(object):
    """
        origin : a symbol
        expansion : a list of symbols
    """
    def __init__(self, origin, expansion, alias=None, options=None):
        self.origin = origin
        self.expansion = expansion
        self.alias = alias
        self.options = options

    def __str__(self):
        return '<%s : %s>' % (self.origin, ' '.join(map(str,self.expansion)))

    def __repr__(self):
        return 'Rule(%r, %r, %r, %r)' % (self.origin, self.expansion, self.alias, self.options)


class RuleOptions:
    def __init__(self, keep_all_tokens=False, expand1=False, create_token=None, filter_out=False, priority=None):
        self.keep_all_tokens = keep_all_tokens
        self.expand1 = expand1
        self.create_token = create_token  # used for scanless postprocessing
        self.priority = priority

        self.filter_out = filter_out        # remove this rule from the tree
                                            # used for "token"-rules in scanless

    def __repr__(self):
        return 'RuleOptions(%r, %r, %r, %r, %r)' % (
            self.keep_all_tokens,
            self.expand1,
            self.create_token,
            self.priority,
            self.filter_out
        )

Shift = 0
Reduce = 1
import re
MRES = (
[(u'(?P<SQUOTED>\\\'(?:(?:(?:\\\'\\\'|(?:(?:\r)?\n)+)|[^\']+))*\\\')|(?P<DQUOTED>\\"(?:(?:\\"\\"|[^"]+))*\\")|(?P<NUMERIC>(?:(?:(?:[0-9])+(?:\\.(?:[0-9])+)?|\\.(?:[0-9])+)(?:(?:e|E)(?:(?:\\+|\\-))?(?:[0-9])+)?|(?:0x|0X)(?:(?:(?:[0-9]|[A-F])|[a-f]))+))|(?P<COMMENT>(?:\\-\\-(?:[^\n]+?)?(?:(?:\r)?\n)+|\\/\\*(.|\n)*?\\*\\/))|(?P<NEWLINE>(?:(?:\r)?\n)+)|(?P<ANONRE_11>(?s)\\[:(.*?):\\])|(?P<ANONRE_12>(?s)\\[=(.*?)=\\])|(?P<ANONRE_13>(?s)\\[<(.*?)>\\])|(?P<ANONRE_8>x\'([0-9A-Fa-f]+)\')|(?P<ANONRE_10>\\[([^\\]].+?)\\])|(?P<PARAMETER>(?:\\$|\\:)(?:\\_|(?:[A-Z]|[a-z]))(?:(?:(?:\\_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<CNAME>(?:\\_|(?:[A-Z]|[a-z]))(?:(?:(?:\\_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<WS>(?:[ \t\x0c\r\n])+)|(?P<CURRENT_TIMESTAMP>(?i)CURRENT\\_TIMESTAMP)|(?P<CURRENT_DATE>(?i)CURRENT\\_DATE)|(?P<CURRENT_TIME>(?i)CURRENT\\_TIME)|(?P<INTERSECT>(?i)INTERSECT)|(?P<RECURSIVE>(?i)RECURSIVE)|(?P<DISTINCT>(?i)DISTINCT)|(?P<BETWEEN>(?i)BETWEEN)|(?P<COLLATE>(?i)COLLATE)|(?P<INDEXED>(?i)INDEXED)|(?P<NATURAL>(?i)NATURAL)|(?P<NOTNULL>(?i)NOTNULL)|(?P<ESCAPE>(?i)ESCAPE)|(?P<EXCEPT>(?i)EXCEPT)|(?P<EXISTS>(?i)EXISTS)|(?P<HAVING>(?i)HAVING)|(?P<IGNORE>(?i)IGNORE)|(?P<ISNULL>(?i)ISNULL)|(?P<REGEXP>(?i)REGEXP)|(?P<SELECT>(?i)SELECT)|(?P<VALUES>(?i)VALUES)|(?P<__OFFSET9>(?i)OFFSET)|(?P<CROSS>(?i)CROSS)|(?P<GROUP>(?i)GROUP)|(?P<INNER>(?i)INNER)|(?P<LIMIT>(?i)LIMIT)|(?P<MATCH>(?i)MATCH)|(?P<ORDER>(?i)ORDER)|(?P<OUTER>(?i)OUTER)|(?P<UNION>(?i)UNION)|(?P<USING>(?i)USING)|(?P<WHERE>(?i)WHERE)|(?P<CASE>(?i)CASE)|(?P<CAST>(?i)CAST)|(?P<DESC>(?i)DESC)|(?P<ELSE>(?i)ELSE)|(?P<FROM>(?i)FROM)',
  {1: u'SQUOTED',
   2: u'DQUOTED',
   3: u'NUMERIC',
   4: u'COMMENT',
   6: u'NEWLINE',
   7: u'ANONRE_11',
   9: u'ANONRE_12',
   11: u'ANONRE_13',
   13: u'ANONRE_8',
   15: u'ANONRE_10',
   17: u'PARAMETER',
   18: u'CNAME',
   19: u'WS',
   20: u'CURRENT_TIMESTAMP',
   21: u'CURRENT_DATE',
   22: u'CURRENT_TIME',
   23: u'INTERSECT',
   24: u'RECURSIVE',
   25: u'DISTINCT',
   26: u'BETWEEN',
   27: u'COLLATE',
   28: u'INDEXED',
   29: u'NATURAL',
   30: u'NOTNULL',
   31: u'ESCAPE',
   32: u'EXCEPT',
   33: u'EXISTS',
   34: u'HAVING',
   35: u'IGNORE',
   36: u'ISNULL',
   37: u'REGEXP',
   38: u'SELECT',
   39: u'VALUES',
   40: u'__OFFSET9',
   41: u'CROSS',
   42: u'GROUP',
   43: u'INNER',
   44: u'LIMIT',
   45: u'MATCH',
   46: u'ORDER',
   47: u'OUTER',
   48: u'UNION',
   49: u'USING',
   50: u'WHERE',
   51: u'CASE',
   52: u'CAST',
   53: u'DESC',
   54: u'ELSE',
   55: u'FROM'}),
 (u'(?P<GLOB>(?i)GLOB)|(?P<JOIN>(?i)JOIN)|(?P<LEFT>(?i)LEFT)|(?P<LIKE>(?i)LIKE)|(?P<NULL>(?i)NULL)|(?P<THEN>(?i)THEN)|(?P<WHEN>(?i)WHEN)|(?P<WITH>(?i)WITH)|(?P<ALL>(?i)ALL)|(?P<AND>(?i)AND)|(?P<ASC>(?i)ASC)|(?P<END>(?i)END)|(?P<NOT>(?i)NOT)|(?P<__SET15>(?i)SET)|(?P<AS>(?i)AS)|(?P<BY>(?i)BY)|(?P<IN>(?i)IN)|(?P<IS>(?i)IS)|(?P<ON>(?i)ON)|(?P<OR>(?i)OR)|(?P<__ANONSTR_0>\\|\\|)|(?P<__ANONSTR_1>\\<\\<)|(?P<__ANONSTR_14>\\:\\:)|(?P<__ANONSTR_2>\\>\\>)|(?P<__ANONSTR_3>\\<\\=)|(?P<__ANONSTR_4>\\>\\=)|(?P<__ANONSTR_5>\\=\\=)|(?P<__ANONSTR_6>\\!\\=)|(?P<__ANONSTR_7>\\<\\>)|(?P<HEXDIGIT>(?:(?:[0-9]|[A-F])|[a-f]))|(?P<DIGIT>[0-9])|(?P<ASTERISK>\\*)|(?P<__AMPERSAND>\\&)|(?P<__COLON>\\:)|(?P<__COMMA>\\,)|(?P<__DOT>\\.)|(?P<__EQUAL>\\=)|(?P<__LESSTHAN>\\<)|(?P<__LPAR>\\()|(?P<__LSQB>\\[)|(?P<__MINUS>\\-)|(?P<__MORETHAN>\\>)|(?P<__PERCENT>\\%)|(?P<__PLUS>\\+)|(?P<__RPAR>\\))|(?P<__RSQB>\\])|(?P<__SEMICOLON>\\;)|(?P<__SLASH>\\/)|(?P<__TILDE>\\~)',
  {1: u'GLOB',
   2: u'JOIN',
   3: u'LEFT',
   4: u'LIKE',
   5: u'NULL',
   6: u'THEN',
   7: u'WHEN',
   8: u'WITH',
   9: u'ALL',
   10: u'AND',
   11: u'ASC',
   12: u'END',
   13: u'NOT',
   14: u'__SET15',
   15: u'AS',
   16: u'BY',
   17: u'IN',
   18: u'IS',
   19: u'ON',
   20: u'OR',
   21: u'__ANONSTR_0',
   22: u'__ANONSTR_1',
   23: u'__ANONSTR_14',
   24: u'__ANONSTR_2',
   25: u'__ANONSTR_3',
   26: u'__ANONSTR_4',
   27: u'__ANONSTR_5',
   28: u'__ANONSTR_6',
   29: u'__ANONSTR_7',
   30: u'HEXDIGIT',
   31: u'DIGIT',
   32: u'ASTERISK',
   33: u'__AMPERSAND',
   34: u'__COLON',
   35: u'__COMMA',
   36: u'__DOT',
   37: u'__EQUAL',
   38: u'__LESSTHAN',
   39: u'__LPAR',
   40: u'__LSQB',
   41: u'__MINUS',
   42: u'__MORETHAN',
   43: u'__PERCENT',
   44: u'__PLUS',
   45: u'__RPAR',
   46: u'__RSQB',
   47: u'__SEMICOLON',
   48: u'__SLASH',
   49: u'__TILDE'}),
 (u'(?P<__VBAR>\\|)', {1: u'__VBAR'})]
)
LEXER_CALLBACK = (
{u'CNAME': [(u'(?P<CURRENT_TIMESTAMP>(?i)CURRENT\\_TIMESTAMP$)|(?P<CURRENT_DATE>(?i)CURRENT\\_DATE$)|(?P<CURRENT_TIME>(?i)CURRENT\\_TIME$)|(?P<INTERSECT>(?i)INTERSECT$)|(?P<RECURSIVE>(?i)RECURSIVE$)|(?P<DISTINCT>(?i)DISTINCT$)|(?P<BETWEEN>(?i)BETWEEN$)|(?P<COLLATE>(?i)COLLATE$)|(?P<INDEXED>(?i)INDEXED$)|(?P<NATURAL>(?i)NATURAL$)|(?P<NOTNULL>(?i)NOTNULL$)|(?P<ESCAPE>(?i)ESCAPE$)|(?P<EXCEPT>(?i)EXCEPT$)|(?P<EXISTS>(?i)EXISTS$)|(?P<HAVING>(?i)HAVING$)|(?P<IGNORE>(?i)IGNORE$)|(?P<ISNULL>(?i)ISNULL$)|(?P<REGEXP>(?i)REGEXP$)|(?P<SELECT>(?i)SELECT$)|(?P<VALUES>(?i)VALUES$)|(?P<__OFFSET9>(?i)OFFSET$)|(?P<CROSS>(?i)CROSS$)|(?P<GROUP>(?i)GROUP$)|(?P<INNER>(?i)INNER$)|(?P<LIMIT>(?i)LIMIT$)|(?P<MATCH>(?i)MATCH$)|(?P<ORDER>(?i)ORDER$)|(?P<OUTER>(?i)OUTER$)|(?P<UNION>(?i)UNION$)|(?P<USING>(?i)USING$)|(?P<WHERE>(?i)WHERE$)|(?P<CASE>(?i)CASE$)|(?P<CAST>(?i)CAST$)|(?P<DESC>(?i)DESC$)|(?P<ELSE>(?i)ELSE$)|(?P<FROM>(?i)FROM$)|(?P<GLOB>(?i)GLOB$)|(?P<JOIN>(?i)JOIN$)|(?P<LEFT>(?i)LEFT$)|(?P<LIKE>(?i)LIKE$)|(?P<NULL>(?i)NULL$)|(?P<THEN>(?i)THEN$)|(?P<WHEN>(?i)WHEN$)|(?P<WITH>(?i)WITH$)|(?P<ALL>(?i)ALL$)|(?P<AND>(?i)AND$)|(?P<ASC>(?i)ASC$)|(?P<END>(?i)END$)|(?P<NOT>(?i)NOT$)|(?P<__SET15>(?i)SET$)|(?P<AS>(?i)AS$)|(?P<BY>(?i)BY$)|(?P<IN>(?i)IN$)|(?P<IS>(?i)IS$)|(?P<ON>(?i)ON$)|(?P<OR>(?i)OR$)',
             {1: u'CURRENT_TIMESTAMP',
              2: u'CURRENT_DATE',
              3: u'CURRENT_TIME',
              4: u'INTERSECT',
              5: u'RECURSIVE',
              6: u'DISTINCT',
              7: u'BETWEEN',
              8: u'COLLATE',
              9: u'INDEXED',
              10: u'NATURAL',
              11: u'NOTNULL',
              12: u'ESCAPE',
              13: u'EXCEPT',
              14: u'EXISTS',
              15: u'HAVING',
              16: u'IGNORE',
              17: u'ISNULL',
              18: u'REGEXP',
              19: u'SELECT',
              20: u'VALUES',
              21: u'__OFFSET9',
              22: u'CROSS',
              23: u'GROUP',
              24: u'INNER',
              25: u'LIMIT',
              26: u'MATCH',
              27: u'ORDER',
              28: u'OUTER',
              29: u'UNION',
              30: u'USING',
              31: u'WHERE',
              32: u'CASE',
              33: u'CAST',
              34: u'DESC',
              35: u'ELSE',
              36: u'FROM',
              37: u'GLOB',
              38: u'JOIN',
              39: u'LEFT',
              40: u'LIKE',
              41: u'NULL',
              42: u'THEN',
              43: u'WHEN',
              44: u'WITH',
              45: u'ALL',
              46: u'AND',
              47: u'ASC',
              48: u'END',
              49: u'NOT',
              50: u'__SET15',
              51: u'AS',
              52: u'BY',
              53: u'IN',
              54: u'IS',
              55: u'ON',
              56: u'OR'})]}
)
NEWLINE_TYPES = [u'COMMENT', u'SQUOTED', u'NEWLINE', u'WS', 'ANONRE_11', 'ANONRE_12', 'ANONRE_13']
IGNORE_TYPES = [u'NEWLINE', u'WS', u'COMMENT']
class LexerRegexps: pass
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
lexer = _Lex(lexer_regexps)
def lex(stream):
    return lexer.lex(stream, NEWLINE_TYPES, IGNORE_TYPES)
RULES = {
  0: Rule(u'start', [u'stmt', '__anon_star_1'], None, RuleOptions(False, True, None, None, False)),
  1: Rule(u'start', [], None, RuleOptions(False, True, None, None, False)),
  2: Rule(u'start', ['__anon_plus_0'], None, RuleOptions(False, True, None, None, False)),
  3: Rule(u'start', [u'stmt'], None, RuleOptions(False, True, None, None, False)),
  4: Rule(u'stmt', [u'select_stmt'], None, RuleOptions(False, False, None, None, False)),
  5: Rule(u'stmt', [u'reql_set_stmt'], None, RuleOptions(False, False, None, None, False)),
  6: Rule(u'compound_expr', [u'expr', '__anon_star_2'], None, RuleOptions(False, False, None, None, False)),
  7: Rule(u'compound_expr', [u'expr'], None, RuleOptions(False, False, None, None, False)),
  8: Rule(u'expr', [u'expr_or'], None, RuleOptions(False, True, None, None, False)),
  9: Rule(u'expr_or', [u'expr_and'], None, RuleOptions(False, True, None, None, False)),
  10: Rule(u'expr_or', [u'expr_and', '__anon_star_3'], None, RuleOptions(False, True, None, None, False)),
  11: Rule(u'expr_and', [u'expr_not'], None, RuleOptions(False, True, None, None, False)),
  12: Rule(u'expr_and', [u'expr_not', '__anon_star_4'], None, RuleOptions(False, True, None, None, False)),
  13: Rule(u'expr_not', [u'expr_weird'], None, RuleOptions(False, True, None, None, False)),
  14: Rule(u'expr_not', ['__anon_plus_5', u'expr_weird'], None, RuleOptions(False, True, None, None, False)),
  15: Rule(u'expr_weird', [u'expr_binary', u'BETWEEN', u'expr_binary', u'AND', u'expr_binary'], u'expr_between', RuleOptions(False, True, None, None, False)),
  16: Rule(u'expr_weird', [u'expr_binary', u'NOT', u'IN', u'expr_binary'], u'expr_in', RuleOptions(False, True, None, None, False)),
  17: Rule(u'expr_weird', [u'expr_binary', u'GLOB', u'expr_binary', u'ESCAPE', u'expr_binary'], u'expr_search', RuleOptions(False, True, None, None, False)),
  18: Rule(u'expr_weird', [u'EXISTS', '__LPAR', u'select_stmt', '__RPAR'], u'expr_exists', RuleOptions(False, True, None, None, False)),
  19: Rule(u'expr_weird', [u'expr_binary', u'NOT', u'GLOB', u'expr_binary', u'ESCAPE', u'expr_binary'], u'expr_search', RuleOptions(False, True, None, None, False)),
  20: Rule(u'expr_weird', [u'expr_binary', u'IS', u'NULL'], u'expr_null', RuleOptions(False, True, None, None, False)),
  21: Rule(u'expr_weird', [u'expr_binary', u'NOT', u'LIKE', u'expr_binary', u'ESCAPE', u'expr_binary'], u'expr_search', RuleOptions(False, True, None, None, False)),
  22: Rule(u'expr_weird', [u'expr_binary', u'NOT', u'LIKE', u'expr_binary'], u'expr_search', RuleOptions(False, True, None, None, False)),
  23: Rule(u'expr_weird', [u'expr_binary', u'NOT', u'REGEXP', u'expr_binary', u'ESCAPE', u'expr_binary'], u'expr_search', RuleOptions(False, True, None, None, False)),
  24: Rule(u'expr_weird', [u'expr_binary', u'NOT', u'NULL'], u'expr_null', RuleOptions(False, True, None, None, False)),
  25: Rule(u'expr_weird', [u'expr_binary', u'LIKE', u'expr_binary', u'ESCAPE', u'expr_binary'], u'expr_search', RuleOptions(False, True, None, None, False)),
  26: Rule(u'expr_weird', [u'expr_binary', u'NOTNULL'], u'expr_null', RuleOptions(False, True, None, None, False)),
  27: Rule(u'expr_weird', [u'expr_binary', u'NOT', u'GLOB', u'expr_binary'], u'expr_search', RuleOptions(False, True, None, None, False)),
  28: Rule(u'expr_weird', [u'expr_binary', u'REGEXP', u'expr_binary'], u'expr_search', RuleOptions(False, True, None, None, False)),
  29: Rule(u'expr_weird', [u'expr_binary', u'MATCH', u'expr_binary'], u'expr_search', RuleOptions(False, True, None, None, False)),
  30: Rule(u'expr_weird', [u'expr_binary', u'MATCH', u'expr_binary', u'ESCAPE', u'expr_binary'], u'expr_search', RuleOptions(False, True, None, None, False)),
  31: Rule(u'expr_weird', [u'expr_binary', u'IN', u'expr_binary'], u'expr_in', RuleOptions(False, True, None, None, False)),
  32: Rule(u'expr_weird', [u'expr_binary', u'LIKE', u'expr_binary'], u'expr_search', RuleOptions(False, True, None, None, False)),
  33: Rule(u'expr_weird', [u'expr_binary', u'GLOB', u'expr_binary'], u'expr_search', RuleOptions(False, True, None, None, False)),
  34: Rule(u'expr_weird', [u'expr_binary', u'REGEXP', u'expr_binary', u'ESCAPE', u'expr_binary'], u'expr_search', RuleOptions(False, True, None, None, False)),
  35: Rule(u'expr_weird', [u'expr_binary', u'NOT', u'BETWEEN', u'expr_binary', u'AND', u'expr_binary'], u'expr_between', RuleOptions(False, True, None, None, False)),
  36: Rule(u'expr_weird', [u'expr_binary'], None, RuleOptions(False, True, None, None, False)),
  37: Rule(u'expr_weird', [u'expr_binary', u'NOT', u'MATCH', u'expr_binary', u'ESCAPE', u'expr_binary'], u'expr_search', RuleOptions(False, True, None, None, False)),
  38: Rule(u'expr_weird', [u'expr_binary', u'NOT', u'MATCH', u'expr_binary'], u'expr_search', RuleOptions(False, True, None, None, False)),
  39: Rule(u'expr_weird', [u'expr_binary', u'NOT', u'REGEXP', u'expr_binary'], u'expr_search', RuleOptions(False, True, None, None, False)),
  40: Rule(u'expr_binary', [u'expr_unary', '__anon_star_6'], None, RuleOptions(False, True, None, None, False)),
  41: Rule(u'expr_binary', [u'expr_unary'], None, RuleOptions(False, True, None, None, False)),
  42: Rule(u'expr_unary', [u'expr_unary', u'COLLATE', u'ident'], u'expr_collate', RuleOptions(False, True, None, None, False)),
  43: Rule(u'expr_unary', [u'expr_func'], None, RuleOptions(False, True, None, None, False)),
  44: Rule(u'expr_unary', ['__anon_plus_7', u'expr_func'], None, RuleOptions(False, True, None, None, False)),
  45: Rule(u'expr_func', [u'CAST', '__LPAR', u'expr', u'AS', u'type_ref', '__RPAR'], u'expr_cast', RuleOptions(False, True, None, None, False)),
  46: Rule(u'expr_func', [u'ident_scoped', u'expr_parens'], u'expr_call', RuleOptions(False, True, None, None, False)),
  47: Rule(u'expr_func', [u'CASE', u'expr', '__anon_plus_8', u'ELSE', u'expr', u'END'], u'expr_case', RuleOptions(False, True, None, None, False)),
  48: Rule(u'expr_func', [u'expr_parens'], None, RuleOptions(False, True, None, None, False)),
  49: Rule(u'expr_func', [u'CASE', '__anon_plus_8', u'END'], u'expr_case', RuleOptions(False, True, None, None, False)),
  50: Rule(u'expr_func', [u'CASE', u'expr', '__anon_plus_8', u'END'], u'expr_case', RuleOptions(False, True, None, None, False)),
  51: Rule(u'expr_func', [u'CASE', '__anon_plus_8', u'ELSE', u'expr', u'END'], u'expr_case', RuleOptions(False, True, None, None, False)),
  52: Rule(u'expr_parens', ['__LPAR', u'expr_arg', '__anon_star_9', '__RPAR'], None, RuleOptions(False, True, None, None, False)),
  53: Rule(u'expr_parens', ['__LPAR', '__RPAR'], None, RuleOptions(False, True, None, None, False)),
  54: Rule(u'expr_parens', ['__LPAR', u'ASTERISK', '__RPAR'], None, RuleOptions(False, True, None, None, False)),
  55: Rule(u'expr_parens', ['__LPAR', u'DISTINCT', u'expr_arg', '__RPAR'], None, RuleOptions(False, True, None, None, False)),
  56: Rule(u'expr_parens', ['__LPAR', u'expr_arg', '__RPAR'], None, RuleOptions(False, True, None, None, False)),
  57: Rule(u'expr_parens', ['__LPAR', u'DISTINCT', u'expr_arg', '__anon_star_9', '__RPAR'], None, RuleOptions(False, True, None, None, False)),
  58: Rule(u'expr_parens', [u'atom'], None, RuleOptions(False, True, None, None, False)),
  59: Rule(u'expr_arg', [u'expr'], None, RuleOptions(False, False, None, None, False)),
  60: Rule(u'atom', ['__LPAR', u'select_stmt', '__RPAR'], u'subquery', RuleOptions(False, True, None, None, False)),
  61: Rule(u'atom', [u'literal'], None, RuleOptions(False, True, None, None, False)),
  62: Rule(u'atom', [u'ident_scoped'], None, RuleOptions(False, True, None, None, False)),
  63: Rule(u'atom', [u'parameter'], None, RuleOptions(False, True, None, None, False)),
  64: Rule(u'atom', ['__LPAR', u'expr', '__RPAR'], None, RuleOptions(False, True, None, None, False)),
  65: Rule(u'type_ref', [u'CNAME'], None, RuleOptions(False, False, None, None, False)),
  66: Rule(u'type_ref', [u'CNAME', '__LPAR', u'literal_number', '__COMMA', u'literal_number', '__RPAR'], None, RuleOptions(False, False, None, None, False)),
  67: Rule(u'type_ref', [u'CNAME', '__LPAR', u'literal_number', '__RPAR'], None, RuleOptions(False, False, None, None, False)),
  68: Rule(u'op_binary', ['__PLUS'], None, RuleOptions(False, False, None, None, False)),
  69: Rule(u'op_binary', ['__LESSTHAN'], None, RuleOptions(False, False, None, None, False)),
  70: Rule(u'op_binary', ['__PERCENT'], None, RuleOptions(False, False, None, None, False)),
  71: Rule(u'op_binary', ['__MORETHAN'], None, RuleOptions(False, False, None, None, False)),
  72: Rule(u'op_binary', ['__ANONSTR_2'], None, RuleOptions(False, False, None, None, False)),
  73: Rule(u'op_binary', ['__ANONSTR_0'], None, RuleOptions(False, False, None, None, False)),
  74: Rule(u'op_binary', ['__SLASH'], None, RuleOptions(False, False, None, None, False)),
  75: Rule(u'op_binary', ['__ANONSTR_6'], None, RuleOptions(False, False, None, None, False)),
  76: Rule(u'op_binary', ['__ANONSTR_4'], None, RuleOptions(False, False, None, None, False)),
  77: Rule(u'op_binary', ['__AMPERSAND'], None, RuleOptions(False, False, None, None, False)),
  78: Rule(u'op_binary', ['__ANONSTR_3'], None, RuleOptions(False, False, None, None, False)),
  79: Rule(u'op_binary', [u'IS', u'NOT'], None, RuleOptions(False, False, None, None, False)),
  80: Rule(u'op_binary', ['__ANONSTR_1'], None, RuleOptions(False, False, None, None, False)),
  81: Rule(u'op_binary', ['__EQUAL'], None, RuleOptions(False, False, None, None, False)),
  82: Rule(u'op_binary', ['__ANONSTR_7'], None, RuleOptions(False, False, None, None, False)),
  83: Rule(u'op_binary', ['__ANONSTR_5'], None, RuleOptions(False, False, None, None, False)),
  84: Rule(u'op_binary', ['__VBAR'], None, RuleOptions(False, False, None, None, False)),
  85: Rule(u'op_binary', [u'ASTERISK'], None, RuleOptions(False, False, None, None, False)),
  86: Rule(u'op_binary', [u'IS'], None, RuleOptions(False, False, None, None, False)),
  87: Rule(u'op_binary', ['__MINUS'], None, RuleOptions(False, False, None, None, False)),
  88: Rule(u'op_unary', ['__PLUS'], None, RuleOptions(False, False, None, None, False)),
  89: Rule(u'op_unary', ['__TILDE'], None, RuleOptions(False, False, None, None, False)),
  90: Rule(u'op_unary', ['__MINUS'], None, RuleOptions(False, False, None, None, False)),
  91: Rule(u'parameter', [u'PARAMETER'], None, RuleOptions(False, False, None, None, False)),
  92: Rule(u'alias', [u'ident'], None, RuleOptions(False, False, None, None, False)),
  93: Rule(u'alias', [u'literal_string'], None, RuleOptions(False, False, None, None, False)),
  94: Rule(u'alias', [u'ident', u'expr_parens'], None, RuleOptions(False, False, None, None, False)),
  95: Rule(u'ident_scoped', [u'ident'], None, RuleOptions(False, True, None, None, False)),
  96: Rule(u'ident_scoped', [u'ident', '__anon_star_10', '__DOT', u'ASTERISK'], None, RuleOptions(False, True, None, None, False)),
  97: Rule(u'ident_scoped', [u'ident', '__anon_star_10'], None, RuleOptions(False, True, None, None, False)),
  98: Rule(u'ident_scoped', [u'ident', '__DOT', u'ASTERISK'], None, RuleOptions(False, True, None, None, False)),
  99: Rule(u'compound_ident', [u'ident'], None, RuleOptions(False, True, None, None, False)),
  100: Rule(u'compound_ident', [u'ident', '__anon_star_11'], None, RuleOptions(False, True, None, None, False)),
  101: Rule(u'compound_ident_scoped', [u'ident_scoped', '__anon_star_12'], None, RuleOptions(False, True, None, None, False)),
  102: Rule(u'compound_ident_scoped', [u'ident_scoped'], None, RuleOptions(False, True, None, None, False)),
  103: Rule(u'literal', [u'CURRENT_TIMESTAMP'], None, RuleOptions(False, True, None, None, False)),
  104: Rule(u'literal', [u'NULL'], None, RuleOptions(False, True, None, None, False)),
  105: Rule(u'literal', [u'CURRENT_DATE'], None, RuleOptions(False, True, None, None, False)),
  106: Rule(u'literal', [u'literal_number'], None, RuleOptions(False, True, None, None, False)),
  107: Rule(u'literal', ['ANONRE_8'], u'literal_blob', RuleOptions(False, True, None, None, False)),
  108: Rule(u'literal', [u'CURRENT_TIME'], None, RuleOptions(False, True, None, None, False)),
  109: Rule(u'literal', [u'literal_string'], None, RuleOptions(False, True, None, None, False)),
  110: Rule(u'literal_string', [u'SQUOTED'], None, RuleOptions(False, False, None, None, False)),
  111: Rule(u'literal_number', [u'NUMERIC'], None, RuleOptions(False, False, None, None, False)),
  112: Rule(u'table_or_subquery', ['__LPAR', u'select_stmt', '__RPAR', u'AS', u'alias'], u'subquery', RuleOptions(False, True, None, None, False)),
  113: Rule(u'table_or_subquery', [u'table_ref', u'INDEXED', u'BY', u'ident'], None, RuleOptions(False, True, None, None, False)),
  114: Rule(u'table_or_subquery', ['__LPAR', u'join', '__RPAR'], None, RuleOptions(False, True, None, None, False)),
  115: Rule(u'table_or_subquery', [u'table_ref', u'NOT', u'INDEXED'], None, RuleOptions(False, True, None, None, False)),
  116: Rule(u'table_or_subquery', [u'table_ref'], None, RuleOptions(False, True, None, None, False)),
  117: Rule(u'table_or_subquery', ['__LPAR', u'select_stmt', '__RPAR'], u'subquery', RuleOptions(False, True, None, None, False)),
  118: Rule(u'table_or_subquery', ['__LPAR', u'select_stmt', '__RPAR', u'alias'], u'subquery', RuleOptions(False, True, None, None, False)),
  119: Rule(u'table_ref', [u'ident_scoped', '__LPAR', u'compound_expr', '__RPAR', u'AS', u'alias'], None, RuleOptions(False, False, None, None, False)),
  120: Rule(u'table_ref', [u'ident_scoped', u'alias'], None, RuleOptions(False, False, None, None, False)),
  121: Rule(u'table_ref', [u'ident_scoped', '__LPAR', '__RPAR', u'alias'], None, RuleOptions(False, False, None, None, False)),
  122: Rule(u'table_ref', [u'ident_scoped', u'AS', u'alias'], None, RuleOptions(False, False, None, None, False)),
  123: Rule(u'table_ref', [u'ident_scoped', '__LPAR', u'compound_expr', '__RPAR'], None, RuleOptions(False, False, None, None, False)),
  124: Rule(u'table_ref', [u'ident_scoped', '__LPAR', '__RPAR', u'AS', u'alias'], None, RuleOptions(False, False, None, None, False)),
  125: Rule(u'table_ref', [u'ident_scoped'], None, RuleOptions(False, False, None, None, False)),
  126: Rule(u'table_ref', [u'ident_scoped', '__LPAR', '__RPAR'], None, RuleOptions(False, False, None, None, False)),
  127: Rule(u'table_ref', [u'ident_scoped', '__LPAR', u'compound_expr', '__RPAR', u'alias'], None, RuleOptions(False, False, None, None, False)),
  128: Rule(u'table_ref', [u'reql_expr'], None, RuleOptions(False, False, None, None, False)),
  129: Rule(u'cte', [u'alias', u'AS', '__LPAR', u'select_stmt', '__RPAR'], None, RuleOptions(False, False, None, None, False)),
  130: Rule(u'cte', [u'alias', u'AS', '__LPAR', u'reql_expr', '__RPAR'], u'reql_cte', RuleOptions(False, False, None, None, False)),
  131: Rule(u'cte', [u'alias', u'AS', u'reql_expr'], u'reql_cte', RuleOptions(False, False, None, None, False)),
  132: Rule(u'cte', [u'alias', '__LPAR', u'compound_ident', '__RPAR', u'AS', u'reql_expr'], u'reql_cte', RuleOptions(False, False, None, None, False)),
  133: Rule(u'cte', [u'alias', '__LPAR', u'compound_ident', '__RPAR', u'AS', '__LPAR', u'select_stmt', '__RPAR'], None, RuleOptions(False, False, None, None, False)),
  134: Rule(u'cte', [u'alias', '__LPAR', u'compound_ident', '__RPAR', u'AS', '__LPAR', u'reql_expr', '__RPAR'], u'reql_cte', RuleOptions(False, False, None, None, False)),
  135: Rule(u'join', [u'table_or_subquery', '__anon_star_13'], None, RuleOptions(False, True, None, None, False)),
  136: Rule(u'join', [u'table_or_subquery'], None, RuleOptions(False, True, None, None, False)),
  137: Rule(u'join_constraint', [u'USING', '__LPAR', u'compound_ident', '__RPAR'], None, RuleOptions(False, False, None, None, False)),
  138: Rule(u'join_constraint', [u'ON', u'expr'], None, RuleOptions(False, False, None, None, False)),
  139: Rule(u'op_join', [u'NATURAL', u'JOIN'], None, RuleOptions(False, False, None, None, False)),
  140: Rule(u'op_join', [u'CROSS', u'JOIN'], None, RuleOptions(False, False, None, None, False)),
  141: Rule(u'op_join', [u'NATURAL', u'INNER', u'JOIN'], None, RuleOptions(False, False, None, None, False)),
  142: Rule(u'op_join', [u'NATURAL', u'LEFT', u'JOIN'], None, RuleOptions(False, False, None, None, False)),
  143: Rule(u'op_join', [u'INNER', u'JOIN'], None, RuleOptions(False, False, None, None, False)),
  144: Rule(u'op_join', [u'NATURAL', u'CROSS', u'JOIN'], None, RuleOptions(False, False, None, None, False)),
  145: Rule(u'op_join', ['__COMMA'], None, RuleOptions(False, False, None, None, False)),
  146: Rule(u'op_join', [u'NATURAL', u'LEFT', u'OUTER', u'JOIN'], None, RuleOptions(False, False, None, None, False)),
  147: Rule(u'op_join', [u'JOIN'], None, RuleOptions(False, False, None, None, False)),
  148: Rule(u'op_join', [u'LEFT', u'OUTER', u'JOIN'], None, RuleOptions(False, False, None, None, False)),
  149: Rule(u'op_join', [u'LEFT', u'JOIN'], None, RuleOptions(False, False, None, None, False)),
  150: Rule(u'column', [u'expr', u'ident'], None, RuleOptions(False, False, None, None, False)),
  151: Rule(u'column', [u'expr', u'AS', u'ident'], None, RuleOptions(False, False, None, None, False)),
  152: Rule(u'column', [u'expr', u'literal_string'], None, RuleOptions(False, False, None, None, False)),
  153: Rule(u'column', [u'expr'], None, RuleOptions(False, False, None, None, False)),
  154: Rule(u'column', [u'ASTERISK'], None, RuleOptions(False, False, None, None, False)),
  155: Rule(u'column', [u'expr', u'AS', u'literal_string'], None, RuleOptions(False, False, None, None, False)),
  156: Rule(u'select_core', [u'values'], None, RuleOptions(False, True, None, None, False)),
  157: Rule(u'select_core', [u'select'], None, RuleOptions(False, True, None, None, False)),
  158: Rule(u'values', [u'VALUES', u'expr_parens'], None, RuleOptions(False, False, None, None, False)),
  159: Rule(u'values', [u'VALUES', u'expr_parens', '__anon_star_14'], None, RuleOptions(False, False, None, None, False)),
  160: Rule(u'select', [u'SELECT', u'column', u'from', u'group', u'having', u'order'], None, RuleOptions(False, False, None, None, False)),
  161: Rule(u'select', [u'SELECT', u'select_mod', u'column', '__anon_star_15'], None, RuleOptions(False, False, None, None, False)),
  162: Rule(u'select', [u'SELECT', u'select_mod', u'column', u'from', u'having', u'order'], None, RuleOptions(False, False, None, None, False)),
  163: Rule(u'select', [u'SELECT', u'column', '__anon_star_15', u'where', u'group', u'order'], None, RuleOptions(False, False, None, None, False)),
  164: Rule(u'select', [u'SELECT', u'select_mod', u'column', '__anon_star_15', u'order'], None, RuleOptions(False, False, None, None, False)),
  165: Rule(u'select', [u'SELECT', u'select_mod', u'column', u'from', u'where', u'group', u'order'], None, RuleOptions(False, False, None, None, False)),
  166: Rule(u'select', [u'SELECT', u'column', '__anon_star_15', u'from', u'order'], None, RuleOptions(False, False, None, None, False)),
  167: Rule(u'select', [u'SELECT', u'select_mod', u'column', u'where', u'having'], None, RuleOptions(False, False, None, None, False)),
  168: Rule(u'select', [u'SELECT', u'column', '__anon_star_15', u'where', u'having'], None, RuleOptions(False, False, None, None, False)),
  169: Rule(u'select', [u'SELECT', u'select_mod', u'column', '__anon_star_15', u'where', u'having', u'order'], None, RuleOptions(False, False, None, None, False)),
  170: Rule(u'select', [u'SELECT', u'select_mod', u'column', '__anon_star_15', u'where', u'group', u'having', u'order'], None, RuleOptions(False, False, None, None, False)),
  171: Rule(u'select', [u'SELECT', u'column', u'having'], None, RuleOptions(False, False, None, None, False)),
  172: Rule(u'select', [u'SELECT', u'column', '__anon_star_15'], None, RuleOptions(False, False, None, None, False)),
  173: Rule(u'select', [u'SELECT', u'select_mod', u'column', '__anon_star_15', u'where'], None, RuleOptions(False, False, None, None, False)),
  174: Rule(u'select', [u'SELECT', u'select_mod', u'column', u'from', u'where', u'having', u'order'], None, RuleOptions(False, False, None, None, False)),
  175: Rule(u'select', [u'SELECT', u'column', u'from', u'where', u'group', u'having'], None, RuleOptions(False, False, None, None, False)),
  176: Rule(u'select', [u'SELECT', u'column', u'from', u'where', u'order'], None, RuleOptions(False, False, None, None, False)),
  177: Rule(u'select', [u'SELECT', u'column', '__anon_star_15', u'where', u'group', u'having'], None, RuleOptions(False, False, None, None, False)),
  178: Rule(u'select', [u'SELECT', u'select_mod', u'column', '__anon_star_15', u'from', u'where', u'order'], None, RuleOptions(False, False, None, None, False)),
  179: Rule(u'select', [u'SELECT', u'select_mod', u'column', u'where'], None, RuleOptions(False, False, None, None, False)),
  180: Rule(u'select', [u'SELECT', u'select_mod', u'column', u'from', u'where', u'having'], None, RuleOptions(False, False, None, None, False)),
  181: Rule(u'select', [u'SELECT', u'select_mod', u'column', '__anon_star_15', u'having', u'order'], None, RuleOptions(False, False, None, None, False)),
  182: Rule(u'select', [u'SELECT', u'column', '__anon_star_15', u'from'], None, RuleOptions(False, False, None, None, False)),
  183: Rule(u'select', [u'SELECT', u'column', '__anon_star_15', u'from', u'having', u'order'], None, RuleOptions(False, False, None, None, False)),
  184: Rule(u'select', [u'SELECT', u'column', u'group', u'having', u'order'], None, RuleOptions(False, False, None, None, False)),
  185: Rule(u'select', [u'SELECT', u'select_mod', u'column', '__anon_star_15', u'having'], None, RuleOptions(False, False, None, None, False)),
  186: Rule(u'select', [u'SELECT', u'select_mod', u'column', u'from', u'where', u'group', u'having'], None, RuleOptions(False, False, None, None, False)),
  187: Rule(u'select', [u'SELECT', u'select_mod', u'column', u'from', u'where', u'group'], None, RuleOptions(False, False, None, None, False)),
  188: Rule(u'select', [u'SELECT', u'column', u'from', u'where', u'having'], None, RuleOptions(False, False, None, None, False)),
  189: Rule(u'select', [u'SELECT', u'column', u'where', u'having'], None, RuleOptions(False, False, None, None, False)),
  190: Rule(u'select', [u'SELECT', u'column', u'from', u'having'], None, RuleOptions(False, False, None, None, False)),
  191: Rule(u'select', [u'SELECT', u'select_mod', u'column', u'from', u'group', u'having'], None, RuleOptions(False, False, None, None, False)),
  192: Rule(u'select', [u'SELECT', u'column', u'where', u'group'], None, RuleOptions(False, False, None, None, False)),
  193: Rule(u'select', [u'SELECT', u'column', '__anon_star_15', u'from', u'having'], None, RuleOptions(False, False, None, None, False)),
  194: Rule(u'select', [u'SELECT', u'select_mod', u'column', '__anon_star_15', u'group', u'having', u'order'], None, RuleOptions(False, False, None, None, False)),
  195: Rule(u'select', [u'SELECT', u'select_mod', u'column', '__anon_star_15', u'group', u'having'], None, RuleOptions(False, False, None, None, False)),
  196: Rule(u'select', [u'SELECT', u'select_mod', u'column', '__anon_star_15', u'from', u'group', u'having', u'order'], None, RuleOptions(False, False, None, None, False)),
  197: Rule(u'select', [u'SELECT', u'column', '__anon_star_15', u'where', u'group'], None, RuleOptions(False, False, None, None, False)),
  198: Rule(u'select', [u'SELECT', u'column', '__anon_star_15', u'having', u'order'], None, RuleOptions(False, False, None, None, False)),
  199: Rule(u'select', [u'SELECT', u'select_mod', u'column', '__anon_star_15', u'from', u'where', u'group', u'order'], None, RuleOptions(False, False, None, None, False)),
  200: Rule(u'select', [u'SELECT', u'column', u'from', u'where'], None, RuleOptions(False, False, None, None, False)),
  201: Rule(u'select', [u'SELECT', u'select_mod', u'column', u'from'], None, RuleOptions(False, False, None, None, False)),
  202: Rule(u'select', [u'SELECT', u'column', u'where'], None, RuleOptions(False, False, None, None, False)),
  203: Rule(u'select', [u'SELECT', u'column', u'from'], None, RuleOptions(False, False, None, None, False)),
  204: Rule(u'select', [u'SELECT', u'select_mod', u'column', '__anon_star_15', u'from'], None, RuleOptions(False, False, None, None, False)),
  205: Rule(u'select', [u'SELECT', u'select_mod', u'column', u'where', u'group', u'order'], None, RuleOptions(False, False, None, None, False)),
  206: Rule(u'select', [u'SELECT', u'select_mod', u'column', '__anon_star_15', u'group', u'order'], None, RuleOptions(False, False, None, None, False)),
  207: Rule(u'select', [u'SELECT', u'column', u'group', u'having'], None, RuleOptions(False, False, None, None, False)),
  208: Rule(u'select', [u'SELECT', u'column', u'from', u'order'], None, RuleOptions(False, False, None, None, False)),
  209: Rule(u'select', [u'SELECT', u'select_mod', u'column', '__anon_star_15', u'from', u'where', u'having'], None, RuleOptions(False, False, None, None, False)),
  210: Rule(u'select', [u'SELECT', u'select_mod', u'column', u'from', u'where', u'order'], None, RuleOptions(False, False, None, None, False)),
  211: Rule(u'select', [u'SELECT', u'column', '__anon_star_15', u'where', u'having', u'order'], None, RuleOptions(False, False, None, None, False)),
  212: Rule(u'select', [u'SELECT', u'select_mod', u'column', '__anon_star_15', u'from', u'order'], None, RuleOptions(False, False, None, None, False)),
  213: Rule(u'select', [u'SELECT', u'column', '__anon_star_15', u'where', u'group', u'having', u'order'], None, RuleOptions(False, False, None, None, False)),
  214: Rule(u'select', [u'SELECT', u'select_mod', u'column', u'where', u'having', u'order'], None, RuleOptions(False, False, None, None, False)),
  215: Rule(u'select', [u'SELECT', u'select_mod', u'column', u'from', u'where', u'group', u'having', u'order'], None, RuleOptions(False, False, None, None, False)),
  216: Rule(u'select', [u'SELECT', u'select_mod', u'column', u'from', u'order'], None, RuleOptions(False, False, None, None, False)),
  217: Rule(u'select', [u'SELECT', u'select_mod', u'column', u'where', u'group', u'having', u'order'], None, RuleOptions(False, False, None, None, False)),
  218: Rule(u'select', [u'SELECT', u'select_mod', u'column', '__anon_star_15', u'from', u'where', u'group', u'having', u'order'], None, RuleOptions(False, False, None, None, False)),
  219: Rule(u'select', [u'SELECT', u'column', u'order'], None, RuleOptions(False, False, None, None, False)),
  220: Rule(u'select', [u'SELECT', u'select_mod', u'column', '__anon_star_15', u'from', u'group', u'order'], None, RuleOptions(False, False, None, None, False)),
  221: Rule(u'select', [u'SELECT', u'column', '__anon_star_15', u'where'], None, RuleOptions(False, False, None, None, False)),
  222: Rule(u'select', [u'SELECT', u'select_mod', u'column', u'where', u'order'], None, RuleOptions(False, False, None, None, False)),
  223: Rule(u'select', [u'SELECT', u'column', u'where', u'group', u'having', u'order'], None, RuleOptions(False, False, None, None, False)),
  224: Rule(u'select', [u'SELECT', u'column', u'from', u'where', u'group'], None, RuleOptions(False, False, None, None, False)),
  225: Rule(u'select', [u'SELECT', u'select_mod', u'column', u'group', u'order'], None, RuleOptions(False, False, None, None, False)),
  226: Rule(u'select', [u'SELECT', u'select_mod', u'column', u'group', u'having', u'order'], None, RuleOptions(False, False, None, None, False)),
  227: Rule(u'select', [u'SELECT', u'column', '__anon_star_15', u'from', u'where', u'having', u'order'], None, RuleOptions(False, False, None, None, False)),
  228: Rule(u'select', [u'SELECT', u'column', '__anon_star_15', u'from', u'where', u'group', u'order'], None, RuleOptions(False, False, None, None, False)),
  229: Rule(u'select', [u'SELECT', u'column', '__anon_star_15', u'group', u'having'], None, RuleOptions(False, False, None, None, False)),
  230: Rule(u'select', [u'SELECT', u'column', '__anon_star_15', u'from', u'where', u'order'], None, RuleOptions(False, False, None, None, False)),
  231: Rule(u'select', [u'SELECT', u'column', '__anon_star_15', u'from', u'where'], None, RuleOptions(False, False, None, None, False)),
  232: Rule(u'select', [u'SELECT', u'column', u'from', u'group'], None, RuleOptions(False, False, None, None, False)),
  233: Rule(u'select', [u'SELECT', u'column', u'from', u'where', u'group', u'order'], None, RuleOptions(False, False, None, None, False)),
  234: Rule(u'select', [u'SELECT', u'select_mod', u'column', '__anon_star_15', u'from', u'where', u'group'], None, RuleOptions(False, False, None, None, False)),
  235: Rule(u'select', [u'SELECT', u'select_mod', u'column', u'where', u'group'], None, RuleOptions(False, False, None, None, False)),
  236: Rule(u'select', [u'SELECT', u'column', u'from', u'where', u'having', u'order'], None, RuleOptions(False, False, None, None, False)),
  237: Rule(u'select', [u'SELECT', u'column', '__anon_star_15', u'from', u'where', u'group', u'having'], None, RuleOptions(False, False, None, None, False)),
  238: Rule(u'select', [u'SELECT', u'column'], None, RuleOptions(False, False, None, None, False)),
  239: Rule(u'select', [u'SELECT', u'column', u'where', u'group', u'order'], None, RuleOptions(False, False, None, None, False)),
  240: Rule(u'select', [u'SELECT', u'column', u'from', u'where', u'group', u'having', u'order'], None, RuleOptions(False, False, None, None, False)),
  241: Rule(u'select', [u'SELECT', u'column', u'where', u'group', u'having'], None, RuleOptions(False, False, None, None, False)),
  242: Rule(u'select', [u'SELECT', u'column', '__anon_star_15', u'group'], None, RuleOptions(False, False, None, None, False)),
  243: Rule(u'select', [u'SELECT', u'column', '__anon_star_15', u'group', u'having', u'order'], None, RuleOptions(False, False, None, None, False)),
  244: Rule(u'select', [u'SELECT', u'column', '__anon_star_15', u'having'], None, RuleOptions(False, False, None, None, False)),
  245: Rule(u'select', [u'SELECT', u'column', u'from', u'having', u'order'], None, RuleOptions(False, False, None, None, False)),
  246: Rule(u'select', [u'SELECT', u'column', '__anon_star_15', u'from', u'where', u'group'], None, RuleOptions(False, False, None, None, False)),
  247: Rule(u'select', [u'SELECT', u'select_mod', u'column', '__anon_star_15', u'from', u'where'], None, RuleOptions(False, False, None, None, False)),
  248: Rule(u'select', [u'SELECT', u'column', '__anon_star_15', u'from', u'group'], None, RuleOptions(False, False, None, None, False)),
  249: Rule(u'select', [u'SELECT', u'column', '__anon_star_15', u'from', u'group', u'having'], None, RuleOptions(False, False, None, None, False)),
  250: Rule(u'select', [u'SELECT', u'column', '__anon_star_15', u'from', u'where', u'group', u'having', u'order'], None, RuleOptions(False, False, None, None, False)),
  251: Rule(u'select', [u'SELECT', u'column', u'where', u'order'], None, RuleOptions(False, False, None, None, False)),
  252: Rule(u'select', [u'SELECT', u'column', '__anon_star_15', u'from', u'group', u'having', u'order'], None, RuleOptions(False, False, None, None, False)),
  253: Rule(u'select', [u'SELECT', u'select_mod', u'column', '__anon_star_15', u'from', u'having', u'order'], None, RuleOptions(False, False, None, None, False)),
  254: Rule(u'select', [u'SELECT', u'select_mod', u'column', '__anon_star_15', u'from', u'where', u'having', u'order'], None, RuleOptions(False, False, None, None, False)),
  255: Rule(u'select', [u'SELECT', u'select_mod', u'column', '__anon_star_15', u'from', u'group'], None, RuleOptions(False, False, None, None, False)),
  256: Rule(u'select', [u'SELECT', u'column', '__anon_star_15', u'where', u'order'], None, RuleOptions(False, False, None, None, False)),
  257: Rule(u'select', [u'SELECT', u'column', u'from', u'group', u'order'], None, RuleOptions(False, False, None, None, False)),
  258: Rule(u'select', [u'SELECT', u'select_mod', u'column', '__anon_star_15', u'where', u'group', u'having'], None, RuleOptions(False, False, None, None, False)),
  259: Rule(u'select', [u'SELECT', u'select_mod', u'column', u'from', u'where'], None, RuleOptions(False, False, None, None, False)),
  260: Rule(u'select', [u'SELECT', u'column', '__anon_star_15', u'order'], None, RuleOptions(False, False, None, None, False)),
  261: Rule(u'select', [u'SELECT', u'select_mod', u'column', u'from', u'group', u'having', u'order'], None, RuleOptions(False, False, None, None, False)),
  262: Rule(u'select', [u'SELECT', u'column', '__anon_star_15', u'group', u'order'], None, RuleOptions(False, False, None, None, False)),
  263: Rule(u'select', [u'SELECT', u'select_mod', u'column'], None, RuleOptions(False, False, None, None, False)),
  264: Rule(u'select', [u'SELECT', u'select_mod', u'column', u'having', u'order'], None, RuleOptions(False, False, None, None, False)),
  265: Rule(u'select', [u'SELECT', u'select_mod', u'column', u'order'], None, RuleOptions(False, False, None, None, False)),
  266: Rule(u'select', [u'SELECT', u'select_mod', u'column', '__anon_star_15', u'from', u'group', u'having'], None, RuleOptions(False, False, None, None, False)),
  267: Rule(u'select', [u'SELECT', u'select_mod', u'column', u'group'], None, RuleOptions(False, False, None, None, False)),
  268: Rule(u'select', [u'SELECT', u'select_mod', u'column', '__anon_star_15', u'where', u'order'], None, RuleOptions(False, False, None, None, False)),
  269: Rule(u'select', [u'SELECT', u'column', u'group'], None, RuleOptions(False, False, None, None, False)),
  270: Rule(u'select', [u'SELECT', u'select_mod', u'column', '__anon_star_15', u'group'], None, RuleOptions(False, False, None, None, False)),
  271: Rule(u'select', [u'SELECT', u'select_mod', u'column', '__anon_star_15', u'where', u'group', u'order'], None, RuleOptions(False, False, None, None, False)),
  272: Rule(u'select', [u'SELECT', u'select_mod', u'column', '__anon_star_15', u'from', u'where', u'group', u'having'], None, RuleOptions(False, False, None, None, False)),
  273: Rule(u'select', [u'SELECT', u'column', u'group', u'order'], None, RuleOptions(False, False, None, None, False)),
  274: Rule(u'select', [u'SELECT', u'select_mod', u'column', u'from', u'having'], None, RuleOptions(False, False, None, None, False)),
  275: Rule(u'select', [u'SELECT', u'select_mod', u'column', u'having'], None, RuleOptions(False, False, None, None, False)),
  276: Rule(u'select', [u'SELECT', u'select_mod', u'column', u'where', u'group', u'having'], None, RuleOptions(False, False, None, None, False)),
  277: Rule(u'select', [u'SELECT', u'select_mod', u'column', '__anon_star_15', u'where', u'group'], None, RuleOptions(False, False, None, None, False)),
  278: Rule(u'select', [u'SELECT', u'select_mod', u'column', u'group', u'having'], None, RuleOptions(False, False, None, None, False)),
  279: Rule(u'select', [u'SELECT', u'column', '__anon_star_15', u'from', u'where', u'having'], None, RuleOptions(False, False, None, None, False)),
  280: Rule(u'select', [u'SELECT', u'select_mod', u'column', u'from', u'group', u'order'], None, RuleOptions(False, False, None, None, False)),
  281: Rule(u'select', [u'SELECT', u'select_mod', u'column', '__anon_star_15', u'where', u'having'], None, RuleOptions(False, False, None, None, False)),
  282: Rule(u'select', [u'SELECT', u'column', '__anon_star_15', u'from', u'group', u'order'], None, RuleOptions(False, False, None, None, False)),
  283: Rule(u'select', [u'SELECT', u'column', u'from', u'group', u'having'], None, RuleOptions(False, False, None, None, False)),
  284: Rule(u'select', [u'SELECT', u'select_mod', u'column', '__anon_star_15', u'from', u'having'], None, RuleOptions(False, False, None, None, False)),
  285: Rule(u'select', [u'SELECT', u'column', u'having', u'order'], None, RuleOptions(False, False, None, None, False)),
  286: Rule(u'select', [u'SELECT', u'select_mod', u'column', u'from', u'group'], None, RuleOptions(False, False, None, None, False)),
  287: Rule(u'select', [u'SELECT', u'column', u'where', u'having', u'order'], None, RuleOptions(False, False, None, None, False)),
  288: Rule(u'select_mod', [u'DISTINCT'], None, RuleOptions(False, False, None, None, False)),
  289: Rule(u'select_mod', [u'ALL'], None, RuleOptions(False, False, None, None, False)),
  290: Rule(u'from', [u'FROM', u'join'], None, RuleOptions(False, False, None, None, False)),
  291: Rule(u'where', [u'WHERE', u'expr'], None, RuleOptions(False, False, None, None, False)),
  292: Rule(u'group', [u'GROUP', u'BY', u'compound_expr'], None, RuleOptions(False, False, None, None, False)),
  293: Rule(u'having', [u'HAVING', u'expr'], None, RuleOptions(False, False, None, None, False)),
  294: Rule(u'compound_select', [u'select_core', '__anon_star_16'], None, RuleOptions(False, True, None, None, False)),
  295: Rule(u'compound_select', [u'select_core'], None, RuleOptions(False, True, None, None, False)),
  296: Rule(u'op_compound', [u'UNION'], None, RuleOptions(False, False, None, None, False)),
  297: Rule(u'op_compound', [u'EXCEPT'], None, RuleOptions(False, False, None, None, False)),
  298: Rule(u'op_compound', [u'UNION', u'ALL'], None, RuleOptions(False, False, None, None, False)),
  299: Rule(u'op_compound', [u'INTERSECT'], None, RuleOptions(False, False, None, None, False)),
  300: Rule(u'with', [u'WITH', u'cte'], None, RuleOptions(False, False, None, None, False)),
  301: Rule(u'with', [u'WITH', u'RECURSIVE', u'cte'], None, RuleOptions(False, False, None, None, False)),
  302: Rule(u'with', [u'WITH', u'cte', '__anon_star_17'], None, RuleOptions(False, False, None, None, False)),
  303: Rule(u'with', [u'WITH', u'RECURSIVE', u'cte', '__anon_star_17'], None, RuleOptions(False, False, None, None, False)),
  304: Rule(u'order', [u'ORDER', u'BY', u'ordering_term'], None, RuleOptions(False, False, None, None, False)),
  305: Rule(u'order', [u'ORDER', u'BY', u'ordering_term', '__anon_star_18'], None, RuleOptions(False, False, None, None, False)),
  306: Rule(u'ordering_term', [u'expr', u'ASC'], None, RuleOptions(False, False, None, None, False)),
  307: Rule(u'ordering_term', [u'expr', u'DESC'], None, RuleOptions(False, False, None, None, False)),
  308: Rule(u'ordering_term', [u'expr'], None, RuleOptions(False, False, None, None, False)),
  309: Rule(u'limit', [u'LIMIT', u'expr', '__COMMA', u'expr'], None, RuleOptions(False, False, None, None, False)),
  310: Rule(u'limit', [u'LIMIT', u'expr'], None, RuleOptions(False, False, None, None, False)),
  311: Rule(u'limit', [u'LIMIT', u'expr', u'__OFFSET9', u'expr'], None, RuleOptions(False, False, None, None, False)),
  312: Rule(u'select_stmt', [u'with', u'compound_select', u'order', u'limit'], None, RuleOptions(False, False, None, None, False)),
  313: Rule(u'select_stmt', [u'compound_select', u'limit'], None, RuleOptions(False, False, None, None, False)),
  314: Rule(u'select_stmt', [u'compound_select'], None, RuleOptions(False, False, None, None, False)),
  315: Rule(u'select_stmt', [u'compound_select', u'order', u'limit'], None, RuleOptions(False, False, None, None, False)),
  316: Rule(u'select_stmt', [u'with', u'compound_select', u'limit'], None, RuleOptions(False, False, None, None, False)),
  317: Rule(u'select_stmt', [u'with', u'compound_select'], None, RuleOptions(False, False, None, None, False)),
  318: Rule(u'select_stmt', [u'with', u'compound_select', u'order'], None, RuleOptions(False, False, None, None, False)),
  319: Rule(u'select_stmt', [u'compound_select', u'order'], None, RuleOptions(False, False, None, None, False)),
  320: Rule(u'ident', [u'CNAME'], None, RuleOptions(False, False, None, None, False)),
  321: Rule(u'ident', ['ANONRE_10'], None, RuleOptions(False, False, None, None, False)),
  322: Rule(u'ident', [u'DQUOTED'], None, RuleOptions(False, False, None, None, False)),
  323: Rule(u'reql_expr', [u'CNAME', u'reql_params', '__anon_star_19'], None, RuleOptions(False, False, None, None, False)),
  324: Rule(u'reql_expr', [u'CNAME', u'reql_params'], None, RuleOptions(False, False, None, None, False)),
  325: Rule(u'reql_params', ['__LSQB', u'reql_param', '__anon_star_20', '__RSQB'], None, RuleOptions(False, False, None, None, False)),
  326: Rule(u'reql_params', [u'reql_block'], None, RuleOptions(False, False, None, None, False)),
  327: Rule(u'reql_params', ['__LSQB', u'reql_param', '__RSQB'], None, RuleOptions(False, False, None, None, False)),
  328: Rule(u'reql_params', ['__LSQB', '__RSQB'], None, RuleOptions(False, False, None, None, False)),
  329: Rule(u'reql_param', [u'ident'], None, RuleOptions(False, True, None, None, False)),
  330: Rule(u'reql_param', [u'literal'], None, RuleOptions(False, True, None, None, False)),
  331: Rule(u'reql_param', [u'parameter'], None, RuleOptions(False, True, None, None, False)),
  332: Rule(u'reql_param', [u'reql_pair'], None, RuleOptions(False, True, None, None, False)),
  333: Rule(u'reql_pair', [u'CNAME', '__COLON', u'reql_block'], None, RuleOptions(False, False, None, None, False)),
  334: Rule(u'reql_pair', [u'CNAME', '__COLON', u'ident'], None, RuleOptions(False, False, None, None, False)),
  335: Rule(u'reql_pair', [u'CNAME', '__COLON', u'literal'], None, RuleOptions(False, False, None, None, False)),
  336: Rule(u'reql_pair', [u'CNAME', '__COLON', u'parameter'], None, RuleOptions(False, False, None, None, False)),
  337: Rule(u'reql_block', ['ANONRE_11'], u'reql_block', RuleOptions(False, False, None, None, False)),
  338: Rule(u'reql_block', ['ANONRE_13'], u'reql_block_folded', RuleOptions(False, False, None, None, False)),
  339: Rule(u'reql_block', ['ANONRE_12'], u'reql_block_verbatim', RuleOptions(False, False, None, None, False)),
  340: Rule(u'reql_mapper', ['__ANONSTR_14', u'CNAME'], None, RuleOptions(False, False, None, None, False)),
  341: Rule(u'reql_mapper', ['__ANONSTR_14', u'CNAME', u'reql_params'], None, RuleOptions(False, False, None, None, False)),
  342: Rule(u'reql_set_stmt', [u'__SET15', u'CNAME', '__EQUAL', u'CNAME'], None, RuleOptions(False, False, None, None, False)),
  343: Rule(u'reql_set_stmt', [u'__SET15', u'CNAME', '__EQUAL', u'literal'], None, RuleOptions(False, False, None, None, False)),
  344: Rule('__anon_plus_0', ['__SEMICOLON'], None, None),
  345: Rule('__anon_plus_0', ['__anon_plus_0', '__SEMICOLON'], None, None),
  346: Rule('__anon_star_1', ['__anon_star_1', '__anon_plus_0', u'stmt'], None, None),
  347: Rule('__anon_star_1', ['__anon_plus_0', u'stmt'], None, None),
  348: Rule('__anon_star_1', ['__anon_plus_0'], None, None),
  349: Rule('__anon_star_1', ['__anon_star_1', '__anon_plus_0'], None, None),
  350: Rule('__anon_star_2', ['__anon_star_2', '__COMMA', u'expr'], None, None),
  351: Rule('__anon_star_2', ['__COMMA', u'expr'], None, None),
  352: Rule('__anon_star_3', ['__anon_star_3', u'OR', u'expr_and'], None, None),
  353: Rule('__anon_star_3', [u'OR', u'expr_and'], None, None),
  354: Rule('__anon_star_4', ['__anon_star_4', u'AND', u'expr_not'], None, None),
  355: Rule('__anon_star_4', [u'AND', u'expr_not'], None, None),
  356: Rule('__anon_plus_5', [u'NOT'], None, None),
  357: Rule('__anon_plus_5', ['__anon_plus_5', u'NOT'], None, None),
  358: Rule('__anon_star_6', ['__anon_star_6', u'op_binary', u'expr_unary'], None, None),
  359: Rule('__anon_star_6', [u'op_binary', u'expr_unary'], None, None),
  360: Rule('__anon_plus_7', ['__anon_plus_7', u'op_unary'], None, None),
  361: Rule('__anon_plus_7', [u'op_unary'], None, None),
  362: Rule('__anon_plus_8', ['__anon_plus_8', u'WHEN', u'expr', u'THEN', u'expr'], None, None),
  363: Rule('__anon_plus_8', [u'WHEN', u'expr', u'THEN', u'expr'], None, None),
  364: Rule('__anon_star_9', ['__anon_star_9', '__COMMA', u'expr_arg'], None, None),
  365: Rule('__anon_star_9', ['__COMMA', u'expr_arg'], None, None),
  366: Rule('__anon_star_10', ['__DOT', u'ident'], None, None),
  367: Rule('__anon_star_10', ['__anon_star_10', '__DOT', u'ident'], None, None),
  368: Rule('__anon_star_11', ['__anon_star_11', '__COMMA', u'ident'], None, None),
  369: Rule('__anon_star_11', ['__COMMA', u'ident'], None, None),
  370: Rule('__anon_star_12', ['__anon_star_12', '__COMMA', u'ident_scoped'], None, None),
  371: Rule('__anon_star_12', ['__COMMA', u'ident_scoped'], None, None),
  372: Rule('__anon_star_13', [u'op_join', u'table_or_subquery'], None, None),
  373: Rule('__anon_star_13', ['__anon_star_13', u'op_join', u'table_or_subquery', u'join_constraint'], None, None),
  374: Rule('__anon_star_13', [u'op_join', u'table_or_subquery', u'join_constraint'], None, None),
  375: Rule('__anon_star_13', ['__anon_star_13', u'op_join', u'table_or_subquery'], None, None),
  376: Rule('__anon_star_14', ['__anon_star_14', '__COMMA', u'expr_parens'], None, None),
  377: Rule('__anon_star_14', ['__COMMA', u'expr_parens'], None, None),
  378: Rule('__anon_star_15', ['__COMMA', u'column'], None, None),
  379: Rule('__anon_star_15', ['__anon_star_15', '__COMMA', u'column'], None, None),
  380: Rule('__anon_star_16', [u'op_compound', u'select_core'], None, None),
  381: Rule('__anon_star_16', ['__anon_star_16', u'op_compound', u'select_core'], None, None),
  382: Rule('__anon_star_17', ['__COMMA', u'cte'], None, None),
  383: Rule('__anon_star_17', ['__anon_star_17', '__COMMA', u'cte'], None, None),
  384: Rule('__anon_star_18', ['__COMMA', u'ordering_term'], None, None),
  385: Rule('__anon_star_18', ['__anon_star_18', '__COMMA', u'ordering_term'], None, None),
  386: Rule('__anon_star_19', [u'reql_mapper'], None, None),
  387: Rule('__anon_star_19', ['__anon_star_19', u'reql_mapper'], None, None),
  388: Rule('__anon_star_20', ['__COMMA', u'reql_param'], None, None),
  389: Rule('__anon_star_20', [u'reql_param'], None, None),
  390: Rule('__anon_star_20', ['__anon_star_20', u'reql_param'], None, None),
  391: Rule('__anon_star_20', ['__anon_star_20', '__COMMA', u'reql_param'], None, None),
}
parse_tree_builder = ParseTreeBuilder(RULES.values(), Tree)
class ParseTable: pass
parse_table = ParseTable()
STATES = {
  0: {0: (1, 68), 1: (1, 68), 2: (1, 68), 3: (1, 68), 4: (1, 68), 5: (1, 68), 6: (1, 68), 7: (1, 68), 8: (1, 68), 9: (1, 68), 10: (1, 68), 11: (1, 68), 12: (1, 68), 13: (1, 68), 14: (1, 68), 15: (1, 68), 16: (1, 68)},
  1: {2: (1, 139), 14: (1, 139), 13: (1, 139), 6: (1, 139)},
  2: {17: (1, 219), 18: (1, 219), 19: (1, 219), 20: (1, 219), 21: (1, 219), 22: (1, 219), 23: (1, 219), 24: (1, 219)},
  3: {32: (0, 290), 1: (0, 28), 2: (0, 513), 3: (0, 39), 6: (0, 107), 33: (0, 135), 8: (0, 82), 9: (0, 298), 11: (0, 168), 12: (0, 400), 13: (0, 423), 15: (0, 89), 16: (0, 279), 25: (0, 153), 26: (0, 488), 27: (0, 452), 28: (0, 276), 29: (0, 396), 30: (0, 459), 31: (0, 101)},
  4: {2: (1, 63), 3: (1, 63), 5: (1, 63), 6: (1, 63), 10: (1, 63), 13: (1, 63), 14: (1, 63), 17: (1, 63), 18: (1, 63), 19: (1, 63), 20: (1, 63), 21: (1, 63), 22: (1, 63), 23: (1, 63), 24: (1, 63), 34: (1, 63), 35: (1, 63), 36: (1, 63), 37: (1, 63), 38: (1, 63), 39: (1, 63), 40: (1, 63), 41: (1, 63), 42: (1, 63), 43: (1, 63), 44: (1, 63), 45: (1, 63), 46: (1, 63), 47: (1, 63), 48: (1, 63), 49: (1, 63), 50: (1, 63), 51: (1, 63), 52: (1, 63), 53: (1, 63), 54: (1, 63), 55: (1, 63), 56: (1, 63), 57: (1, 63), 58: (1, 63), 59: (1, 63), 60: (1, 63), 61: (1, 63), 62: (1, 63), 63: (1, 63), 64: (1, 63), 65: (1, 63), 66: (1, 63), 67: (1, 63), 68: (1, 63), 69: (1, 63), 70: (1, 63), 71: (1, 63), 72: (1, 63), 73: (1, 63), 74: (1, 63), 75: (1, 63), 76: (1, 63), 77: (1, 63), 78: (1, 63), 79: (1, 63), 80: (1, 63), 81: (1, 63), 82: (1, 63), 83: (1, 63)},
  5: {24: (1, 347), 21: (1, 347)},
  6: {50: (1, 130), 84: (1, 130), 85: (1, 130)},
  7: {17: (1, 218), 18: (1, 218), 19: (1, 218), 20: (1, 218), 21: (1, 218), 22: (1, 218), 23: (1, 218), 24: (1, 218)},
  8: {22: (0, 463)},
  9: {22: (1, 246), 87: (0, 245), 78: (0, 121), 17: (1, 246), 18: (1, 246), 19: (1, 246), 20: (1, 246), 21: (1, 246), 86: (0, 280), 23: (0, 64), 24: (1, 246)},
  10: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 44), 93: (0, 109), 94: (0, 237), 95: (0, 504)},
  11: {2: (1, 146), 14: (1, 146), 13: (1, 146), 6: (1, 146)},
  12: {17: (1, 280), 18: (1, 280), 19: (1, 280), 20: (1, 280), 21: (1, 280), 22: (1, 280), 23: (1, 280), 24: (1, 280)},
  13: {96: (0, 14), 97: (0, 74), 98: (0, 130), 84: (0, 507), 85: (0, 408)},
  14: {17: (1, 156), 18: (1, 156), 19: (1, 156), 20: (1, 156), 21: (1, 156), 22: (1, 156), 23: (1, 156), 24: (1, 156)},
  15: {83: (1, 373), 35: (1, 373), 68: (1, 373), 41: (1, 373), 74: (1, 373), 44: (1, 373), 50: (1, 373), 78: (1, 373), 17: (1, 373), 18: (1, 373), 19: (1, 373), 52: (1, 373), 21: (1, 373), 22: (1, 373), 23: (1, 373), 24: (1, 373), 20: (1, 373)},
  16: {22: (1, 234), 87: (0, 546), 78: (0, 121), 17: (1, 234), 18: (1, 234), 19: (1, 234), 20: (1, 234), 21: (1, 234), 86: (0, 334), 23: (0, 64), 24: (1, 234)},
  17: {50: (1, 59), 22: (1, 59)},
  18: {17: (1, 327), 18: (1, 327), 19: (1, 327), 20: (1, 327), 21: (1, 327), 22: (1, 327), 23: (1, 327), 24: (1, 327), 35: (1, 327), 41: (1, 327), 44: (1, 327), 50: (1, 327), 52: (1, 327), 66: (1, 327), 68: (1, 327), 73: (1, 327), 74: (1, 327), 78: (1, 327), 80: (1, 327), 81: (1, 327), 83: (1, 327), 84: (1, 327), 85: (1, 327), 99: (1, 327)},
  19: {25: (0, 90), 2: (0, 513), 13: (0, 423), 6: (0, 107)},
  20: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 93: (0, 22), 94: (0, 237), 95: (0, 504)},
  21: {66: (1, 120), 35: (1, 120), 68: (1, 120), 81: (1, 120), 73: (1, 120), 74: (1, 120), 83: (1, 120), 44: (1, 120), 18: (1, 120), 78: (1, 120), 24: (1, 120), 80: (1, 120), 17: (1, 120), 50: (1, 120), 19: (1, 120), 52: (1, 120), 21: (1, 120), 22: (1, 120), 41: (1, 120), 23: (1, 120), 20: (1, 120)},
  22: {2: (1, 359), 3: (1, 359), 5: (1, 359), 6: (1, 359), 10: (1, 359), 13: (1, 359), 17: (1, 359), 18: (1, 359), 19: (1, 359), 20: (1, 359), 21: (1, 359), 22: (1, 359), 23: (1, 359), 24: (1, 359), 34: (1, 359), 35: (1, 359), 36: (1, 359), 37: (1, 359), 38: (1, 359), 39: (1, 359), 40: (1, 359), 41: (1, 359), 42: (1, 359), 43: (1, 359), 44: (1, 359), 45: (1, 359), 46: (1, 359), 47: (1, 359), 48: (1, 359), 49: (1, 359), 50: (1, 359), 51: (1, 359), 52: (1, 359), 53: (1, 359), 54: (1, 359), 55: (1, 359), 56: (1, 359), 57: (1, 359), 58: (1, 359), 59: (1, 359), 60: (1, 359), 61: (1, 359), 62: (1, 359), 63: (1, 359), 64: (1, 359), 65: (1, 359), 67: (1, 359), 68: (1, 359), 69: (1, 359), 70: (1, 359), 71: (1, 359), 72: (1, 359), 74: (1, 359), 75: (1, 359), 76: (1, 359), 77: (0, 169), 78: (1, 359), 79: (1, 359), 80: (1, 359), 82: (1, 359), 83: (1, 359)},
  23: {2: (1, 140), 14: (1, 140), 13: (1, 140), 6: (1, 140)},
  24: {22: (0, 340)},
  25: {2: (1, 33), 3: (1, 33), 6: (1, 33), 13: (1, 33), 17: (1, 33), 18: (1, 33), 19: (1, 33), 20: (1, 33), 21: (1, 33), 22: (1, 33), 23: (1, 33), 24: (1, 33), 34: (1, 33), 35: (1, 33), 36: (1, 33), 39: (0, 432), 41: (1, 33), 44: (1, 33), 47: (1, 33), 49: (1, 33), 50: (1, 33), 52: (1, 33), 62: (1, 33), 68: (1, 33), 69: (1, 33), 71: (1, 33), 72: (1, 33), 74: (1, 33), 76: (1, 33), 78: (1, 33), 79: (1, 33), 82: (1, 33), 83: (1, 33)},
  26: {15: (0, 371)},
  27: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 123), 93: (0, 109), 94: (0, 237), 95: (0, 504)},
  28: {1: (1, 108), 2: (1, 108), 3: (1, 108), 5: (1, 108), 6: (1, 108), 8: (1, 108), 9: (1, 108), 10: (1, 108), 11: (1, 108), 12: (1, 108), 13: (1, 108), 14: (1, 108), 15: (1, 108), 16: (1, 108), 17: (1, 108), 18: (1, 108), 19: (1, 108), 20: (1, 108), 21: (1, 108), 22: (1, 108), 23: (1, 108), 24: (1, 108), 34: (1, 108), 35: (1, 108), 36: (1, 108), 37: (1, 108), 38: (1, 108), 39: (1, 108), 40: (1, 108), 41: (1, 108), 42: (1, 108), 43: (1, 108), 44: (1, 108), 45: (1, 108), 46: (1, 108), 47: (1, 108), 48: (1, 108), 49: (1, 108), 50: (1, 108), 51: (1, 108), 52: (1, 108), 53: (1, 108), 54: (1, 108), 55: (1, 108), 56: (1, 108), 57: (1, 108), 58: (1, 108), 59: (1, 108), 60: (1, 108), 61: (1, 108), 62: (1, 108), 63: (1, 108), 64: (1, 108), 65: (1, 108), 66: (1, 108), 67: (1, 108), 68: (1, 108), 69: (1, 108), 70: (1, 108), 71: (1, 108), 72: (1, 108), 73: (1, 108), 74: (1, 108), 75: (1, 108), 76: (1, 108), 77: (1, 108), 78: (1, 108), 79: (1, 108), 80: (1, 108), 81: (1, 108), 82: (1, 108), 83: (1, 108), 100: (1, 108)},
  29: {17: (1, 160), 18: (1, 160), 19: (1, 160), 20: (1, 160), 21: (1, 160), 22: (1, 160), 23: (1, 160), 24: (1, 160)},
  30: {0: (1, 85), 1: (1, 85), 2: (1, 85), 3: (1, 85), 4: (1, 85), 5: (1, 85), 6: (1, 85), 7: (1, 85), 8: (1, 85), 9: (1, 85), 10: (1, 85), 11: (1, 85), 12: (1, 85), 13: (1, 85), 14: (1, 85), 15: (1, 85), 16: (1, 85)},
  31: {17: (1, 215), 18: (1, 215), 19: (1, 215), 20: (1, 215), 21: (1, 215), 22: (1, 215), 23: (1, 215), 24: (1, 215)},
  32: {83: (1, 112), 35: (1, 112), 68: (1, 112), 81: (1, 112), 73: (1, 112), 74: (1, 112), 23: (1, 112), 44: (1, 112), 50: (1, 112), 78: (1, 112), 17: (1, 112), 18: (1, 112), 19: (1, 112), 52: (1, 112), 21: (1, 112), 22: (1, 112), 41: (1, 112), 24: (1, 112), 20: (1, 112)},
  33: {0: (1, 288), 1: (1, 288), 2: (1, 288), 3: (1, 288), 4: (1, 288), 101: (1, 288), 6: (1, 288), 7: (1, 288), 8: (1, 288), 9: (1, 288), 10: (1, 288), 11: (1, 288), 12: (1, 288), 13: (1, 288), 14: (1, 288), 15: (1, 288), 16: (1, 288), 80: (1, 288), 61: (1, 288), 5: (1, 288)},
  34: {35: (0, 438), 22: (1, 202), 102: (0, 366), 23: (0, 64), 78: (0, 121), 17: (1, 202), 18: (1, 202), 19: (1, 202), 20: (1, 202), 21: (1, 202), 86: (0, 374), 87: (0, 328), 24: (1, 202)},
  35: {50: (0, 191), 84: (1, 300), 85: (1, 300), 103: (0, 319)},
  36: {1: (1, 98), 2: (1, 98), 3: (1, 98), 5: (1, 98), 6: (1, 98), 8: (1, 98), 9: (1, 98), 10: (1, 98), 11: (1, 98), 12: (1, 98), 13: (1, 98), 14: (1, 98), 15: (1, 98), 16: (1, 98), 17: (1, 98), 18: (1, 98), 19: (1, 98), 20: (1, 98), 21: (1, 98), 22: (1, 98), 23: (1, 98), 24: (1, 98), 34: (1, 98), 35: (1, 98), 36: (1, 98), 37: (1, 98), 38: (1, 98), 39: (1, 98), 40: (1, 98), 41: (1, 98), 42: (1, 98), 43: (1, 98), 44: (1, 98), 45: (1, 98), 46: (1, 98), 47: (1, 98), 48: (1, 98), 49: (1, 98), 50: (1, 98), 51: (1, 98), 52: (1, 98), 53: (1, 98), 54: (1, 98), 55: (1, 98), 56: (1, 98), 57: (1, 98), 58: (1, 98), 59: (1, 98), 60: (1, 98), 61: (1, 98), 62: (1, 98), 63: (1, 98), 64: (1, 98), 65: (1, 98), 66: (1, 98), 67: (1, 98), 68: (1, 98), 69: (1, 98), 70: (1, 98), 71: (1, 98), 72: (1, 98), 73: (1, 98), 74: (1, 98), 75: (1, 98), 76: (1, 98), 77: (1, 98), 78: (1, 98), 79: (1, 98), 80: (1, 98), 81: (1, 98), 82: (1, 98), 83: (1, 98)},
  37: {2: (1, 24), 3: (1, 24), 6: (1, 24), 13: (1, 24), 17: (1, 24), 18: (1, 24), 19: (1, 24), 20: (1, 24), 21: (1, 24), 22: (1, 24), 23: (1, 24), 24: (1, 24), 34: (1, 24), 35: (1, 24), 36: (1, 24), 41: (1, 24), 44: (1, 24), 47: (1, 24), 49: (1, 24), 50: (1, 24), 52: (1, 24), 62: (1, 24), 68: (1, 24), 69: (1, 24), 71: (1, 24), 72: (1, 24), 74: (1, 24), 76: (1, 24), 78: (1, 24), 79: (1, 24), 82: (1, 24), 83: (1, 24)},
  38: {2: (1, 55), 3: (1, 55), 5: (1, 55), 6: (1, 55), 10: (1, 55), 13: (1, 55), 14: (1, 55), 17: (1, 55), 18: (1, 55), 19: (1, 55), 20: (1, 55), 21: (1, 55), 22: (1, 55), 23: (1, 55), 24: (1, 55), 34: (1, 55), 35: (1, 55), 36: (1, 55), 37: (1, 55), 38: (1, 55), 39: (1, 55), 40: (1, 55), 41: (1, 55), 42: (1, 55), 43: (1, 55), 44: (1, 55), 45: (1, 55), 46: (1, 55), 47: (1, 55), 48: (1, 55), 49: (1, 55), 50: (1, 55), 51: (1, 55), 52: (1, 55), 53: (1, 55), 54: (1, 55), 55: (1, 55), 56: (1, 55), 57: (1, 55), 58: (1, 55), 59: (1, 55), 60: (1, 55), 61: (1, 55), 62: (1, 55), 63: (1, 55), 64: (1, 55), 65: (1, 55), 66: (1, 55), 67: (1, 55), 68: (1, 55), 69: (1, 55), 70: (1, 55), 71: (1, 55), 72: (1, 55), 73: (1, 55), 74: (1, 55), 75: (1, 55), 76: (1, 55), 77: (1, 55), 78: (1, 55), 79: (1, 55), 80: (1, 55), 81: (1, 55), 82: (1, 55), 83: (1, 55)},
  39: {1: (1, 110), 2: (1, 110), 3: (1, 110), 5: (1, 110), 6: (1, 110), 8: (1, 110), 9: (1, 110), 10: (1, 110), 11: (1, 110), 12: (1, 110), 13: (1, 110), 14: (1, 110), 15: (1, 110), 16: (1, 110), 17: (1, 110), 18: (1, 110), 19: (1, 110), 20: (1, 110), 21: (1, 110), 22: (1, 110), 23: (1, 110), 24: (1, 110), 34: (1, 110), 35: (1, 110), 36: (1, 110), 37: (1, 110), 38: (1, 110), 39: (1, 110), 40: (1, 110), 41: (1, 110), 42: (1, 110), 43: (1, 110), 44: (1, 110), 45: (1, 110), 46: (1, 110), 47: (1, 110), 48: (1, 110), 49: (1, 110), 50: (1, 110), 51: (1, 110), 52: (1, 110), 53: (1, 110), 54: (1, 110), 55: (1, 110), 56: (1, 110), 57: (1, 110), 58: (1, 110), 59: (1, 110), 60: (1, 110), 61: (1, 110), 62: (1, 110), 63: (1, 110), 64: (1, 110), 65: (1, 110), 66: (1, 110), 67: (1, 110), 68: (1, 110), 69: (1, 110), 70: (1, 110), 71: (1, 110), 72: (1, 110), 73: (1, 110), 74: (1, 110), 75: (1, 110), 76: (1, 110), 77: (1, 110), 78: (1, 110), 79: (1, 110), 80: (1, 110), 81: (1, 110), 82: (1, 110), 83: (1, 110), 100: (1, 110)},
  40: {23: (0, 64), 17: (1, 209), 18: (1, 209), 19: (1, 209), 20: (1, 209), 21: (1, 209), 22: (1, 209), 87: (0, 217), 24: (1, 209)},
  41: {50: (1, 59), 22: (0, 57)},
  42: {2: (0, 513), 6: (0, 107), 104: (0, 467), 105: (0, 474), 106: (0, 165), 13: (0, 495), 14: (0, 221), 89: (0, 151), 25: (0, 461)},
  43: {72: (0, 526)},
  44: {2: (1, 34), 3: (1, 34), 6: (1, 34), 13: (1, 34), 17: (1, 34), 18: (1, 34), 19: (1, 34), 20: (1, 34), 21: (1, 34), 22: (1, 34), 23: (1, 34), 24: (1, 34), 34: (1, 34), 35: (1, 34), 36: (1, 34), 41: (1, 34), 44: (1, 34), 47: (1, 34), 49: (1, 34), 50: (1, 34), 52: (1, 34), 62: (1, 34), 68: (1, 34), 69: (1, 34), 71: (1, 34), 72: (1, 34), 74: (1, 34), 76: (1, 34), 78: (1, 34), 79: (1, 34), 82: (1, 34), 83: (1, 34)},
  45: {23: (0, 64), 17: (1, 249), 18: (1, 249), 19: (1, 249), 20: (1, 249), 21: (1, 249), 22: (1, 249), 87: (0, 164), 24: (1, 249)},
  46: {22: (1, 66)},
  47: {1: (1, 331), 2: (1, 331), 3: (1, 331), 100: (1, 331), 6: (1, 331), 8: (1, 331), 9: (1, 331), 11: (1, 331), 12: (1, 331), 13: (1, 331), 15: (1, 331), 16: (1, 331), 50: (1, 331)},
  48: {66: (1, 121), 35: (1, 121), 68: (1, 121), 81: (1, 121), 73: (1, 121), 74: (1, 121), 83: (1, 121), 44: (1, 121), 18: (1, 121), 78: (1, 121), 24: (1, 121), 80: (1, 121), 17: (1, 121), 50: (1, 121), 19: (1, 121), 52: (1, 121), 21: (1, 121), 22: (1, 121), 41: (1, 121), 23: (1, 121), 20: (1, 121)},
  49: {50: (0, 445), 17: (1, 305), 18: (1, 305), 19: (1, 305), 20: (1, 305), 21: (1, 305), 22: (1, 305), 23: (1, 305), 24: (1, 305)},
  50: {0: (1, 70), 1: (1, 70), 2: (1, 70), 3: (1, 70), 4: (1, 70), 5: (1, 70), 6: (1, 70), 7: (1, 70), 8: (1, 70), 9: (1, 70), 10: (1, 70), 11: (1, 70), 12: (1, 70), 13: (1, 70), 14: (1, 70), 15: (1, 70), 16: (1, 70)},
  51: {17: (1, 164), 18: (1, 164), 19: (1, 164), 20: (1, 164), 21: (1, 164), 22: (1, 164), 23: (1, 164), 24: (1, 164)},
  52: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 317), 93: (0, 109), 94: (0, 237), 95: (0, 504)},
  53: {2: (1, 44), 3: (1, 44), 5: (1, 44), 6: (1, 44), 10: (1, 44), 13: (1, 44), 17: (1, 44), 18: (1, 44), 19: (1, 44), 20: (1, 44), 21: (1, 44), 22: (1, 44), 23: (1, 44), 24: (1, 44), 34: (1, 44), 35: (1, 44), 36: (1, 44), 37: (1, 44), 38: (1, 44), 39: (1, 44), 40: (1, 44), 41: (1, 44), 42: (1, 44), 43: (1, 44), 44: (1, 44), 45: (1, 44), 46: (1, 44), 47: (1, 44), 48: (1, 44), 49: (1, 44), 50: (1, 44), 51: (1, 44), 52: (1, 44), 53: (1, 44), 54: (1, 44), 55: (1, 44), 56: (1, 44), 57: (1, 44), 58: (1, 44), 59: (1, 44), 60: (1, 44), 61: (1, 44), 62: (1, 44), 63: (1, 44), 64: (1, 44), 65: (1, 44), 67: (1, 44), 68: (1, 44), 69: (1, 44), 70: (1, 44), 71: (1, 44), 72: (1, 44), 74: (1, 44), 75: (1, 44), 76: (1, 44), 77: (1, 44), 78: (1, 44), 79: (1, 44), 80: (1, 44), 82: (1, 44), 83: (1, 44)},
  54: {8: (0, 82), 26: (0, 405)},
  55: {17: (1, 268), 18: (1, 268), 19: (1, 268), 20: (1, 268), 21: (1, 268), 22: (1, 268), 23: (1, 268), 24: (1, 268)},
  56: {2: (0, 513), 3: (0, 39), 6: (0, 107), 107: (0, 200), 108: (0, 218), 13: (0, 423), 25: (0, 447), 30: (0, 281)},
  57: {2: (1, 64), 3: (1, 64), 5: (1, 64), 6: (1, 64), 10: (1, 64), 13: (1, 64), 14: (1, 64), 17: (1, 64), 18: (1, 64), 19: (1, 64), 20: (1, 64), 21: (1, 64), 22: (1, 64), 23: (1, 64), 24: (1, 64), 34: (1, 64), 35: (1, 64), 36: (1, 64), 37: (1, 64), 38: (1, 64), 39: (1, 64), 40: (1, 64), 41: (1, 64), 42: (1, 64), 43: (1, 64), 44: (1, 64), 45: (1, 64), 46: (1, 64), 47: (1, 64), 48: (1, 64), 49: (1, 64), 50: (1, 64), 51: (1, 64), 52: (1, 64), 53: (1, 64), 54: (1, 64), 55: (1, 64), 56: (1, 64), 57: (1, 64), 58: (1, 64), 59: (1, 64), 60: (1, 64), 61: (1, 64), 62: (1, 64), 63: (1, 64), 64: (1, 64), 65: (1, 64), 66: (1, 64), 67: (1, 64), 68: (1, 64), 69: (1, 64), 70: (1, 64), 71: (1, 64), 72: (1, 64), 73: (1, 64), 74: (1, 64), 75: (1, 64), 76: (1, 64), 77: (1, 64), 78: (1, 64), 79: (1, 64), 80: (1, 64), 81: (1, 64), 82: (1, 64), 83: (1, 64)},
  58: {74: (0, 167), 109: (0, 539)},
  59: {50: (1, 131), 84: (1, 131), 85: (1, 131)},
  60: {2: (1, 21), 3: (1, 21), 6: (1, 21), 13: (1, 21), 17: (1, 21), 18: (1, 21), 19: (1, 21), 20: (1, 21), 21: (1, 21), 22: (1, 21), 23: (1, 21), 24: (1, 21), 34: (1, 21), 35: (1, 21), 36: (1, 21), 41: (1, 21), 44: (1, 21), 47: (1, 21), 49: (1, 21), 50: (1, 21), 52: (1, 21), 62: (1, 21), 68: (1, 21), 69: (1, 21), 71: (1, 21), 72: (1, 21), 74: (1, 21), 76: (1, 21), 78: (1, 21), 79: (1, 21), 82: (1, 21), 83: (1, 21)},
  61: {17: (1, 340), 18: (1, 340), 19: (1, 340), 20: (1, 340), 21: (1, 340), 22: (1, 340), 23: (1, 340), 24: (1, 340), 27: (0, 452), 28: (0, 276), 29: (0, 396), 33: (0, 331), 35: (1, 340), 41: (1, 340), 44: (1, 340), 50: (1, 340), 52: (1, 340), 66: (1, 340), 68: (1, 340), 73: (1, 340), 74: (1, 340), 78: (1, 340), 80: (1, 340), 81: (1, 340), 83: (1, 340), 84: (1, 340), 85: (1, 340), 99: (1, 340), 110: (0, 88), 111: (0, 134)},
  62: {35: (1, 290), 68: (1, 290), 78: (1, 290), 17: (1, 290), 18: (1, 290), 19: (1, 290), 20: (1, 290), 21: (1, 290), 22: (1, 290), 23: (1, 290), 24: (1, 290)},
  63: {22: (1, 267), 87: (0, 185), 78: (0, 121), 17: (1, 267), 18: (1, 267), 19: (1, 267), 20: (1, 267), 21: (1, 267), 86: (0, 79), 23: (0, 64), 24: (1, 267)},
  64: {112: (0, 97)},
  65: {17: (1, 222), 18: (1, 222), 19: (1, 222), 20: (1, 222), 21: (1, 222), 22: (1, 222), 23: (1, 222), 24: (1, 222)},
  66: {14: (0, 406)},
  67: {17: (1, 324), 18: (1, 324), 19: (1, 324), 20: (1, 324), 21: (1, 324), 22: (1, 324), 23: (1, 324), 24: (1, 324), 35: (1, 324), 41: (1, 324), 44: (1, 324), 50: (1, 324), 52: (1, 324), 66: (1, 324), 68: (1, 324), 73: (1, 324), 74: (1, 324), 78: (1, 324), 80: (1, 324), 81: (1, 324), 83: (1, 324), 84: (1, 324), 85: (1, 324), 99: (0, 458), 113: (0, 178), 114: (0, 176)},
  68: {24: (1, 309), 21: (1, 309), 22: (1, 309)},
  69: {32: (0, 47), 1: (0, 28), 2: (0, 513), 3: (0, 39), 6: (0, 107), 8: (0, 82), 9: (0, 298), 11: (0, 168), 12: (0, 400), 13: (0, 530), 15: (0, 89), 16: (0, 279), 115: (0, 380), 116: (0, 231), 25: (0, 285), 26: (0, 488), 30: (0, 459), 31: (0, 493)},
  70: {22: (1, 277), 87: (0, 389), 78: (0, 121), 17: (1, 277), 18: (1, 277), 19: (1, 277), 20: (1, 277), 21: (1, 277), 86: (0, 506), 23: (0, 64), 24: (1, 277)},
  71: {2: (0, 513), 3: (0, 39), 6: (0, 107), 107: (0, 200), 108: (0, 35), 13: (0, 423), 117: (0, 514), 25: (0, 447), 30: (0, 281)},
  72: {23: (0, 64), 17: (1, 167), 18: (1, 167), 19: (1, 167), 20: (1, 167), 21: (1, 167), 22: (1, 167), 87: (0, 139), 24: (1, 167)},
  73: {17: (1, 181), 18: (1, 181), 19: (1, 181), 20: (1, 181), 21: (1, 181), 22: (1, 181), 23: (1, 181), 24: (1, 181)},
  74: {17: (1, 157), 18: (1, 157), 19: (1, 157), 20: (1, 157), 21: (1, 157), 22: (1, 157), 23: (1, 157), 24: (1, 157)},
  75: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 80: (0, 295), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 302), 93: (0, 109), 94: (0, 237), 95: (0, 504), 101: (0, 537), 118: (0, 257), 119: (0, 115), 120: (0, 377), 121: (0, 112), 122: (0, 443), 123: (0, 274), 124: (0, 232)},
  76: {22: (1, 248), 23: (0, 64), 78: (0, 121), 17: (1, 248), 18: (1, 248), 19: (1, 248), 20: (1, 248), 21: (1, 248), 86: (0, 45), 87: (0, 259), 24: (1, 248)},
  77: {23: (0, 64), 17: (1, 266), 18: (1, 266), 19: (1, 266), 20: (1, 266), 21: (1, 266), 22: (1, 266), 87: (0, 490), 24: (1, 266)},
  78: {17: (1, 226), 18: (1, 226), 19: (1, 226), 20: (1, 226), 21: (1, 226), 22: (1, 226), 23: (1, 226), 24: (1, 226)},
  79: {23: (0, 64), 17: (1, 278), 18: (1, 278), 19: (1, 278), 20: (1, 278), 21: (1, 278), 22: (1, 278), 87: (0, 78), 24: (1, 278)},
  80: {19: (1, 153), 2: (0, 513), 3: (0, 39), 68: (1, 153), 69: (1, 153), 6: (0, 107), 76: (0, 413), 13: (0, 423), 78: (1, 153), 50: (1, 153), 17: (1, 153), 18: (1, 153), 35: (1, 153), 20: (1, 153), 21: (1, 153), 22: (1, 153), 23: (1, 153), 24: (1, 153), 25: (0, 420), 30: (0, 498)},
  81: {25: (0, 275), 2: (0, 513), 13: (0, 423), 6: (0, 107)},
  82: {1: (1, 111), 2: (1, 111), 3: (1, 111), 5: (1, 111), 6: (1, 111), 8: (1, 111), 9: (1, 111), 10: (1, 111), 11: (1, 111), 12: (1, 111), 13: (1, 111), 14: (1, 111), 15: (1, 111), 16: (1, 111), 17: (1, 111), 18: (1, 111), 19: (1, 111), 20: (1, 111), 21: (1, 111), 22: (1, 111), 23: (1, 111), 24: (1, 111), 34: (1, 111), 35: (1, 111), 36: (1, 111), 37: (1, 111), 38: (1, 111), 39: (1, 111), 40: (1, 111), 41: (1, 111), 42: (1, 111), 43: (1, 111), 44: (1, 111), 45: (1, 111), 46: (1, 111), 47: (1, 111), 48: (1, 111), 49: (1, 111), 50: (1, 111), 51: (1, 111), 52: (1, 111), 53: (1, 111), 54: (1, 111), 55: (1, 111), 56: (1, 111), 57: (1, 111), 58: (1, 111), 59: (1, 111), 60: (1, 111), 61: (1, 111), 62: (1, 111), 63: (1, 111), 64: (1, 111), 65: (1, 111), 66: (1, 111), 67: (1, 111), 68: (1, 111), 69: (1, 111), 70: (1, 111), 71: (1, 111), 72: (1, 111), 73: (1, 111), 74: (1, 111), 75: (1, 111), 76: (1, 111), 77: (1, 111), 78: (1, 111), 79: (1, 111), 80: (1, 111), 81: (1, 111), 82: (1, 111), 83: (1, 111), 100: (1, 111)},
  83: {23: (0, 64), 17: (1, 207), 18: (1, 207), 19: (1, 207), 20: (1, 207), 21: (1, 207), 22: (1, 207), 87: (0, 152), 24: (1, 207)},
  84: {17: (1, 223), 18: (1, 223), 19: (1, 223), 20: (1, 223), 21: (1, 223), 22: (1, 223), 23: (1, 223), 24: (1, 223)},
  85: {23: (0, 64), 17: (1, 244), 18: (1, 244), 19: (1, 244), 20: (1, 244), 21: (1, 244), 22: (1, 244), 87: (0, 247), 24: (1, 244)},
  86: {35: (0, 438), 22: (1, 247), 102: (0, 16), 23: (0, 64), 78: (0, 121), 17: (1, 247), 18: (1, 247), 19: (1, 247), 20: (1, 247), 21: (1, 247), 86: (0, 40), 87: (0, 472), 24: (1, 247)},
  87: {125: (0, 127), 47: (0, 382)},
  88: {17: (1, 341), 18: (1, 341), 19: (1, 341), 20: (1, 341), 21: (1, 341), 22: (1, 341), 23: (1, 341), 24: (1, 341), 35: (1, 341), 41: (1, 341), 44: (1, 341), 50: (1, 341), 52: (1, 341), 66: (1, 341), 68: (1, 341), 73: (1, 341), 74: (1, 341), 78: (1, 341), 80: (1, 341), 81: (1, 341), 83: (1, 341), 84: (1, 341), 85: (1, 341), 99: (1, 341)},
  89: {1: (1, 104), 2: (1, 104), 3: (1, 104), 5: (1, 104), 6: (1, 104), 8: (1, 104), 9: (1, 104), 10: (1, 104), 11: (1, 104), 12: (1, 104), 13: (1, 104), 14: (1, 104), 15: (1, 104), 16: (1, 104), 17: (1, 104), 18: (1, 104), 19: (1, 104), 20: (1, 104), 21: (1, 104), 22: (1, 104), 23: (1, 104), 24: (1, 104), 34: (1, 104), 35: (1, 104), 36: (1, 104), 37: (1, 104), 38: (1, 104), 39: (1, 104), 40: (1, 104), 41: (1, 104), 42: (1, 104), 43: (1, 104), 44: (1, 104), 45: (1, 104), 46: (1, 104), 47: (1, 104), 48: (1, 104), 49: (1, 104), 50: (1, 104), 51: (1, 104), 52: (1, 104), 53: (1, 104), 54: (1, 104), 55: (1, 104), 56: (1, 104), 57: (1, 104), 58: (1, 104), 59: (1, 104), 60: (1, 104), 61: (1, 104), 62: (1, 104), 63: (1, 104), 64: (1, 104), 65: (1, 104), 66: (1, 104), 67: (1, 104), 68: (1, 104), 69: (1, 104), 70: (1, 104), 71: (1, 104), 72: (1, 104), 73: (1, 104), 74: (1, 104), 75: (1, 104), 76: (1, 104), 77: (1, 104), 78: (1, 104), 79: (1, 104), 80: (1, 104), 81: (1, 104), 82: (1, 104), 83: (1, 104), 100: (1, 104)},
  90: {50: (1, 368), 22: (1, 368)},
  91: {25: (0, 333), 2: (0, 513), 13: (0, 423), 6: (0, 107), 61: (0, 517)},
  92: {23: (0, 64), 19: (0, 113), 21: (1, 314), 22: (1, 314), 87: (0, 397), 24: (1, 314), 126: (0, 336)},
  93: {24: (1, 346), 21: (1, 346)},
  94: {17: (1, 230), 18: (1, 230), 19: (1, 230), 20: (1, 230), 21: (1, 230), 22: (1, 230), 23: (1, 230), 24: (1, 230)},
  95: {74: (0, 475)},
  96: {2: (1, 145), 14: (1, 145), 13: (1, 145), 6: (1, 145)},
  97: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 80: (0, 295), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 302), 93: (0, 109), 94: (0, 237), 95: (0, 504), 101: (0, 537), 118: (0, 257), 119: (0, 115), 120: (0, 377), 122: (0, 271), 123: (0, 274), 124: (0, 232), 127: (0, 108)},
  98: {2: (1, 352), 3: (1, 352), 6: (1, 352), 13: (1, 352), 17: (1, 352), 18: (1, 352), 19: (1, 352), 20: (1, 352), 21: (1, 352), 22: (1, 352), 23: (1, 352), 24: (1, 352), 34: (1, 352), 35: (1, 352), 36: (1, 352), 41: (1, 352), 44: (1, 352), 47: (1, 352), 49: (1, 352), 50: (1, 352), 52: (1, 352), 62: (1, 352), 68: (1, 352), 69: (1, 352), 71: (1, 352), 74: (1, 352), 76: (1, 352), 78: (1, 352), 79: (1, 352), 82: (1, 352), 83: (1, 352)},
  99: {0: (1, 360), 1: (1, 360), 2: (1, 360), 3: (1, 360), 4: (1, 360), 5: (1, 360), 6: (1, 360), 7: (1, 360), 8: (1, 360), 9: (1, 360), 10: (1, 360), 11: (1, 360), 12: (1, 360), 13: (1, 360), 14: (1, 360), 15: (1, 360), 16: (1, 360)},
  100: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 368), 93: (0, 109), 94: (0, 237), 95: (0, 504)},
  101: {1: (1, 335), 2: (1, 335), 3: (1, 335), 100: (1, 335), 6: (1, 335), 8: (1, 335), 9: (1, 335), 11: (1, 335), 12: (1, 335), 13: (1, 335), 15: (1, 335), 16: (1, 335), 50: (1, 335)},
  102: {17: (1, 250), 18: (1, 250), 19: (1, 250), 20: (1, 250), 21: (1, 250), 22: (1, 250), 23: (1, 250), 24: (1, 250)},
  103: {17: (1, 208), 18: (1, 208), 19: (1, 208), 20: (1, 208), 21: (1, 208), 22: (1, 208), 23: (1, 208), 24: (1, 208)},
  104: {2: (1, 14), 3: (1, 14), 6: (1, 14), 13: (1, 14), 17: (1, 14), 18: (1, 14), 19: (1, 14), 20: (1, 14), 21: (1, 14), 22: (1, 14), 23: (1, 14), 24: (1, 14), 34: (1, 14), 35: (1, 14), 36: (1, 14), 41: (1, 14), 44: (1, 14), 47: (1, 14), 49: (1, 14), 50: (1, 14), 52: (1, 14), 62: (1, 14), 68: (1, 14), 69: (1, 14), 71: (1, 14), 72: (1, 14), 74: (1, 14), 76: (1, 14), 78: (1, 14), 79: (1, 14), 82: (1, 14), 83: (1, 14)},
  105: {47: (1, 362), 62: (1, 362), 71: (1, 362)},
  106: {35: (1, 378), 68: (1, 378), 69: (1, 378), 50: (1, 378), 78: (1, 378), 17: (1, 378), 18: (1, 378), 19: (1, 378), 20: (1, 378), 21: (1, 378), 22: (1, 378), 23: (1, 378), 24: (1, 378)},
  107: {128: (1, 321), 1: (1, 321), 2: (1, 321), 3: (1, 321), 5: (1, 321), 6: (1, 321), 8: (1, 321), 9: (1, 321), 10: (1, 321), 11: (1, 321), 12: (1, 321), 13: (1, 321), 14: (1, 321), 15: (1, 321), 16: (1, 321), 17: (1, 321), 18: (1, 321), 19: (1, 321), 20: (1, 321), 21: (1, 321), 22: (1, 321), 23: (1, 321), 24: (1, 321), 34: (1, 321), 35: (1, 321), 36: (1, 321), 37: (1, 321), 38: (1, 321), 39: (1, 321), 40: (1, 321), 41: (1, 321), 42: (1, 321), 43: (1, 321), 44: (1, 321), 45: (1, 321), 46: (1, 321), 47: (1, 321), 48: (1, 321), 49: (1, 321), 50: (1, 321), 51: (1, 321), 52: (1, 321), 53: (1, 321), 54: (1, 321), 55: (1, 321), 56: (1, 321), 57: (1, 321), 58: (1, 321), 59: (1, 321), 60: (1, 321), 61: (1, 321), 62: (1, 321), 63: (1, 321), 64: (1, 321), 65: (1, 321), 66: (1, 321), 67: (1, 321), 68: (1, 321), 69: (1, 321), 70: (1, 321), 71: (1, 321), 72: (1, 321), 73: (1, 321), 74: (1, 321), 75: (1, 321), 76: (1, 321), 77: (1, 321), 78: (1, 321), 79: (1, 321), 80: (1, 321), 81: (1, 321), 82: (1, 321), 83: (1, 321), 100: (1, 321)},
  108: {129: (0, 49), 50: (0, 337), 17: (1, 304), 18: (1, 304), 19: (1, 304), 20: (1, 304), 21: (1, 304), 22: (1, 304), 23: (1, 304), 24: (1, 304)},
  109: {130: (0, 20), 3: (1, 41), 5: (0, 0), 6: (1, 41), 10: (0, 481), 13: (1, 41), 17: (1, 41), 18: (1, 41), 19: (1, 41), 20: (1, 41), 21: (1, 41), 22: (1, 41), 23: (1, 41), 24: (1, 41), 34: (1, 41), 35: (1, 41), 36: (1, 41), 37: (0, 111), 38: (0, 208), 39: (1, 41), 40: (0, 50), 41: (1, 41), 42: (0, 301), 43: (1, 41), 44: (1, 41), 45: (0, 183), 46: (1, 41), 47: (1, 41), 48: (0, 149), 49: (1, 41), 50: (1, 41), 51: (0, 235), 52: (1, 41), 53: (0, 516), 54: (0, 510), 55: (0, 489), 56: (0, 457), 57: (0, 159), 58: (0, 522), 59: (0, 308), 60: (0, 198), 61: (0, 30), 62: (1, 41), 63: (0, 262), 64: (1, 41), 65: (1, 41), 2: (1, 41), 67: (1, 41), 68: (1, 41), 69: (1, 41), 70: (1, 41), 71: (1, 41), 72: (1, 41), 74: (1, 41), 75: (1, 41), 76: (1, 41), 77: (0, 169), 78: (1, 41), 79: (1, 41), 80: (1, 41), 82: (1, 41), 83: (1, 41), 131: (0, 219)},
  110: {25: (0, 370), 2: (0, 513), 132: (0, 422), 13: (0, 423), 6: (0, 107)},
  111: {0: (1, 81), 1: (1, 81), 2: (1, 81), 3: (1, 81), 4: (1, 81), 5: (1, 81), 6: (1, 81), 7: (1, 81), 8: (1, 81), 9: (1, 81), 10: (1, 81), 11: (1, 81), 12: (1, 81), 13: (1, 81), 14: (1, 81), 15: (1, 81), 16: (1, 81)},
  112: {78: (1, 292), 17: (1, 292), 18: (1, 292), 19: (1, 292), 20: (1, 292), 21: (1, 292), 22: (1, 292), 23: (1, 292), 24: (1, 292)},
  113: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 80: (0, 295), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 302), 93: (0, 109), 94: (0, 237), 95: (0, 504), 101: (0, 537), 118: (0, 257), 119: (0, 115), 120: (0, 377), 122: (0, 497), 123: (0, 274), 124: (0, 232)},
  114: {13: (0, 384)},
  115: {2: (1, 13), 3: (1, 13), 6: (1, 13), 13: (1, 13), 17: (1, 13), 18: (1, 13), 19: (1, 13), 20: (1, 13), 21: (1, 13), 22: (1, 13), 23: (1, 13), 24: (1, 13), 34: (1, 13), 35: (1, 13), 36: (1, 13), 41: (1, 13), 44: (1, 13), 47: (1, 13), 49: (1, 13), 50: (1, 13), 52: (1, 13), 62: (1, 13), 68: (1, 13), 69: (1, 13), 71: (1, 13), 72: (1, 13), 74: (1, 13), 76: (1, 13), 78: (1, 13), 79: (1, 13), 82: (1, 13), 83: (1, 13)},
  116: {22: (1, 197), 87: (0, 330), 78: (0, 121), 17: (1, 197), 18: (1, 197), 19: (1, 197), 20: (1, 197), 21: (1, 197), 86: (0, 376), 23: (0, 64), 24: (1, 197)},
  117: {17: (1, 233), 18: (1, 233), 19: (1, 233), 20: (1, 233), 21: (1, 233), 22: (1, 233), 23: (1, 233), 24: (1, 233)},
  118: {71: (0, 518)},
  119: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 300), 93: (0, 109), 94: (0, 237), 95: (0, 504)},
  120: {50: (1, 350), 78: (1, 350), 17: (1, 350), 18: (1, 350), 19: (1, 350), 20: (1, 350), 21: (1, 350), 22: (1, 350), 23: (1, 350), 24: (1, 350)},
  121: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 80: (0, 295), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 302), 93: (0, 109), 94: (0, 237), 95: (0, 504), 101: (0, 537), 118: (0, 257), 119: (0, 115), 120: (0, 377), 122: (0, 496), 123: (0, 274), 124: (0, 232)},
  122: {17: (1, 245), 18: (1, 245), 19: (1, 245), 20: (1, 245), 21: (1, 245), 22: (1, 245), 23: (1, 245), 24: (1, 245)},
  123: {2: (1, 32), 3: (1, 32), 6: (1, 32), 13: (1, 32), 17: (1, 32), 18: (1, 32), 19: (1, 32), 20: (1, 32), 21: (1, 32), 22: (1, 32), 23: (1, 32), 24: (1, 32), 34: (1, 32), 35: (1, 32), 36: (1, 32), 39: (0, 100), 41: (1, 32), 44: (1, 32), 47: (1, 32), 49: (1, 32), 50: (1, 32), 52: (1, 32), 62: (1, 32), 68: (1, 32), 69: (1, 32), 71: (1, 32), 72: (1, 32), 74: (1, 32), 76: (1, 32), 78: (1, 32), 79: (1, 32), 82: (1, 32), 83: (1, 32)},
  124: {2: (1, 42), 3: (1, 42), 5: (1, 42), 6: (1, 42), 10: (1, 42), 13: (1, 42), 17: (1, 42), 18: (1, 42), 19: (1, 42), 20: (1, 42), 21: (1, 42), 22: (1, 42), 23: (1, 42), 24: (1, 42), 34: (1, 42), 35: (1, 42), 36: (1, 42), 37: (1, 42), 38: (1, 42), 39: (1, 42), 40: (1, 42), 41: (1, 42), 42: (1, 42), 43: (1, 42), 44: (1, 42), 45: (1, 42), 46: (1, 42), 47: (1, 42), 48: (1, 42), 49: (1, 42), 50: (1, 42), 51: (1, 42), 52: (1, 42), 53: (1, 42), 54: (1, 42), 55: (1, 42), 56: (1, 42), 57: (1, 42), 58: (1, 42), 59: (1, 42), 60: (1, 42), 61: (1, 42), 62: (1, 42), 63: (1, 42), 64: (1, 42), 65: (1, 42), 67: (1, 42), 68: (1, 42), 69: (1, 42), 70: (1, 42), 71: (1, 42), 72: (1, 42), 74: (1, 42), 75: (1, 42), 76: (1, 42), 77: (1, 42), 78: (1, 42), 79: (1, 42), 80: (1, 42), 82: (1, 42), 83: (1, 42)},
  125: {2: (1, 353), 3: (1, 353), 6: (1, 353), 13: (1, 353), 17: (1, 353), 18: (1, 353), 19: (1, 353), 20: (1, 353), 21: (1, 353), 22: (1, 353), 23: (1, 353), 24: (1, 353), 34: (1, 353), 35: (1, 353), 36: (1, 353), 41: (1, 353), 44: (1, 353), 47: (1, 353), 49: (1, 353), 50: (1, 353), 52: (1, 353), 62: (1, 353), 68: (1, 353), 69: (1, 353), 71: (1, 353), 74: (1, 353), 76: (1, 353), 78: (1, 353), 79: (1, 353), 82: (1, 353), 83: (1, 353)},
  126: {2: (1, 58), 3: (1, 58), 5: (1, 58), 6: (1, 58), 10: (1, 58), 13: (1, 58), 14: (1, 58), 17: (1, 58), 18: (1, 58), 19: (1, 58), 20: (1, 58), 21: (1, 58), 22: (1, 58), 23: (1, 58), 24: (1, 58), 34: (1, 58), 35: (1, 58), 36: (1, 58), 37: (1, 58), 38: (1, 58), 39: (1, 58), 40: (1, 58), 41: (1, 58), 42: (1, 58), 43: (1, 58), 44: (1, 58), 45: (1, 58), 46: (1, 58), 47: (1, 58), 48: (1, 58), 49: (1, 58), 50: (1, 58), 51: (1, 58), 52: (1, 58), 53: (1, 58), 54: (1, 58), 55: (1, 58), 56: (1, 58), 57: (1, 58), 58: (1, 58), 59: (1, 58), 60: (1, 58), 61: (1, 58), 62: (1, 58), 63: (1, 58), 64: (1, 58), 65: (1, 58), 66: (1, 58), 67: (1, 58), 68: (1, 58), 69: (1, 58), 70: (1, 58), 71: (1, 58), 72: (1, 58), 73: (1, 58), 74: (1, 58), 75: (1, 58), 76: (1, 58), 77: (1, 58), 78: (1, 58), 79: (1, 58), 80: (1, 58), 81: (1, 58), 82: (1, 58), 83: (1, 58)},
  127: {71: (0, 199), 62: (0, 375), 47: (0, 207)},
  128: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 133: (0, 71), 134: (0, 444), 135: (0, 473), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 22: (0, 246), 25: (0, 461), 26: (0, 488), 5: (0, 431), 30: (0, 459), 31: (0, 430), 32: (0, 4), 6: (0, 107), 7: (0, 66), 136: (0, 341), 138: (0, 92), 137: (0, 313), 61: (0, 372), 80: (0, 295), 84: (0, 507), 85: (0, 408), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 302), 93: (0, 109), 94: (0, 237), 95: (0, 504), 96: (0, 14), 97: (0, 74), 98: (0, 536), 101: (0, 537), 118: (0, 257), 119: (0, 115), 120: (0, 377), 122: (0, 41), 123: (0, 274), 124: (0, 232)},
  129: {17: (1, 183), 18: (1, 183), 19: (1, 183), 20: (1, 183), 21: (1, 183), 22: (1, 183), 23: (1, 183), 24: (1, 183)},
  130: {17: (1, 380), 18: (1, 380), 19: (1, 380), 20: (1, 380), 21: (1, 380), 22: (1, 380), 23: (1, 380), 24: (1, 380)},
  131: {50: (1, 382), 84: (1, 382), 85: (1, 382)},
  132: {23: (0, 64), 17: (1, 185), 18: (1, 185), 19: (1, 185), 20: (1, 185), 21: (1, 185), 22: (1, 185), 87: (0, 73), 24: (1, 185)},
  133: {22: (1, 224), 87: (0, 117), 78: (0, 121), 17: (1, 224), 18: (1, 224), 19: (1, 224), 20: (1, 224), 21: (1, 224), 86: (0, 547), 23: (0, 64), 24: (1, 224)},
  134: {32: (0, 47), 1: (0, 28), 2: (0, 513), 3: (0, 39), 100: (0, 477), 6: (0, 107), 8: (0, 82), 9: (0, 298), 11: (0, 168), 12: (0, 400), 13: (0, 530), 15: (0, 89), 16: (0, 279), 115: (0, 155), 116: (0, 231), 25: (0, 285), 26: (0, 488), 30: (0, 459), 31: (0, 493)},
  135: {1: (1, 333), 2: (1, 333), 3: (1, 333), 100: (1, 333), 6: (1, 333), 8: (1, 333), 9: (1, 333), 11: (1, 333), 12: (1, 333), 13: (1, 333), 15: (1, 333), 16: (1, 333), 50: (1, 333)},
  136: {17: (1, 260), 18: (1, 260), 19: (1, 260), 20: (1, 260), 21: (1, 260), 22: (1, 260), 23: (1, 260), 24: (1, 260)},
  137: {22: (1, 235), 23: (0, 64), 78: (0, 121), 17: (1, 235), 18: (1, 235), 19: (1, 235), 20: (1, 235), 21: (1, 235), 86: (0, 278), 87: (0, 448), 24: (1, 235)},
  138: {96: (0, 14), 97: (0, 74), 98: (0, 536), 133: (0, 71), 135: (0, 189), 137: (0, 313), 138: (0, 92), 139: (0, 196), 140: (0, 93), 141: (0, 114), 84: (0, 507), 21: (0, 362), 24: (1, 349), 85: (0, 408)},
  139: {17: (1, 214), 18: (1, 214), 19: (1, 214), 20: (1, 214), 21: (1, 214), 22: (1, 214), 23: (1, 214), 24: (1, 214)},
  140: {17: (1, 194), 18: (1, 194), 19: (1, 194), 20: (1, 194), 21: (1, 194), 22: (1, 194), 23: (1, 194), 24: (1, 194)},
  141: {112: (0, 81)},
  142: {64: (0, 392), 65: (0, 450), 67: (0, 225), 70: (0, 291), 75: (0, 119), 46: (0, 201), 15: (0, 37)},
  143: {17: (1, 174), 18: (1, 174), 19: (1, 174), 20: (1, 174), 21: (1, 174), 22: (1, 174), 23: (1, 174), 24: (1, 174)},
  144: {50: (0, 227), 78: (1, 6), 17: (1, 6), 18: (1, 6), 19: (1, 6), 20: (1, 6), 21: (1, 6), 22: (1, 6), 23: (1, 6), 24: (1, 6)},
  145: {2: (1, 39), 3: (1, 39), 6: (1, 39), 13: (1, 39), 17: (1, 39), 18: (1, 39), 19: (1, 39), 20: (1, 39), 21: (1, 39), 22: (1, 39), 23: (1, 39), 24: (1, 39), 34: (1, 39), 35: (1, 39), 36: (1, 39), 39: (0, 197), 41: (1, 39), 44: (1, 39), 47: (1, 39), 49: (1, 39), 50: (1, 39), 52: (1, 39), 62: (1, 39), 68: (1, 39), 69: (1, 39), 71: (1, 39), 72: (1, 39), 74: (1, 39), 76: (1, 39), 78: (1, 39), 79: (1, 39), 82: (1, 39), 83: (1, 39)},
  146: {23: (0, 64), 17: (1, 279), 18: (1, 279), 19: (1, 279), 20: (1, 279), 21: (1, 279), 22: (1, 279), 87: (0, 520), 24: (1, 279)},
  147: {83: (1, 115), 35: (1, 115), 68: (1, 115), 81: (1, 115), 73: (1, 115), 74: (1, 115), 23: (1, 115), 44: (1, 115), 50: (1, 115), 78: (1, 115), 17: (1, 115), 18: (1, 115), 19: (1, 115), 52: (1, 115), 21: (1, 115), 22: (1, 115), 41: (1, 115), 24: (1, 115), 20: (1, 115)},
  148: {1: (1, 390), 2: (1, 390), 3: (1, 390), 100: (1, 390), 6: (1, 390), 8: (1, 390), 9: (1, 390), 11: (1, 390), 12: (1, 390), 13: (1, 390), 15: (1, 390), 16: (1, 390), 50: (1, 390)},
  149: {0: (1, 77), 1: (1, 77), 2: (1, 77), 3: (1, 77), 4: (1, 77), 5: (1, 77), 6: (1, 77), 7: (1, 77), 8: (1, 77), 9: (1, 77), 10: (1, 77), 11: (1, 77), 12: (1, 77), 13: (1, 77), 14: (1, 77), 15: (1, 77), 16: (1, 77)},
  150: {2: (0, 513), 3: (0, 39), 6: (0, 107), 13: (0, 423), 17: (1, 123), 18: (1, 123), 19: (1, 123), 20: (1, 123), 21: (1, 123), 22: (1, 123), 23: (1, 123), 24: (1, 123), 25: (0, 447), 30: (0, 281), 35: (1, 123), 41: (1, 123), 44: (1, 123), 50: (1, 123), 52: (1, 123), 66: (1, 123), 68: (1, 123), 73: (1, 123), 74: (1, 123), 76: (0, 427), 78: (1, 123), 80: (1, 123), 81: (1, 123), 83: (1, 123), 107: (0, 322)},
  151: {2: (0, 513), 3: (0, 39), 6: (0, 107), 13: (0, 423), 14: (0, 162), 17: (1, 125), 18: (1, 125), 19: (1, 125), 20: (1, 125), 21: (1, 125), 22: (1, 125), 23: (1, 125), 24: (1, 125), 25: (0, 447), 30: (0, 281), 35: (1, 125), 41: (1, 125), 44: (1, 125), 50: (1, 125), 52: (1, 125), 66: (1, 125), 68: (1, 125), 73: (1, 125), 74: (1, 125), 76: (0, 451), 78: (1, 125), 80: (1, 125), 81: (1, 125), 83: (1, 125), 107: (0, 21)},
  152: {17: (1, 184), 18: (1, 184), 19: (1, 184), 20: (1, 184), 21: (1, 184), 22: (1, 184), 23: (1, 184), 24: (1, 184)},
  153: {1: (1, 334), 2: (1, 334), 3: (1, 334), 100: (1, 334), 6: (1, 334), 8: (1, 334), 9: (1, 334), 11: (1, 334), 12: (1, 334), 13: (1, 334), 15: (1, 334), 16: (1, 334), 50: (1, 334)},
  154: {35: (0, 438), 68: (0, 194), 22: (1, 182), 102: (0, 76), 142: (0, 535), 23: (0, 64), 78: (0, 121), 17: (1, 182), 18: (1, 182), 19: (1, 182), 20: (1, 182), 21: (1, 182), 86: (0, 494), 87: (0, 533), 24: (1, 182)},
  155: {32: (0, 47), 1: (0, 28), 2: (0, 513), 3: (0, 39), 100: (0, 18), 6: (0, 107), 8: (0, 82), 9: (0, 298), 11: (0, 168), 12: (0, 400), 13: (0, 530), 143: (0, 411), 16: (0, 279), 50: (0, 69), 115: (0, 233), 116: (0, 231), 25: (0, 285), 26: (0, 488), 15: (0, 89), 30: (0, 459), 31: (0, 493)},
  156: {87: (0, 542), 19: (0, 113), 21: (1, 317), 22: (1, 317), 23: (0, 64), 24: (1, 317), 126: (0, 442)},
  157: {2: (1, 31), 3: (1, 31), 6: (1, 31), 13: (1, 31), 17: (1, 31), 18: (1, 31), 19: (1, 31), 20: (1, 31), 21: (1, 31), 22: (1, 31), 23: (1, 31), 24: (1, 31), 34: (1, 31), 35: (1, 31), 36: (1, 31), 41: (1, 31), 44: (1, 31), 47: (1, 31), 49: (1, 31), 50: (1, 31), 52: (1, 31), 62: (1, 31), 68: (1, 31), 69: (1, 31), 71: (1, 31), 72: (1, 31), 74: (1, 31), 76: (1, 31), 78: (1, 31), 79: (1, 31), 82: (1, 31), 83: (1, 31)},
  158: {50: (1, 132), 84: (1, 132), 85: (1, 132)},
  159: {0: (1, 78), 1: (1, 78), 2: (1, 78), 3: (1, 78), 4: (1, 78), 5: (1, 78), 6: (1, 78), 7: (1, 78), 8: (1, 78), 9: (1, 78), 10: (1, 78), 11: (1, 78), 12: (1, 78), 13: (1, 78), 14: (1, 78), 15: (1, 78), 16: (1, 78)},
  160: {35: (0, 438), 68: (0, 194), 69: (0, 255), 102: (0, 524), 142: (0, 192), 23: (0, 64), 50: (0, 289), 78: (0, 121), 144: (0, 154), 17: (1, 172), 18: (1, 172), 19: (1, 172), 20: (1, 172), 21: (1, 172), 86: (0, 85), 87: (0, 136), 24: (1, 172), 22: (1, 172)},
  161: {2: (1, 12), 3: (1, 12), 6: (1, 12), 13: (1, 12), 17: (1, 12), 18: (1, 12), 19: (1, 12), 20: (1, 12), 21: (1, 12), 22: (1, 12), 23: (1, 12), 24: (1, 12), 34: (1, 12), 35: (1, 12), 36: (1, 12), 41: (1, 12), 44: (1, 12), 47: (1, 12), 49: (1, 12), 50: (1, 12), 52: (1, 12), 62: (1, 12), 68: (1, 12), 69: (1, 12), 71: (1, 12), 72: (0, 395), 74: (1, 12), 76: (1, 12), 78: (1, 12), 79: (1, 12), 82: (1, 12), 83: (1, 12)},
  162: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 22: (0, 355), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 80: (0, 295), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 302), 93: (0, 109), 94: (0, 237), 95: (0, 504), 101: (0, 537), 118: (0, 257), 119: (0, 115), 120: (0, 377), 121: (0, 292), 122: (0, 443), 123: (0, 274), 124: (0, 232)},
  163: {24: (1, 2), 21: (0, 362)},
  164: {17: (1, 252), 18: (1, 252), 19: (1, 252), 20: (1, 252), 21: (1, 252), 22: (1, 252), 23: (1, 252), 24: (1, 252)},
  165: {66: (0, 141), 35: (1, 116), 68: (1, 116), 81: (1, 116), 73: (1, 116), 74: (1, 116), 83: (1, 116), 44: (1, 116), 18: (1, 116), 78: (1, 116), 24: (1, 116), 80: (0, 527), 17: (1, 116), 50: (1, 116), 19: (1, 116), 52: (1, 116), 21: (1, 116), 22: (1, 116), 41: (1, 116), 23: (1, 116), 20: (1, 116)},
  166: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 80: (0, 295), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 302), 93: (0, 109), 94: (0, 237), 95: (0, 504), 101: (0, 537), 118: (0, 257), 119: (0, 115), 120: (0, 377), 122: (0, 105), 123: (0, 274), 124: (0, 232)},
  167: {2: (1, 149), 14: (1, 149), 13: (1, 149), 6: (1, 149)},
  168: {1: (1, 105), 2: (1, 105), 3: (1, 105), 5: (1, 105), 6: (1, 105), 8: (1, 105), 9: (1, 105), 10: (1, 105), 11: (1, 105), 12: (1, 105), 13: (1, 105), 14: (1, 105), 15: (1, 105), 16: (1, 105), 17: (1, 105), 18: (1, 105), 19: (1, 105), 20: (1, 105), 21: (1, 105), 22: (1, 105), 23: (1, 105), 24: (1, 105), 34: (1, 105), 35: (1, 105), 36: (1, 105), 37: (1, 105), 38: (1, 105), 39: (1, 105), 40: (1, 105), 41: (1, 105), 42: (1, 105), 43: (1, 105), 44: (1, 105), 45: (1, 105), 46: (1, 105), 47: (1, 105), 48: (1, 105), 49: (1, 105), 50: (1, 105), 51: (1, 105), 52: (1, 105), 53: (1, 105), 54: (1, 105), 55: (1, 105), 56: (1, 105), 57: (1, 105), 58: (1, 105), 59: (1, 105), 60: (1, 105), 61: (1, 105), 62: (1, 105), 63: (1, 105), 64: (1, 105), 65: (1, 105), 66: (1, 105), 67: (1, 105), 68: (1, 105), 69: (1, 105), 70: (1, 105), 71: (1, 105), 72: (1, 105), 73: (1, 105), 74: (1, 105), 75: (1, 105), 76: (1, 105), 77: (1, 105), 78: (1, 105), 79: (1, 105), 80: (1, 105), 81: (1, 105), 82: (1, 105), 83: (1, 105), 100: (1, 105)},
  169: {25: (0, 124), 2: (0, 513), 13: (0, 423), 6: (0, 107)},
  170: {17: (1, 262), 18: (1, 262), 19: (1, 262), 20: (1, 262), 21: (1, 262), 22: (1, 262), 23: (1, 262), 24: (1, 262)},
  171: {2: (1, 148), 14: (1, 148), 13: (1, 148), 6: (1, 148)},
  172: {50: (0, 307), 22: (0, 344)},
  173: {35: (0, 438), 68: (0, 194), 22: (1, 201), 102: (0, 312), 142: (0, 222), 23: (0, 64), 78: (0, 121), 17: (1, 201), 18: (1, 201), 19: (1, 201), 20: (1, 201), 21: (1, 201), 86: (0, 383), 87: (0, 367), 24: (1, 201)},
  174: {17: (1, 387), 18: (1, 387), 19: (1, 387), 20: (1, 387), 21: (1, 387), 22: (1, 387), 23: (1, 387), 24: (1, 387), 35: (1, 387), 41: (1, 387), 44: (1, 387), 50: (1, 387), 52: (1, 387), 66: (1, 387), 68: (1, 387), 73: (1, 387), 74: (1, 387), 78: (1, 387), 80: (1, 387), 81: (1, 387), 83: (1, 387), 84: (1, 387), 85: (1, 387), 99: (1, 387)},
  175: {1: (1, 391), 2: (1, 391), 3: (1, 391), 100: (1, 391), 6: (1, 391), 8: (1, 391), 9: (1, 391), 11: (1, 391), 12: (1, 391), 13: (1, 391), 15: (1, 391), 16: (1, 391), 50: (1, 391)},
  176: {17: (1, 386), 18: (1, 386), 19: (1, 386), 20: (1, 386), 21: (1, 386), 22: (1, 386), 23: (1, 386), 24: (1, 386), 35: (1, 386), 41: (1, 386), 44: (1, 386), 50: (1, 386), 52: (1, 386), 66: (1, 386), 68: (1, 386), 73: (1, 386), 74: (1, 386), 78: (1, 386), 80: (1, 386), 81: (1, 386), 83: (1, 386), 84: (1, 386), 85: (1, 386), 99: (1, 386)},
  177: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 303), 93: (0, 109), 94: (0, 237), 95: (0, 504)},
  178: {17: (1, 323), 18: (1, 323), 19: (1, 323), 20: (1, 323), 21: (1, 323), 22: (1, 323), 23: (1, 323), 24: (1, 323), 35: (1, 323), 41: (1, 323), 44: (1, 323), 50: (1, 323), 52: (1, 323), 66: (1, 323), 68: (1, 323), 73: (1, 323), 74: (1, 323), 78: (1, 323), 80: (1, 323), 81: (1, 323), 83: (1, 323), 84: (1, 323), 85: (1, 323), 99: (0, 458), 114: (0, 174)},
  179: {2: (1, 54), 3: (1, 54), 5: (1, 54), 6: (1, 54), 10: (1, 54), 13: (1, 54), 14: (1, 54), 17: (1, 54), 18: (1, 54), 19: (1, 54), 20: (1, 54), 21: (1, 54), 22: (1, 54), 23: (1, 54), 24: (1, 54), 34: (1, 54), 35: (1, 54), 36: (1, 54), 37: (1, 54), 38: (1, 54), 39: (1, 54), 40: (1, 54), 41: (1, 54), 42: (1, 54), 43: (1, 54), 44: (1, 54), 45: (1, 54), 46: (1, 54), 47: (1, 54), 48: (1, 54), 49: (1, 54), 50: (1, 54), 51: (1, 54), 52: (1, 54), 53: (1, 54), 54: (1, 54), 55: (1, 54), 56: (1, 54), 57: (1, 54), 58: (1, 54), 59: (1, 54), 60: (1, 54), 61: (1, 54), 62: (1, 54), 63: (1, 54), 64: (1, 54), 65: (1, 54), 66: (1, 54), 67: (1, 54), 68: (1, 54), 69: (1, 54), 70: (1, 54), 71: (1, 54), 72: (1, 54), 73: (1, 54), 74: (1, 54), 75: (1, 54), 76: (1, 54), 77: (1, 54), 78: (1, 54), 79: (1, 54), 80: (1, 54), 81: (1, 54), 82: (1, 54), 83: (1, 54)},
  180: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 145: (0, 106), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 61: (0, 466), 80: (0, 295), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 302), 93: (0, 109), 94: (0, 237), 95: (0, 504), 101: (0, 537), 118: (0, 257), 119: (0, 115), 120: (0, 377), 122: (0, 80), 123: (0, 274), 124: (0, 232)},
  181: {22: (0, 224)},
  182: {24: (1, 311), 21: (1, 311), 22: (1, 311)},
  183: {0: (1, 74), 1: (1, 74), 2: (1, 74), 3: (1, 74), 4: (1, 74), 5: (1, 74), 6: (1, 74), 7: (1, 74), 8: (1, 74), 9: (1, 74), 10: (1, 74), 11: (1, 74), 12: (1, 74), 13: (1, 74), 14: (1, 74), 15: (1, 74), 16: (1, 74)},
  184: {50: (1, 384), 17: (1, 384), 18: (1, 384), 19: (1, 384), 20: (1, 384), 21: (1, 384), 22: (1, 384), 23: (1, 384), 24: (1, 384)},
  185: {17: (1, 225), 18: (1, 225), 19: (1, 225), 20: (1, 225), 21: (1, 225), 22: (1, 225), 23: (1, 225), 24: (1, 225)},
  186: {2: (1, 62), 3: (1, 62), 5: (1, 62), 6: (1, 62), 10: (1, 62), 13: (1, 62), 14: (1, 62), 17: (1, 62), 18: (1, 62), 19: (1, 62), 20: (1, 62), 21: (1, 62), 22: (1, 62), 23: (1, 62), 24: (1, 62), 34: (1, 62), 35: (1, 62), 36: (1, 62), 37: (1, 62), 38: (1, 62), 39: (1, 62), 40: (1, 62), 41: (1, 62), 42: (1, 62), 43: (1, 62), 44: (1, 62), 45: (1, 62), 46: (1, 62), 47: (1, 62), 48: (1, 62), 49: (1, 62), 50: (1, 62), 51: (1, 62), 52: (1, 62), 53: (1, 62), 54: (1, 62), 55: (1, 62), 56: (1, 62), 57: (1, 62), 58: (1, 62), 59: (1, 62), 60: (1, 62), 61: (1, 62), 62: (1, 62), 63: (1, 62), 64: (1, 62), 65: (1, 62), 66: (1, 62), 67: (1, 62), 68: (1, 62), 69: (1, 62), 70: (1, 62), 71: (1, 62), 72: (1, 62), 73: (1, 62), 74: (1, 62), 75: (1, 62), 76: (1, 62), 77: (1, 62), 78: (1, 62), 79: (1, 62), 80: (1, 62), 81: (1, 62), 82: (1, 62), 83: (1, 62)},
  187: {32: (0, 4), 1: (0, 28), 2: (0, 513), 3: (0, 39), 6: (0, 107), 8: (0, 82), 9: (0, 298), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 89: (0, 186), 88: (0, 126), 25: (0, 461), 90: (0, 414), 26: (0, 488), 30: (0, 459), 31: (0, 430)},
  188: {96: (0, 14), 97: (0, 74), 98: (0, 536), 133: (0, 71), 135: (0, 345), 137: (0, 313), 138: (0, 92), 13: (0, 226), 84: (0, 507), 85: (0, 408), 105: (0, 24)},
  189: {24: (1, 4), 21: (1, 4)},
  190: {22: (0, 464)},
  191: {2: (0, 513), 3: (0, 39), 6: (0, 107), 107: (0, 200), 108: (0, 131), 13: (0, 423), 25: (0, 447), 30: (0, 281)},
  192: {35: (0, 438), 22: (1, 221), 102: (0, 116), 23: (0, 64), 78: (0, 121), 17: (1, 221), 18: (1, 221), 19: (1, 221), 20: (1, 221), 21: (1, 221), 86: (0, 315), 87: (0, 265), 24: (1, 221)},
  193: {50: (1, 306), 17: (1, 306), 18: (1, 306), 19: (1, 306), 20: (1, 306), 21: (1, 306), 22: (1, 306), 23: (1, 306), 24: (1, 306)},
  194: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 80: (0, 295), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 302), 93: (0, 109), 94: (0, 237), 95: (0, 504), 101: (0, 537), 118: (0, 257), 119: (0, 115), 120: (0, 377), 122: (0, 529), 123: (0, 274), 124: (0, 232)},
  195: {35: (1, 379), 68: (1, 379), 69: (1, 379), 50: (1, 379), 78: (1, 379), 17: (1, 379), 18: (1, 379), 19: (1, 379), 20: (1, 379), 21: (1, 379), 22: (1, 379), 23: (1, 379), 24: (1, 379)},
  196: {24: (1, 5), 21: (1, 5)},
  197: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 216), 93: (0, 109), 94: (0, 237), 95: (0, 504)},
  198: {0: (1, 73), 1: (1, 73), 2: (1, 73), 3: (1, 73), 4: (1, 73), 5: (1, 73), 6: (1, 73), 7: (1, 73), 8: (1, 73), 9: (1, 73), 10: (1, 73), 11: (1, 73), 12: (1, 73), 13: (1, 73), 14: (1, 73), 15: (1, 73), 16: (1, 73)},
  199: {2: (1, 50), 3: (1, 50), 5: (1, 50), 6: (1, 50), 10: (1, 50), 13: (1, 50), 17: (1, 50), 18: (1, 50), 19: (1, 50), 20: (1, 50), 21: (1, 50), 22: (1, 50), 23: (1, 50), 24: (1, 50), 34: (1, 50), 35: (1, 50), 36: (1, 50), 37: (1, 50), 38: (1, 50), 39: (1, 50), 40: (1, 50), 41: (1, 50), 42: (1, 50), 43: (1, 50), 44: (1, 50), 45: (1, 50), 46: (1, 50), 47: (1, 50), 48: (1, 50), 49: (1, 50), 50: (1, 50), 51: (1, 50), 52: (1, 50), 53: (1, 50), 54: (1, 50), 55: (1, 50), 56: (1, 50), 57: (1, 50), 58: (1, 50), 59: (1, 50), 60: (1, 50), 61: (1, 50), 62: (1, 50), 63: (1, 50), 64: (1, 50), 65: (1, 50), 67: (1, 50), 68: (1, 50), 69: (1, 50), 70: (1, 50), 71: (1, 50), 72: (1, 50), 74: (1, 50), 75: (1, 50), 76: (1, 50), 77: (1, 50), 78: (1, 50), 79: (1, 50), 80: (1, 50), 82: (1, 50), 83: (1, 50)},
  200: {76: (0, 354), 14: (0, 251)},
  201: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 213), 93: (0, 109), 94: (0, 237), 95: (0, 504)},
  202: {22: (0, 6)},
  203: {0: (1, 289), 1: (1, 289), 2: (1, 289), 3: (1, 289), 4: (1, 289), 101: (1, 289), 6: (1, 289), 7: (1, 289), 8: (1, 289), 9: (1, 289), 10: (1, 289), 11: (1, 289), 12: (1, 289), 13: (1, 289), 14: (1, 289), 15: (1, 289), 16: (1, 289), 80: (1, 289), 61: (1, 289), 5: (1, 289)},
  204: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 136: (0, 540), 80: (0, 295), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 302), 93: (0, 109), 94: (0, 237), 95: (0, 504), 101: (0, 537), 118: (0, 257), 119: (0, 115), 120: (0, 377), 122: (0, 17), 123: (0, 274), 124: (0, 232)},
  205: {17: (1, 212), 18: (1, 212), 19: (1, 212), 20: (1, 212), 21: (1, 212), 22: (1, 212), 23: (1, 212), 24: (1, 212)},
  206: {17: (1, 265), 18: (1, 265), 19: (1, 265), 20: (1, 265), 21: (1, 265), 22: (1, 265), 23: (1, 265), 24: (1, 265)},
  207: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 80: (0, 295), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 302), 93: (0, 109), 94: (0, 237), 95: (0, 504), 101: (0, 537), 118: (0, 257), 119: (0, 115), 120: (0, 377), 122: (0, 393), 123: (0, 274), 124: (0, 232)},
  208: {0: (1, 69), 1: (1, 69), 2: (1, 69), 3: (1, 69), 4: (1, 69), 5: (1, 69), 6: (1, 69), 7: (1, 69), 8: (1, 69), 9: (1, 69), 10: (1, 69), 11: (1, 69), 12: (1, 69), 13: (1, 69), 14: (1, 69), 15: (1, 69), 16: (1, 69)},
  209: {128: (0, 91), 1: (1, 97), 2: (1, 97), 3: (1, 97), 5: (1, 97), 6: (1, 97), 8: (1, 97), 9: (1, 97), 10: (1, 97), 11: (1, 97), 12: (1, 97), 13: (1, 97), 14: (1, 97), 15: (1, 97), 16: (1, 97), 17: (1, 97), 18: (1, 97), 19: (1, 97), 20: (1, 97), 21: (1, 97), 22: (1, 97), 23: (1, 97), 24: (1, 97), 34: (1, 97), 35: (1, 97), 36: (1, 97), 37: (1, 97), 38: (1, 97), 39: (1, 97), 40: (1, 97), 41: (1, 97), 42: (1, 97), 43: (1, 97), 44: (1, 97), 45: (1, 97), 46: (1, 97), 47: (1, 97), 48: (1, 97), 49: (1, 97), 50: (1, 97), 51: (1, 97), 52: (1, 97), 53: (1, 97), 54: (1, 97), 55: (1, 97), 56: (1, 97), 57: (1, 97), 58: (1, 97), 59: (1, 97), 60: (1, 97), 61: (1, 97), 62: (1, 97), 63: (1, 97), 64: (1, 97), 65: (1, 97), 66: (1, 97), 67: (1, 97), 68: (1, 97), 69: (1, 97), 70: (1, 97), 71: (1, 97), 72: (1, 97), 73: (1, 97), 74: (1, 97), 75: (1, 97), 76: (1, 97), 77: (1, 97), 78: (1, 97), 79: (1, 97), 80: (1, 97), 81: (1, 97), 82: (1, 97), 83: (1, 97)},
  210: {2: (1, 19), 3: (1, 19), 6: (1, 19), 13: (1, 19), 17: (1, 19), 18: (1, 19), 19: (1, 19), 20: (1, 19), 21: (1, 19), 22: (1, 19), 23: (1, 19), 24: (1, 19), 34: (1, 19), 35: (1, 19), 36: (1, 19), 41: (1, 19), 44: (1, 19), 47: (1, 19), 49: (1, 19), 50: (1, 19), 52: (1, 19), 62: (1, 19), 68: (1, 19), 69: (1, 19), 71: (1, 19), 72: (1, 19), 74: (1, 19), 76: (1, 19), 78: (1, 19), 79: (1, 19), 82: (1, 19), 83: (1, 19)},
  211: {23: (0, 64), 17: (1, 283), 18: (1, 283), 19: (1, 283), 20: (1, 283), 21: (1, 283), 22: (1, 283), 87: (0, 29), 24: (1, 283)},
  212: {84: (1, 298), 85: (1, 298)},
  213: {2: (1, 16), 3: (1, 16), 6: (1, 16), 13: (1, 16), 17: (1, 16), 18: (1, 16), 19: (1, 16), 20: (1, 16), 21: (1, 16), 22: (1, 16), 23: (1, 16), 24: (1, 16), 34: (1, 16), 35: (1, 16), 36: (1, 16), 41: (1, 16), 44: (1, 16), 47: (1, 16), 49: (1, 16), 50: (1, 16), 52: (1, 16), 62: (1, 16), 68: (1, 16), 69: (1, 16), 71: (1, 16), 72: (1, 16), 74: (1, 16), 76: (1, 16), 78: (1, 16), 79: (1, 16), 82: (1, 16), 83: (1, 16)},
  214: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 476), 93: (0, 109), 94: (0, 237), 95: (0, 504)},
  215: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 80: (0, 295), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 302), 93: (0, 109), 94: (0, 237), 95: (0, 504), 101: (0, 537), 118: (0, 257), 119: (0, 115), 120: (0, 377), 122: (0, 68), 123: (0, 274), 124: (0, 232)},
  216: {2: (1, 23), 3: (1, 23), 6: (1, 23), 13: (1, 23), 17: (1, 23), 18: (1, 23), 19: (1, 23), 20: (1, 23), 21: (1, 23), 22: (1, 23), 23: (1, 23), 24: (1, 23), 34: (1, 23), 35: (1, 23), 36: (1, 23), 41: (1, 23), 44: (1, 23), 47: (1, 23), 49: (1, 23), 50: (1, 23), 52: (1, 23), 62: (1, 23), 68: (1, 23), 69: (1, 23), 71: (1, 23), 72: (1, 23), 74: (1, 23), 76: (1, 23), 78: (1, 23), 79: (1, 23), 82: (1, 23), 83: (1, 23)},
  217: {17: (1, 254), 18: (1, 254), 19: (1, 254), 20: (1, 254), 21: (1, 254), 22: (1, 254), 23: (1, 254), 24: (1, 254)},
  218: {50: (1, 383), 84: (1, 383), 85: (1, 383)},
  219: {130: (0, 434), 3: (1, 40), 5: (0, 0), 6: (1, 40), 10: (0, 481), 13: (1, 40), 17: (1, 40), 18: (1, 40), 19: (1, 40), 20: (1, 40), 21: (1, 40), 22: (1, 40), 23: (1, 40), 24: (1, 40), 34: (1, 40), 35: (1, 40), 36: (1, 40), 37: (0, 111), 38: (0, 208), 39: (1, 40), 40: (0, 50), 41: (1, 40), 42: (0, 301), 43: (1, 40), 44: (1, 40), 45: (0, 183), 46: (1, 40), 47: (1, 40), 48: (0, 149), 49: (1, 40), 50: (1, 40), 51: (0, 235), 52: (1, 40), 53: (0, 516), 54: (0, 510), 55: (0, 489), 56: (0, 457), 57: (0, 159), 58: (0, 522), 59: (0, 308), 60: (0, 198), 61: (0, 30), 62: (1, 40), 63: (0, 262), 64: (1, 40), 65: (1, 40), 2: (1, 40), 67: (1, 40), 68: (1, 40), 69: (1, 40), 70: (1, 40), 71: (1, 40), 72: (1, 40), 74: (1, 40), 75: (1, 40), 76: (1, 40), 78: (1, 40), 79: (1, 40), 80: (1, 40), 82: (1, 40), 83: (1, 40)},
  220: {17: (1, 285), 18: (1, 285), 19: (1, 285), 20: (1, 285), 21: (1, 285), 22: (1, 285), 23: (1, 285), 24: (1, 285)},
  221: {96: (0, 14), 97: (0, 74), 98: (0, 536), 105: (0, 474), 6: (0, 107), 135: (0, 532), 104: (0, 486), 137: (0, 313), 138: (0, 92), 2: (0, 513), 13: (0, 495), 14: (0, 221), 146: (0, 284), 84: (0, 507), 85: (0, 408), 89: (0, 151), 25: (0, 461), 106: (0, 165), 133: (0, 71)},
  222: {35: (0, 438), 22: (1, 259), 102: (0, 415), 23: (0, 64), 78: (0, 121), 17: (1, 259), 18: (1, 259), 19: (1, 259), 20: (1, 259), 21: (1, 259), 86: (0, 528), 87: (0, 378), 24: (1, 259)},
  223: {24: (1, 0), 147: (0, 138), 21: (0, 373)},
  224: {2: (1, 45), 3: (1, 45), 5: (1, 45), 6: (1, 45), 10: (1, 45), 13: (1, 45), 17: (1, 45), 18: (1, 45), 19: (1, 45), 20: (1, 45), 21: (1, 45), 22: (1, 45), 23: (1, 45), 24: (1, 45), 34: (1, 45), 35: (1, 45), 36: (1, 45), 37: (1, 45), 38: (1, 45), 39: (1, 45), 40: (1, 45), 41: (1, 45), 42: (1, 45), 43: (1, 45), 44: (1, 45), 45: (1, 45), 46: (1, 45), 47: (1, 45), 48: (1, 45), 49: (1, 45), 50: (1, 45), 51: (1, 45), 52: (1, 45), 53: (1, 45), 54: (1, 45), 55: (1, 45), 56: (1, 45), 57: (1, 45), 58: (1, 45), 59: (1, 45), 60: (1, 45), 61: (1, 45), 62: (1, 45), 63: (1, 45), 64: (1, 45), 65: (1, 45), 67: (1, 45), 68: (1, 45), 69: (1, 45), 70: (1, 45), 71: (1, 45), 72: (1, 45), 74: (1, 45), 75: (1, 45), 76: (1, 45), 77: (1, 45), 78: (1, 45), 79: (1, 45), 80: (1, 45), 82: (1, 45), 83: (1, 45)},
  225: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 145), 93: (0, 109), 94: (0, 237), 95: (0, 504)},
  226: {33: (0, 331), 110: (0, 67), 111: (0, 134), 27: (0, 452), 28: (0, 276), 29: (0, 396)},
  227: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 80: (0, 295), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 302), 93: (0, 109), 94: (0, 237), 95: (0, 504), 101: (0, 537), 118: (0, 257), 119: (0, 115), 120: (0, 377), 122: (0, 120), 123: (0, 274), 124: (0, 232)},
  228: {35: (0, 438), 68: (0, 194), 69: (0, 255), 102: (0, 63), 142: (0, 296), 23: (0, 64), 50: (0, 180), 78: (0, 121), 144: (0, 173), 17: (1, 263), 18: (1, 263), 19: (1, 263), 20: (1, 263), 21: (1, 263), 86: (0, 324), 87: (0, 206), 24: (1, 263), 148: (0, 269), 22: (1, 263)},
  229: {2: (1, 27), 3: (1, 27), 6: (1, 27), 13: (1, 27), 17: (1, 27), 18: (1, 27), 19: (1, 27), 20: (1, 27), 21: (1, 27), 22: (1, 27), 23: (1, 27), 24: (1, 27), 34: (1, 27), 35: (1, 27), 36: (1, 27), 39: (0, 505), 41: (1, 27), 44: (1, 27), 47: (1, 27), 49: (1, 27), 50: (1, 27), 52: (1, 27), 62: (1, 27), 68: (1, 27), 69: (1, 27), 71: (1, 27), 72: (1, 27), 74: (1, 27), 76: (1, 27), 78: (1, 27), 79: (1, 27), 82: (1, 27), 83: (1, 27)},
  230: {50: (1, 351), 78: (1, 351), 17: (1, 351), 18: (1, 351), 19: (1, 351), 20: (1, 351), 21: (1, 351), 22: (1, 351), 23: (1, 351), 24: (1, 351)},
  231: {1: (1, 332), 2: (1, 332), 3: (1, 332), 100: (1, 332), 6: (1, 332), 8: (1, 332), 9: (1, 332), 11: (1, 332), 12: (1, 332), 13: (1, 332), 15: (1, 332), 16: (1, 332), 50: (1, 332)},
  232: {2: (1, 9), 3: (1, 9), 6: (1, 9), 13: (1, 9), 17: (1, 9), 18: (1, 9), 19: (1, 9), 20: (1, 9), 149: (0, 253), 22: (1, 9), 23: (1, 9), 24: (1, 9), 34: (1, 9), 35: (1, 9), 36: (1, 9), 41: (1, 9), 44: (1, 9), 47: (1, 9), 49: (1, 9), 50: (1, 9), 52: (1, 9), 62: (1, 9), 68: (1, 9), 69: (1, 9), 71: (1, 9), 74: (1, 9), 76: (1, 9), 78: (1, 9), 79: (1, 9), 82: (0, 483), 83: (1, 9), 21: (1, 9)},
  233: {1: (1, 389), 2: (1, 389), 3: (1, 389), 100: (1, 389), 6: (1, 389), 8: (1, 389), 9: (1, 389), 11: (1, 389), 12: (1, 389), 13: (1, 389), 15: (1, 389), 16: (1, 389), 50: (1, 389)},
  234: {83: (1, 118), 35: (1, 118), 68: (1, 118), 81: (1, 118), 73: (1, 118), 74: (1, 118), 23: (1, 118), 44: (1, 118), 50: (1, 118), 78: (1, 118), 17: (1, 118), 18: (1, 118), 19: (1, 118), 52: (1, 118), 21: (1, 118), 22: (1, 118), 41: (1, 118), 24: (1, 118), 20: (1, 118)},
  235: {0: (1, 86), 1: (1, 86), 2: (1, 86), 3: (1, 86), 4: (1, 86), 5: (1, 86), 6: (1, 86), 7: (1, 86), 8: (1, 86), 9: (1, 86), 10: (1, 86), 11: (1, 86), 12: (1, 86), 13: (1, 86), 14: (1, 86), 15: (1, 86), 80: (0, 515), 16: (1, 86)},
  236: {23: (0, 64), 17: (1, 191), 18: (1, 191), 19: (1, 191), 20: (1, 191), 21: (1, 191), 22: (1, 191), 87: (0, 343), 24: (1, 191)},
  237: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 99), 95: (0, 53)},
  238: {17: (1, 264), 18: (1, 264), 19: (1, 264), 20: (1, 264), 21: (1, 264), 22: (1, 264), 23: (1, 264), 24: (1, 264)},
  239: {36: (0, 286)},
  240: {24: (1, 343), 21: (1, 343)},
  241: {2: (1, 355), 3: (1, 355), 6: (1, 355), 13: (1, 355), 17: (1, 355), 18: (1, 355), 19: (1, 355), 20: (1, 355), 21: (1, 355), 22: (1, 355), 23: (1, 355), 24: (1, 355), 34: (1, 355), 35: (1, 355), 36: (1, 355), 41: (1, 355), 44: (1, 355), 47: (1, 355), 49: (1, 355), 50: (1, 355), 52: (1, 355), 62: (1, 355), 68: (1, 355), 69: (1, 355), 71: (1, 355), 72: (1, 355), 74: (1, 355), 76: (1, 355), 78: (1, 355), 79: (1, 355), 82: (1, 355), 83: (1, 355)},
  242: {23: (0, 64), 17: (1, 188), 18: (1, 188), 19: (1, 188), 20: (1, 188), 21: (1, 188), 22: (1, 188), 87: (0, 297), 24: (1, 188)},
  243: {96: (0, 14), 97: (0, 74), 98: (0, 536), 133: (0, 71), 135: (0, 8), 137: (0, 313), 138: (0, 92), 13: (0, 226), 84: (0, 507), 85: (0, 408), 105: (0, 202)},
  244: {96: (0, 14), 97: (0, 74), 98: (0, 536), 133: (0, 71), 135: (0, 189), 137: (0, 313), 138: (0, 92), 139: (0, 196), 140: (0, 500), 141: (0, 114), 147: (0, 163), 84: (0, 507), 85: (0, 408), 150: (0, 503), 24: (1, 1), 21: (0, 373)},
  245: {17: (1, 228), 18: (1, 228), 19: (1, 228), 20: (1, 228), 21: (1, 228), 22: (1, 228), 23: (1, 228), 24: (1, 228)},
  246: {2: (1, 53), 3: (1, 53), 5: (1, 53), 6: (1, 53), 10: (1, 53), 13: (1, 53), 14: (1, 53), 17: (1, 53), 18: (1, 53), 19: (1, 53), 20: (1, 53), 21: (1, 53), 22: (1, 53), 23: (1, 53), 24: (1, 53), 34: (1, 53), 35: (1, 53), 36: (1, 53), 37: (1, 53), 38: (1, 53), 39: (1, 53), 40: (1, 53), 41: (1, 53), 42: (1, 53), 43: (1, 53), 44: (1, 53), 45: (1, 53), 46: (1, 53), 47: (1, 53), 48: (1, 53), 49: (1, 53), 50: (1, 53), 51: (1, 53), 52: (1, 53), 53: (1, 53), 54: (1, 53), 55: (1, 53), 56: (1, 53), 57: (1, 53), 58: (1, 53), 59: (1, 53), 60: (1, 53), 61: (1, 53), 62: (1, 53), 63: (1, 53), 64: (1, 53), 65: (1, 53), 66: (1, 53), 67: (1, 53), 68: (1, 53), 69: (1, 53), 70: (1, 53), 71: (1, 53), 72: (1, 53), 73: (1, 53), 74: (1, 53), 75: (1, 53), 76: (1, 53), 77: (1, 53), 78: (1, 53), 79: (1, 53), 80: (1, 53), 81: (1, 53), 82: (1, 53), 83: (1, 53)},
  247: {17: (1, 198), 18: (1, 198), 19: (1, 198), 20: (1, 198), 21: (1, 198), 22: (1, 198), 23: (1, 198), 24: (1, 198)},
  248: {24: (1, 315), 21: (1, 315), 22: (1, 315)},
  249: {50: (0, 204), 22: (0, 38), 151: (0, 433)},
  250: {22: (1, 269), 23: (0, 64), 78: (0, 121), 17: (1, 269), 18: (1, 269), 19: (1, 269), 20: (1, 269), 21: (1, 269), 86: (0, 83), 87: (0, 287), 24: (1, 269)},
  251: {25: (0, 370), 2: (0, 513), 132: (0, 352), 13: (0, 423), 6: (0, 107)},
  252: {2: (1, 35), 3: (1, 35), 6: (1, 35), 13: (1, 35), 17: (1, 35), 18: (1, 35), 19: (1, 35), 20: (1, 35), 21: (1, 35), 22: (1, 35), 23: (1, 35), 24: (1, 35), 34: (1, 35), 35: (1, 35), 36: (1, 35), 41: (1, 35), 44: (1, 35), 47: (1, 35), 49: (1, 35), 50: (1, 35), 52: (1, 35), 62: (1, 35), 68: (1, 35), 69: (1, 35), 71: (1, 35), 72: (1, 35), 74: (1, 35), 76: (1, 35), 78: (1, 35), 79: (1, 35), 82: (1, 35), 83: (1, 35)},
  253: {2: (1, 10), 3: (1, 10), 6: (1, 10), 13: (1, 10), 17: (1, 10), 18: (1, 10), 19: (1, 10), 20: (1, 10), 21: (1, 10), 22: (1, 10), 23: (1, 10), 24: (1, 10), 34: (1, 10), 35: (1, 10), 36: (1, 10), 41: (1, 10), 44: (1, 10), 47: (1, 10), 49: (1, 10), 50: (1, 10), 52: (1, 10), 62: (1, 10), 68: (1, 10), 69: (1, 10), 71: (1, 10), 74: (1, 10), 76: (1, 10), 78: (1, 10), 79: (1, 10), 82: (0, 326), 83: (1, 10)},
  254: {50: (0, 56), 84: (1, 303), 85: (1, 303)},
  255: {2: (0, 513), 6: (0, 107), 104: (0, 486), 105: (0, 474), 106: (0, 165), 13: (0, 495), 14: (0, 221), 146: (0, 62), 89: (0, 151), 25: (0, 461)},
  256: {2: (1, 144), 14: (1, 144), 13: (1, 144), 6: (1, 144)},
  257: {2: (1, 8), 3: (1, 8), 6: (1, 8), 13: (1, 8), 17: (1, 8), 18: (1, 8), 19: (1, 8), 20: (1, 8), 21: (1, 8), 22: (1, 8), 23: (1, 8), 24: (1, 8), 34: (1, 8), 35: (1, 8), 36: (1, 8), 41: (1, 8), 44: (1, 8), 47: (1, 8), 49: (1, 8), 50: (1, 8), 52: (1, 8), 62: (1, 8), 68: (1, 8), 69: (1, 8), 71: (1, 8), 74: (1, 8), 76: (1, 8), 78: (1, 8), 79: (1, 8), 83: (1, 8)},
  258: {76: (0, 346)},
  259: {17: (1, 282), 18: (1, 282), 19: (1, 282), 20: (1, 282), 21: (1, 282), 22: (1, 282), 23: (1, 282), 24: (1, 282)},
  260: {22: (0, 46)},
  261: {2: (1, 46), 3: (1, 46), 5: (1, 46), 6: (1, 46), 10: (1, 46), 13: (1, 46), 17: (1, 46), 18: (1, 46), 19: (1, 46), 20: (1, 46), 21: (1, 46), 22: (1, 46), 23: (1, 46), 24: (1, 46), 34: (1, 46), 35: (1, 46), 36: (1, 46), 37: (1, 46), 38: (1, 46), 39: (1, 46), 40: (1, 46), 41: (1, 46), 42: (1, 46), 43: (1, 46), 44: (1, 46), 45: (1, 46), 46: (1, 46), 47: (1, 46), 48: (1, 46), 49: (1, 46), 50: (1, 46), 51: (1, 46), 52: (1, 46), 53: (1, 46), 54: (1, 46), 55: (1, 46), 56: (1, 46), 57: (1, 46), 58: (1, 46), 59: (1, 46), 60: (1, 46), 61: (1, 46), 62: (1, 46), 63: (1, 46), 64: (1, 46), 65: (1, 46), 67: (1, 46), 68: (1, 46), 69: (1, 46), 70: (1, 46), 71: (1, 46), 72: (1, 46), 74: (1, 46), 75: (1, 46), 76: (1, 46), 77: (1, 46), 78: (1, 46), 79: (1, 46), 80: (1, 46), 82: (1, 46), 83: (1, 46)},
  262: {0: (1, 71), 1: (1, 71), 2: (1, 71), 3: (1, 71), 4: (1, 71), 5: (1, 71), 6: (1, 71), 7: (1, 71), 8: (1, 71), 9: (1, 71), 10: (1, 71), 11: (1, 71), 12: (1, 71), 13: (1, 71), 14: (1, 71), 15: (1, 71), 16: (1, 71)},
  263: {17: (1, 213), 18: (1, 213), 19: (1, 213), 20: (1, 213), 21: (1, 213), 22: (1, 213), 23: (1, 213), 24: (1, 213)},
  264: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 80: (0, 295), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 302), 93: (0, 109), 94: (0, 237), 95: (0, 504), 101: (0, 537), 118: (0, 257), 119: (0, 115), 120: (0, 377), 122: (0, 266), 123: (0, 274), 124: (0, 232)},
  265: {17: (1, 256), 18: (1, 256), 19: (1, 256), 20: (1, 256), 21: (1, 256), 22: (1, 256), 23: (1, 256), 24: (1, 256)},
  266: {83: (1, 138), 35: (1, 138), 68: (1, 138), 41: (1, 138), 74: (1, 138), 44: (1, 138), 50: (1, 138), 78: (1, 138), 17: (1, 138), 18: (1, 138), 19: (1, 138), 52: (1, 138), 21: (1, 138), 22: (1, 138), 23: (1, 138), 24: (1, 138), 20: (1, 138)},
  267: {17: (1, 287), 18: (1, 287), 19: (1, 287), 20: (1, 287), 21: (1, 287), 22: (1, 287), 23: (1, 287), 24: (1, 287)},
  268: {72: (0, 214)},
  269: {35: (0, 438), 68: (0, 194), 69: (0, 255), 102: (0, 401), 142: (0, 491), 23: (0, 64), 50: (0, 289), 78: (0, 121), 144: (0, 272), 17: (1, 161), 18: (1, 161), 19: (1, 161), 20: (1, 161), 21: (1, 161), 86: (0, 132), 87: (0, 51), 24: (1, 161), 22: (1, 161)},
  270: {0: (1, 361), 1: (1, 361), 2: (1, 361), 3: (1, 361), 4: (1, 361), 5: (1, 361), 6: (1, 361), 7: (1, 361), 8: (1, 361), 9: (1, 361), 10: (1, 361), 11: (1, 361), 12: (1, 361), 13: (1, 361), 14: (1, 361), 15: (1, 361), 16: (1, 361)},
  271: {49: (0, 193), 50: (1, 308), 79: (0, 449), 17: (1, 308), 18: (1, 308), 19: (1, 308), 20: (1, 308), 21: (1, 308), 22: (1, 308), 23: (1, 308), 24: (1, 308)},
  272: {35: (0, 438), 68: (0, 194), 22: (1, 204), 102: (0, 348), 142: (0, 86), 23: (0, 64), 78: (0, 121), 17: (1, 204), 18: (1, 204), 19: (1, 204), 20: (1, 204), 21: (1, 204), 86: (0, 416), 87: (0, 205), 24: (1, 204)},
  273: {17: (1, 169), 18: (1, 169), 19: (1, 169), 20: (1, 169), 21: (1, 169), 22: (1, 169), 23: (1, 169), 24: (1, 169)},
  274: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 80: (0, 357), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 302), 93: (0, 109), 94: (0, 237), 95: (0, 504), 101: (0, 537), 119: (0, 104)},
  275: {83: (1, 113), 35: (1, 113), 68: (1, 113), 81: (1, 113), 73: (1, 113), 74: (1, 113), 23: (1, 113), 44: (1, 113), 50: (1, 113), 78: (1, 113), 17: (1, 113), 18: (1, 113), 19: (1, 113), 52: (1, 113), 21: (1, 113), 22: (1, 113), 41: (1, 113), 24: (1, 113), 20: (1, 113)},
  276: {1: (1, 338), 2: (1, 338), 3: (1, 338), 6: (1, 338), 8: (1, 338), 9: (1, 338), 11: (1, 338), 12: (1, 338), 13: (1, 338), 15: (1, 338), 16: (1, 338), 17: (1, 338), 18: (1, 338), 19: (1, 338), 20: (1, 338), 21: (1, 338), 22: (1, 338), 23: (1, 338), 24: (1, 338), 35: (1, 338), 41: (1, 338), 44: (1, 338), 50: (1, 338), 52: (1, 338), 66: (1, 338), 68: (1, 338), 73: (1, 338), 74: (1, 338), 78: (1, 338), 80: (1, 338), 81: (1, 338), 83: (1, 338), 84: (1, 338), 85: (1, 338), 99: (1, 338), 100: (1, 338)},
  277: {1: (0, 28), 2: (0, 513), 3: (0, 39), 5: (1, 62), 6: (0, 107), 8: (0, 82), 9: (0, 298), 10: (1, 62), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 17: (1, 62), 18: (1, 62), 19: (1, 62), 20: (1, 62), 21: (1, 62), 22: (1, 62), 23: (1, 62), 24: (1, 62), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 34: (1, 62), 35: (1, 62), 36: (1, 62), 37: (1, 62), 38: (1, 62), 39: (1, 62), 40: (1, 62), 41: (1, 62), 42: (1, 62), 43: (1, 62), 44: (1, 62), 45: (1, 62), 46: (1, 62), 47: (1, 62), 48: (1, 62), 49: (1, 62), 50: (1, 62), 51: (1, 62), 52: (1, 62), 53: (1, 62), 54: (1, 62), 55: (1, 62), 56: (1, 62), 57: (1, 62), 58: (1, 62), 59: (1, 62), 60: (1, 62), 61: (1, 62), 62: (1, 62), 63: (1, 62), 64: (1, 62), 65: (1, 62), 66: (1, 62), 67: (1, 62), 68: (1, 62), 69: (1, 62), 70: (1, 62), 71: (1, 62), 72: (1, 62), 73: (1, 62), 74: (1, 62), 75: (1, 62), 76: (1, 62), 77: (1, 62), 78: (1, 62), 79: (1, 62), 80: (1, 62), 81: (1, 62), 82: (1, 62), 83: (1, 62), 88: (0, 126), 89: (0, 186), 90: (0, 261)},
  278: {23: (0, 64), 17: (1, 276), 18: (1, 276), 19: (1, 276), 20: (1, 276), 21: (1, 276), 22: (1, 276), 87: (0, 402), 24: (1, 276)},
  279: {1: (1, 91), 2: (1, 91), 3: (1, 91), 5: (1, 91), 6: (1, 91), 8: (1, 91), 9: (1, 91), 10: (1, 91), 11: (1, 91), 12: (1, 91), 13: (1, 91), 14: (1, 91), 15: (1, 91), 16: (1, 91), 17: (1, 91), 18: (1, 91), 19: (1, 91), 20: (1, 91), 21: (1, 91), 22: (1, 91), 23: (1, 91), 24: (1, 91), 34: (1, 91), 35: (1, 91), 36: (1, 91), 37: (1, 91), 38: (1, 91), 39: (1, 91), 40: (1, 91), 41: (1, 91), 42: (1, 91), 43: (1, 91), 44: (1, 91), 45: (1, 91), 46: (1, 91), 47: (1, 91), 48: (1, 91), 49: (1, 91), 50: (1, 91), 51: (1, 91), 52: (1, 91), 53: (1, 91), 54: (1, 91), 55: (1, 91), 56: (1, 91), 57: (1, 91), 58: (1, 91), 59: (1, 91), 60: (1, 91), 61: (1, 91), 62: (1, 91), 63: (1, 91), 64: (1, 91), 65: (1, 91), 66: (1, 91), 67: (1, 91), 68: (1, 91), 69: (1, 91), 70: (1, 91), 71: (1, 91), 72: (1, 91), 73: (1, 91), 74: (1, 91), 75: (1, 91), 76: (1, 91), 77: (1, 91), 78: (1, 91), 79: (1, 91), 80: (1, 91), 81: (1, 91), 82: (1, 91), 83: (1, 91), 100: (1, 91)},
  280: {23: (0, 64), 17: (1, 237), 18: (1, 237), 19: (1, 237), 20: (1, 237), 21: (1, 237), 22: (1, 237), 87: (0, 102), 24: (1, 237)},
  281: {14: (1, 93), 17: (1, 93), 18: (1, 93), 19: (1, 93), 20: (1, 93), 21: (1, 93), 22: (1, 93), 23: (1, 93), 24: (1, 93), 35: (1, 93), 41: (1, 93), 44: (1, 93), 50: (1, 93), 52: (1, 93), 66: (1, 93), 68: (1, 93), 73: (1, 93), 74: (1, 93), 76: (1, 93), 78: (1, 93), 80: (1, 93), 81: (1, 93), 83: (1, 93)},
  282: {152: (0, 212), 84: (1, 296), 85: (1, 296)},
  283: {23: (0, 64), 17: (1, 281), 18: (1, 281), 19: (1, 281), 20: (1, 281), 21: (1, 281), 22: (1, 281), 87: (0, 273), 24: (1, 281)},
  284: {22: (0, 387)},
  285: {1: (1, 329), 2: (1, 329), 3: (1, 329), 100: (1, 329), 6: (1, 329), 8: (1, 329), 9: (1, 329), 11: (1, 329), 12: (1, 329), 13: (1, 329), 15: (1, 329), 16: (1, 329), 50: (1, 329)},
  286: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 80: (0, 295), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 302), 93: (0, 109), 94: (0, 237), 95: (0, 504), 101: (0, 537), 118: (0, 257), 119: (0, 115), 120: (0, 377), 122: (0, 429), 123: (0, 274), 124: (0, 232)},
  287: {17: (1, 273), 18: (1, 273), 19: (1, 273), 20: (1, 273), 21: (1, 273), 22: (1, 273), 23: (1, 273), 24: (1, 273)},
  288: {96: (0, 14), 97: (0, 74), 98: (0, 502), 84: (0, 507), 85: (0, 408)},
  289: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 145: (0, 195), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 61: (0, 466), 80: (0, 295), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 302), 93: (0, 109), 94: (0, 237), 95: (0, 504), 101: (0, 537), 118: (0, 257), 119: (0, 115), 120: (0, 377), 122: (0, 80), 123: (0, 274), 124: (0, 232)},
  290: {1: (1, 336), 2: (1, 336), 3: (1, 336), 100: (1, 336), 6: (1, 336), 8: (1, 336), 9: (1, 336), 11: (1, 336), 12: (1, 336), 13: (1, 336), 15: (1, 336), 16: (1, 336), 50: (1, 336)},
  291: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 465), 93: (0, 109), 94: (0, 237), 95: (0, 504)},
  292: {22: (0, 150)},
  293: {1: (0, 28), 3: (0, 39), 8: (0, 82), 9: (0, 298), 11: (0, 168), 12: (0, 400), 13: (0, 350), 15: (0, 89), 26: (0, 488), 30: (0, 459), 31: (0, 240)},
  294: {50: (1, 385), 17: (1, 385), 18: (1, 385), 19: (1, 385), 20: (1, 385), 21: (1, 385), 22: (1, 385), 23: (1, 385), 24: (1, 385)},
  295: {0: (1, 356), 1: (1, 356), 2: (1, 356), 3: (1, 356), 4: (1, 356), 101: (1, 356), 6: (1, 356), 7: (1, 356), 8: (1, 356), 9: (1, 356), 10: (1, 356), 11: (1, 356), 12: (1, 356), 13: (1, 356), 14: (1, 356), 15: (1, 356), 80: (1, 356), 16: (1, 356), 5: (1, 356)},
  296: {35: (0, 438), 22: (1, 179), 102: (0, 137), 23: (0, 64), 78: (0, 121), 17: (1, 179), 18: (1, 179), 19: (1, 179), 20: (1, 179), 21: (1, 179), 86: (0, 72), 87: (0, 65), 24: (1, 179)},
  297: {17: (1, 236), 18: (1, 236), 19: (1, 236), 20: (1, 236), 21: (1, 236), 22: (1, 236), 23: (1, 236), 24: (1, 236)},
  298: {1: (1, 107), 2: (1, 107), 3: (1, 107), 5: (1, 107), 6: (1, 107), 8: (1, 107), 9: (1, 107), 10: (1, 107), 11: (1, 107), 12: (1, 107), 13: (1, 107), 14: (1, 107), 15: (1, 107), 16: (1, 107), 17: (1, 107), 18: (1, 107), 19: (1, 107), 20: (1, 107), 21: (1, 107), 22: (1, 107), 23: (1, 107), 24: (1, 107), 34: (1, 107), 35: (1, 107), 36: (1, 107), 37: (1, 107), 38: (1, 107), 39: (1, 107), 40: (1, 107), 41: (1, 107), 42: (1, 107), 43: (1, 107), 44: (1, 107), 45: (1, 107), 46: (1, 107), 47: (1, 107), 48: (1, 107), 49: (1, 107), 50: (1, 107), 51: (1, 107), 52: (1, 107), 53: (1, 107), 54: (1, 107), 55: (1, 107), 56: (1, 107), 57: (1, 107), 58: (1, 107), 59: (1, 107), 60: (1, 107), 61: (1, 107), 62: (1, 107), 63: (1, 107), 64: (1, 107), 65: (1, 107), 66: (1, 107), 67: (1, 107), 68: (1, 107), 69: (1, 107), 70: (1, 107), 71: (1, 107), 72: (1, 107), 73: (1, 107), 74: (1, 107), 75: (1, 107), 76: (1, 107), 77: (1, 107), 78: (1, 107), 79: (1, 107), 80: (1, 107), 81: (1, 107), 82: (1, 107), 83: (1, 107), 100: (1, 107)},
  299: {74: (0, 11)},
  300: {2: (1, 22), 3: (1, 22), 6: (1, 22), 13: (1, 22), 17: (1, 22), 18: (1, 22), 19: (1, 22), 20: (1, 22), 21: (1, 22), 22: (1, 22), 23: (1, 22), 24: (1, 22), 34: (1, 22), 35: (1, 22), 36: (1, 22), 39: (0, 386), 41: (1, 22), 44: (1, 22), 47: (1, 22), 49: (1, 22), 50: (1, 22), 52: (1, 22), 62: (1, 22), 68: (1, 22), 69: (1, 22), 71: (1, 22), 72: (1, 22), 74: (1, 22), 76: (1, 22), 78: (1, 22), 79: (1, 22), 82: (1, 22), 83: (1, 22)},
  301: {0: (1, 84), 1: (1, 84), 2: (1, 84), 3: (1, 84), 4: (1, 84), 5: (1, 84), 6: (1, 84), 7: (1, 84), 8: (1, 84), 9: (1, 84), 10: (1, 84), 11: (1, 84), 12: (1, 84), 13: (1, 84), 14: (1, 84), 15: (1, 84), 16: (1, 84)},
  302: {2: (1, 36), 3: (1, 36), 6: (1, 36), 13: (1, 36), 17: (1, 36), 18: (1, 36), 19: (1, 36), 20: (1, 36), 21: (1, 36), 22: (1, 36), 23: (1, 36), 24: (1, 36), 34: (1, 36), 35: (1, 36), 36: (1, 36), 41: (1, 36), 43: (0, 425), 44: (1, 36), 46: (0, 534), 47: (1, 36), 49: (1, 36), 50: (1, 36), 51: (0, 26), 52: (1, 36), 62: (1, 36), 64: (0, 320), 65: (0, 437), 67: (0, 521), 68: (1, 36), 69: (1, 36), 70: (0, 177), 71: (1, 36), 72: (1, 36), 74: (1, 36), 75: (0, 27), 76: (1, 36), 78: (1, 36), 79: (1, 36), 80: (0, 142), 82: (1, 36), 83: (1, 36)},
  303: {2: (1, 29), 3: (1, 29), 6: (1, 29), 13: (1, 29), 17: (1, 29), 18: (1, 29), 19: (1, 29), 20: (1, 29), 21: (1, 29), 22: (1, 29), 23: (1, 29), 24: (1, 29), 34: (1, 29), 35: (1, 29), 36: (1, 29), 39: (0, 523), 41: (1, 29), 44: (1, 29), 47: (1, 29), 49: (1, 29), 50: (1, 29), 52: (1, 29), 62: (1, 29), 68: (1, 29), 69: (1, 29), 71: (1, 29), 72: (1, 29), 74: (1, 29), 76: (1, 29), 78: (1, 29), 79: (1, 29), 82: (1, 29), 83: (1, 29)},
  304: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 80: (0, 295), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 302), 93: (0, 109), 94: (0, 237), 95: (0, 504), 101: (0, 537), 118: (0, 257), 119: (0, 115), 120: (0, 377), 122: (0, 182), 123: (0, 274), 124: (0, 232)},
  305: {2: (1, 28), 3: (1, 28), 6: (1, 28), 13: (1, 28), 17: (1, 28), 18: (1, 28), 19: (1, 28), 20: (1, 28), 21: (1, 28), 22: (1, 28), 23: (1, 28), 24: (1, 28), 34: (1, 28), 35: (1, 28), 36: (1, 28), 39: (0, 10), 41: (1, 28), 44: (1, 28), 47: (1, 28), 49: (1, 28), 50: (1, 28), 52: (1, 28), 62: (1, 28), 68: (1, 28), 69: (1, 28), 71: (1, 28), 72: (1, 28), 74: (1, 28), 76: (1, 28), 78: (1, 28), 79: (1, 28), 82: (1, 28), 83: (1, 28)},
  306: {17: (1, 243), 18: (1, 243), 19: (1, 243), 20: (1, 243), 21: (1, 243), 22: (1, 243), 23: (1, 243), 24: (1, 243)},
  307: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 136: (0, 508), 80: (0, 295), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 302), 93: (0, 109), 94: (0, 237), 95: (0, 504), 101: (0, 537), 118: (0, 257), 119: (0, 115), 120: (0, 377), 122: (0, 17), 123: (0, 274), 124: (0, 232)},
  308: {0: (1, 80), 1: (1, 80), 2: (1, 80), 3: (1, 80), 4: (1, 80), 5: (1, 80), 6: (1, 80), 7: (1, 80), 8: (1, 80), 9: (1, 80), 10: (1, 80), 11: (1, 80), 12: (1, 80), 13: (1, 80), 14: (1, 80), 15: (1, 80), 16: (1, 80)},
  309: {83: (1, 137), 35: (1, 137), 68: (1, 137), 41: (1, 137), 74: (1, 137), 44: (1, 137), 50: (1, 137), 78: (1, 137), 17: (1, 137), 18: (1, 137), 19: (1, 137), 52: (1, 137), 21: (1, 137), 22: (1, 137), 23: (1, 137), 24: (1, 137), 20: (1, 137)},
  310: {17: (1, 176), 18: (1, 176), 19: (1, 176), 20: (1, 176), 21: (1, 176), 22: (1, 176), 23: (1, 176), 24: (1, 176)},
  311: {17: (1, 239), 18: (1, 239), 19: (1, 239), 20: (1, 239), 21: (1, 239), 22: (1, 239), 23: (1, 239), 24: (1, 239)},
  312: {22: (1, 286), 23: (0, 64), 78: (0, 121), 17: (1, 286), 18: (1, 286), 19: (1, 286), 20: (1, 286), 21: (1, 286), 86: (0, 236), 87: (0, 12), 24: (1, 286)},
  313: {96: (0, 14), 97: (0, 74), 98: (0, 536), 138: (0, 156), 84: (0, 507), 85: (0, 408)},
  314: {23: (0, 64), 17: (1, 171), 18: (1, 171), 19: (1, 171), 20: (1, 171), 21: (1, 171), 22: (1, 171), 87: (0, 220), 24: (1, 171)},
  315: {23: (0, 64), 17: (1, 168), 18: (1, 168), 19: (1, 168), 20: (1, 168), 21: (1, 168), 22: (1, 168), 87: (0, 381), 24: (1, 168)},
  316: {14: (1, 94), 17: (1, 94), 18: (1, 94), 19: (1, 94), 20: (1, 94), 21: (1, 94), 22: (1, 94), 23: (1, 94), 24: (1, 94), 35: (1, 94), 41: (1, 94), 44: (1, 94), 50: (1, 94), 52: (1, 94), 66: (1, 94), 68: (1, 94), 73: (1, 94), 74: (1, 94), 76: (1, 94), 78: (1, 94), 80: (1, 94), 81: (1, 94), 83: (1, 94)},
  317: {2: (1, 37), 3: (1, 37), 6: (1, 37), 13: (1, 37), 17: (1, 37), 18: (1, 37), 19: (1, 37), 20: (1, 37), 21: (1, 37), 22: (1, 37), 23: (1, 37), 24: (1, 37), 34: (1, 37), 35: (1, 37), 36: (1, 37), 41: (1, 37), 44: (1, 37), 47: (1, 37), 49: (1, 37), 50: (1, 37), 52: (1, 37), 62: (1, 37), 68: (1, 37), 69: (1, 37), 71: (1, 37), 72: (1, 37), 74: (1, 37), 76: (1, 37), 78: (1, 37), 79: (1, 37), 82: (1, 37), 83: (1, 37)},
  318: {25: (0, 404), 2: (0, 513), 13: (0, 423), 6: (0, 107), 61: (0, 36)},
  319: {50: (0, 56), 84: (1, 302), 85: (1, 302)},
  320: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 25), 93: (0, 109), 94: (0, 237), 95: (0, 504)},
  321: {74: (0, 256)},
  322: {66: (1, 127), 35: (1, 127), 68: (1, 127), 81: (1, 127), 73: (1, 127), 74: (1, 127), 83: (1, 127), 44: (1, 127), 18: (1, 127), 78: (1, 127), 24: (1, 127), 80: (1, 127), 17: (1, 127), 50: (1, 127), 19: (1, 127), 52: (1, 127), 21: (1, 127), 22: (1, 127), 41: (1, 127), 23: (1, 127), 20: (1, 127)},
  323: {96: (0, 14), 97: (0, 74), 98: (0, 536), 133: (0, 71), 135: (0, 190), 137: (0, 313), 138: (0, 92), 84: (0, 507), 85: (0, 408)},
  324: {23: (0, 64), 17: (1, 275), 18: (1, 275), 19: (1, 275), 20: (1, 275), 21: (1, 275), 22: (1, 275), 87: (0, 238), 24: (1, 275)},
  325: {83: (0, 358), 35: (1, 135), 68: (1, 135), 41: (0, 353), 74: (0, 470), 44: (0, 479), 50: (0, 96), 78: (1, 135), 17: (1, 135), 18: (1, 135), 19: (1, 135), 52: (0, 58), 21: (1, 135), 22: (1, 135), 23: (1, 135), 24: (1, 135), 153: (0, 436), 20: (1, 135)},
  326: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 80: (0, 295), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 302), 93: (0, 109), 94: (0, 237), 95: (0, 504), 101: (0, 537), 119: (0, 115), 120: (0, 377), 123: (0, 274), 124: (0, 98)},
  327: {2: (1, 143), 14: (1, 143), 13: (1, 143), 6: (1, 143)},
  328: {17: (1, 251), 18: (1, 251), 19: (1, 251), 20: (1, 251), 21: (1, 251), 22: (1, 251), 23: (1, 251), 24: (1, 251)},
  329: {17: (1, 220), 18: (1, 220), 19: (1, 220), 20: (1, 220), 21: (1, 220), 22: (1, 220), 23: (1, 220), 24: (1, 220)},
  330: {17: (1, 163), 18: (1, 163), 19: (1, 163), 20: (1, 163), 21: (1, 163), 22: (1, 163), 23: (1, 163), 24: (1, 163)},
  331: {17: (1, 326), 18: (1, 326), 19: (1, 326), 20: (1, 326), 21: (1, 326), 22: (1, 326), 23: (1, 326), 24: (1, 326), 35: (1, 326), 41: (1, 326), 44: (1, 326), 50: (1, 326), 52: (1, 326), 66: (1, 326), 68: (1, 326), 73: (1, 326), 74: (1, 326), 78: (1, 326), 80: (1, 326), 81: (1, 326), 83: (1, 326), 84: (1, 326), 85: (1, 326), 99: (1, 326)},
  332: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 80: (0, 295), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 302), 93: (0, 109), 94: (0, 237), 95: (0, 504), 101: (0, 537), 119: (0, 115), 120: (0, 241), 123: (0, 274)},
  333: {128: (1, 367), 1: (1, 367), 2: (1, 367), 3: (1, 367), 5: (1, 367), 6: (1, 367), 8: (1, 367), 9: (1, 367), 10: (1, 367), 11: (1, 367), 12: (1, 367), 13: (1, 367), 14: (1, 367), 15: (1, 367), 16: (1, 367), 17: (1, 367), 18: (1, 367), 19: (1, 367), 20: (1, 367), 21: (1, 367), 22: (1, 367), 23: (1, 367), 24: (1, 367), 34: (1, 367), 35: (1, 367), 36: (1, 367), 37: (1, 367), 38: (1, 367), 39: (1, 367), 40: (1, 367), 41: (1, 367), 42: (1, 367), 43: (1, 367), 44: (1, 367), 45: (1, 367), 46: (1, 367), 47: (1, 367), 48: (1, 367), 49: (1, 367), 50: (1, 367), 51: (1, 367), 52: (1, 367), 53: (1, 367), 54: (1, 367), 55: (1, 367), 56: (1, 367), 57: (1, 367), 58: (1, 367), 59: (1, 367), 60: (1, 367), 61: (1, 367), 62: (1, 367), 63: (1, 367), 64: (1, 367), 65: (1, 367), 66: (1, 367), 67: (1, 367), 68: (1, 367), 69: (1, 367), 70: (1, 367), 71: (1, 367), 72: (1, 367), 73: (1, 367), 74: (1, 367), 75: (1, 367), 76: (1, 367), 77: (1, 367), 78: (1, 367), 79: (1, 367), 80: (1, 367), 81: (1, 367), 82: (1, 367), 83: (1, 367)},
  334: {23: (0, 64), 17: (1, 272), 18: (1, 272), 19: (1, 272), 20: (1, 272), 21: (1, 272), 22: (1, 272), 87: (0, 7), 24: (1, 272)},
  335: {17: (1, 257), 18: (1, 257), 19: (1, 257), 20: (1, 257), 21: (1, 257), 22: (1, 257), 23: (1, 257), 24: (1, 257)},
  336: {24: (1, 313), 21: (1, 313), 22: (1, 313)},
  337: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 80: (0, 295), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 302), 93: (0, 109), 94: (0, 237), 95: (0, 504), 101: (0, 537), 118: (0, 257), 119: (0, 115), 120: (0, 377), 122: (0, 271), 123: (0, 274), 124: (0, 232), 127: (0, 184)},
  338: {50: (0, 191), 84: (1, 301), 85: (1, 301), 103: (0, 254)},
  339: {17: (1, 162), 18: (1, 162), 19: (1, 162), 20: (1, 162), 21: (1, 162), 22: (1, 162), 23: (1, 162), 24: (1, 162)},
  340: {50: (1, 134), 84: (1, 134), 85: (1, 134)},
  341: {50: (0, 204), 22: (0, 484), 151: (0, 172)},
  342: {83: (1, 374), 35: (1, 374), 68: (1, 374), 41: (1, 374), 74: (1, 374), 44: (1, 374), 50: (1, 374), 78: (1, 374), 17: (1, 374), 18: (1, 374), 19: (1, 374), 52: (1, 374), 21: (1, 374), 22: (1, 374), 23: (1, 374), 24: (1, 374), 20: (1, 374)},
  343: {17: (1, 261), 18: (1, 261), 19: (1, 261), 20: (1, 261), 21: (1, 261), 22: (1, 261), 23: (1, 261), 24: (1, 261)},
  344: {2: (1, 52), 3: (1, 52), 5: (1, 52), 6: (1, 52), 10: (1, 52), 13: (1, 52), 14: (1, 52), 17: (1, 52), 18: (1, 52), 19: (1, 52), 20: (1, 52), 21: (1, 52), 22: (1, 52), 23: (1, 52), 24: (1, 52), 34: (1, 52), 35: (1, 52), 36: (1, 52), 37: (1, 52), 38: (1, 52), 39: (1, 52), 40: (1, 52), 41: (1, 52), 42: (1, 52), 43: (1, 52), 44: (1, 52), 45: (1, 52), 46: (1, 52), 47: (1, 52), 48: (1, 52), 49: (1, 52), 50: (1, 52), 51: (1, 52), 52: (1, 52), 53: (1, 52), 54: (1, 52), 55: (1, 52), 56: (1, 52), 57: (1, 52), 58: (1, 52), 59: (1, 52), 60: (1, 52), 61: (1, 52), 62: (1, 52), 63: (1, 52), 64: (1, 52), 65: (1, 52), 66: (1, 52), 67: (1, 52), 68: (1, 52), 69: (1, 52), 70: (1, 52), 71: (1, 52), 72: (1, 52), 73: (1, 52), 74: (1, 52), 75: (1, 52), 76: (1, 52), 77: (1, 52), 78: (1, 52), 79: (1, 52), 80: (1, 52), 81: (1, 52), 82: (1, 52), 83: (1, 52)},
  345: {22: (0, 403)},
  346: {105: (0, 158), 13: (0, 226), 14: (0, 188)},
  347: {2: (1, 142), 14: (1, 142), 13: (1, 142), 6: (1, 142)},
  348: {22: (1, 255), 87: (0, 329), 78: (0, 121), 17: (1, 255), 18: (1, 255), 19: (1, 255), 20: (1, 255), 21: (1, 255), 86: (0, 77), 23: (0, 64), 24: (1, 255)},
  349: {84: (1, 297), 85: (1, 297)},
  350: {24: (1, 342), 21: (1, 342)},
  351: {66: (1, 119), 35: (1, 119), 68: (1, 119), 81: (1, 119), 73: (1, 119), 74: (1, 119), 83: (1, 119), 44: (1, 119), 18: (1, 119), 78: (1, 119), 24: (1, 119), 80: (1, 119), 17: (1, 119), 50: (1, 119), 19: (1, 119), 52: (1, 119), 21: (1, 119), 22: (1, 119), 41: (1, 119), 23: (1, 119), 20: (1, 119)},
  352: {22: (0, 258)},
  353: {74: (0, 23)},
  354: {105: (0, 59), 13: (0, 226), 14: (0, 243)},
  355: {2: (0, 513), 3: (0, 39), 6: (0, 107), 13: (0, 423), 17: (1, 126), 18: (1, 126), 19: (1, 126), 20: (1, 126), 21: (1, 126), 22: (1, 126), 23: (1, 126), 24: (1, 126), 25: (0, 447), 30: (0, 281), 35: (1, 126), 41: (1, 126), 44: (1, 126), 50: (1, 126), 52: (1, 126), 66: (1, 126), 68: (1, 126), 73: (1, 126), 74: (1, 126), 76: (0, 525), 78: (1, 126), 80: (1, 126), 81: (1, 126), 83: (1, 126), 107: (0, 48)},
  356: {17: (1, 170), 18: (1, 170), 19: (1, 170), 20: (1, 170), 21: (1, 170), 22: (1, 170), 23: (1, 170), 24: (1, 170)},
  357: {0: (1, 357), 1: (1, 357), 2: (1, 357), 3: (1, 357), 4: (1, 357), 101: (1, 357), 6: (1, 357), 7: (1, 357), 8: (1, 357), 9: (1, 357), 10: (1, 357), 11: (1, 357), 12: (1, 357), 13: (1, 357), 14: (1, 357), 15: (1, 357), 80: (1, 357), 16: (1, 357), 5: (1, 357)},
  358: {74: (0, 327)},
  359: {76: (0, 512)},
  360: {17: (1, 325), 18: (1, 325), 19: (1, 325), 20: (1, 325), 21: (1, 325), 22: (1, 325), 23: (1, 325), 24: (1, 325), 35: (1, 325), 41: (1, 325), 44: (1, 325), 50: (1, 325), 52: (1, 325), 66: (1, 325), 68: (1, 325), 73: (1, 325), 74: (1, 325), 78: (1, 325), 80: (1, 325), 81: (1, 325), 83: (1, 325), 84: (1, 325), 85: (1, 325), 99: (1, 325)},
  361: {23: (0, 64), 17: (1, 229), 18: (1, 229), 19: (1, 229), 20: (1, 229), 21: (1, 229), 22: (1, 229), 87: (0, 306), 24: (1, 229)},
  362: {133: (1, 345), 141: (1, 345), 84: (1, 345), 85: (1, 345), 24: (1, 345), 21: (1, 345)},
  363: {50: (0, 19), 22: (1, 100)},
  364: {23: (0, 64), 17: (1, 195), 18: (1, 195), 19: (1, 195), 20: (1, 195), 21: (1, 195), 22: (1, 195), 87: (0, 140), 24: (1, 195)},
  365: {47: (0, 207), 62: (0, 460), 71: (0, 541)},
  366: {22: (1, 192), 23: (0, 64), 78: (0, 121), 17: (1, 192), 18: (1, 192), 19: (1, 192), 20: (1, 192), 21: (1, 192), 86: (0, 531), 87: (0, 311), 24: (1, 192)},
  367: {17: (1, 216), 18: (1, 216), 19: (1, 216), 20: (1, 216), 21: (1, 216), 22: (1, 216), 23: (1, 216), 24: (1, 216)},
  368: {2: (1, 25), 3: (1, 25), 6: (1, 25), 13: (1, 25), 17: (1, 25), 18: (1, 25), 19: (1, 25), 20: (1, 25), 21: (1, 25), 22: (1, 25), 23: (1, 25), 24: (1, 25), 34: (1, 25), 35: (1, 25), 36: (1, 25), 41: (1, 25), 44: (1, 25), 47: (1, 25), 49: (1, 25), 50: (1, 25), 52: (1, 25), 62: (1, 25), 68: (1, 25), 69: (1, 25), 71: (1, 25), 72: (1, 25), 74: (1, 25), 76: (1, 25), 78: (1, 25), 79: (1, 25), 82: (1, 25), 83: (1, 25)},
  369: {32: (0, 4), 1: (0, 28), 2: (0, 513), 3: (0, 39), 6: (0, 107), 8: (0, 82), 9: (0, 298), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 89: (0, 186), 88: (0, 126), 25: (0, 461), 90: (0, 456), 26: (0, 488), 30: (0, 459), 31: (0, 430)},
  370: {50: (0, 398), 154: (0, 363), 22: (1, 99)},
  371: {2: (1, 20), 3: (1, 20), 6: (1, 20), 13: (1, 20), 17: (1, 20), 18: (1, 20), 19: (1, 20), 20: (1, 20), 21: (1, 20), 22: (1, 20), 23: (1, 20), 24: (1, 20), 34: (1, 20), 35: (1, 20), 36: (1, 20), 41: (1, 20), 44: (1, 20), 47: (1, 20), 49: (1, 20), 50: (1, 20), 52: (1, 20), 62: (1, 20), 68: (1, 20), 69: (1, 20), 71: (1, 20), 72: (1, 20), 74: (1, 20), 76: (1, 20), 78: (1, 20), 79: (1, 20), 82: (1, 20), 83: (1, 20)},
  372: {22: (0, 179)},
  373: {133: (1, 344), 141: (1, 344), 84: (1, 344), 85: (1, 344), 24: (1, 344), 21: (1, 344)},
  374: {23: (0, 64), 17: (1, 189), 18: (1, 189), 19: (1, 189), 20: (1, 189), 21: (1, 189), 22: (1, 189), 87: (0, 267), 24: (1, 189)},
  375: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 80: (0, 295), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 302), 93: (0, 109), 94: (0, 237), 95: (0, 504), 101: (0, 537), 118: (0, 257), 119: (0, 115), 120: (0, 377), 122: (0, 118), 123: (0, 274), 124: (0, 232)},
  376: {23: (0, 64), 17: (1, 177), 18: (1, 177), 19: (1, 177), 20: (1, 177), 21: (1, 177), 22: (1, 177), 87: (0, 263), 24: (1, 177)},
  377: {2: (1, 11), 3: (1, 11), 6: (1, 11), 13: (1, 11), 17: (1, 11), 18: (1, 11), 19: (1, 11), 20: (1, 11), 21: (1, 11), 22: (1, 11), 23: (1, 11), 24: (1, 11), 155: (0, 161), 34: (1, 11), 35: (1, 11), 36: (1, 11), 41: (1, 11), 44: (1, 11), 47: (1, 11), 49: (1, 11), 50: (1, 11), 52: (1, 11), 62: (1, 11), 68: (1, 11), 69: (1, 11), 71: (1, 11), 72: (0, 332), 74: (1, 11), 76: (1, 11), 78: (1, 11), 79: (1, 11), 82: (1, 11), 83: (1, 11)},
  378: {17: (1, 210), 18: (1, 210), 19: (1, 210), 20: (1, 210), 21: (1, 210), 22: (1, 210), 23: (1, 210), 24: (1, 210)},
  379: {2: (1, 51), 3: (1, 51), 5: (1, 51), 6: (1, 51), 10: (1, 51), 13: (1, 51), 17: (1, 51), 18: (1, 51), 19: (1, 51), 20: (1, 51), 21: (1, 51), 22: (1, 51), 23: (1, 51), 24: (1, 51), 34: (1, 51), 35: (1, 51), 36: (1, 51), 37: (1, 51), 38: (1, 51), 39: (1, 51), 40: (1, 51), 41: (1, 51), 42: (1, 51), 43: (1, 51), 44: (1, 51), 45: (1, 51), 46: (1, 51), 47: (1, 51), 48: (1, 51), 49: (1, 51), 50: (1, 51), 51: (1, 51), 52: (1, 51), 53: (1, 51), 54: (1, 51), 55: (1, 51), 56: (1, 51), 57: (1, 51), 58: (1, 51), 59: (1, 51), 60: (1, 51), 61: (1, 51), 62: (1, 51), 63: (1, 51), 64: (1, 51), 65: (1, 51), 67: (1, 51), 68: (1, 51), 69: (1, 51), 70: (1, 51), 71: (1, 51), 72: (1, 51), 74: (1, 51), 75: (1, 51), 76: (1, 51), 77: (1, 51), 78: (1, 51), 79: (1, 51), 80: (1, 51), 82: (1, 51), 83: (1, 51)},
  380: {1: (1, 388), 2: (1, 388), 3: (1, 388), 100: (1, 388), 6: (1, 388), 8: (1, 388), 9: (1, 388), 11: (1, 388), 12: (1, 388), 13: (1, 388), 15: (1, 388), 16: (1, 388), 50: (1, 388)},
  381: {17: (1, 211), 18: (1, 211), 19: (1, 211), 20: (1, 211), 21: (1, 211), 22: (1, 211), 23: (1, 211), 24: (1, 211)},
  382: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 80: (0, 295), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 302), 93: (0, 109), 94: (0, 237), 95: (0, 504), 101: (0, 537), 118: (0, 257), 119: (0, 115), 120: (0, 377), 122: (0, 239), 123: (0, 274), 124: (0, 232)},
  383: {23: (0, 64), 17: (1, 274), 18: (1, 274), 19: (1, 274), 20: (1, 274), 21: (1, 274), 22: (1, 274), 87: (0, 339), 24: (1, 274)},
  384: {37: (0, 293)},
  385: {35: (0, 438), 68: (0, 194), 22: (1, 203), 102: (0, 545), 142: (0, 482), 23: (0, 64), 78: (0, 121), 17: (1, 203), 18: (1, 203), 19: (1, 203), 20: (1, 203), 21: (1, 203), 86: (0, 428), 87: (0, 103), 24: (1, 203)},
  386: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 60), 93: (0, 109), 94: (0, 237), 95: (0, 504)},
  387: {83: (1, 114), 35: (1, 114), 68: (1, 114), 81: (1, 114), 73: (1, 114), 74: (1, 114), 23: (1, 114), 44: (1, 114), 50: (1, 114), 78: (1, 114), 17: (1, 114), 18: (1, 114), 19: (1, 114), 52: (1, 114), 21: (1, 114), 22: (1, 114), 41: (1, 114), 24: (1, 114), 20: (1, 114)},
  388: {17: (0, 282), 18: (0, 349), 19: (1, 294), 20: (0, 394), 21: (1, 294), 22: (1, 294), 23: (1, 294), 24: (1, 294), 156: (0, 288)},
  389: {17: (1, 271), 18: (1, 271), 19: (1, 271), 20: (1, 271), 21: (1, 271), 22: (1, 271), 23: (1, 271), 24: (1, 271)},
  390: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 145: (0, 228), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 61: (0, 466), 80: (0, 295), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 302), 93: (0, 109), 94: (0, 237), 95: (0, 504), 101: (0, 537), 118: (0, 257), 119: (0, 115), 120: (0, 377), 122: (0, 80), 123: (0, 274), 124: (0, 232)},
  391: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 80: (0, 295), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 302), 93: (0, 109), 94: (0, 237), 95: (0, 504), 101: (0, 537), 118: (0, 257), 119: (0, 115), 120: (0, 377), 122: (0, 230), 123: (0, 274), 124: (0, 232)},
  392: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 229), 93: (0, 109), 94: (0, 237), 95: (0, 504)},
  393: {36: (0, 166)},
  394: {84: (1, 299), 85: (1, 299)},
  395: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 80: (0, 295), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 302), 93: (0, 109), 94: (0, 237), 95: (0, 504), 101: (0, 537), 119: (0, 115), 120: (0, 471), 123: (0, 274)},
  396: {1: (1, 337), 2: (1, 337), 3: (1, 337), 6: (1, 337), 8: (1, 337), 9: (1, 337), 11: (1, 337), 12: (1, 337), 13: (1, 337), 15: (1, 337), 16: (1, 337), 17: (1, 337), 18: (1, 337), 19: (1, 337), 20: (1, 337), 21: (1, 337), 22: (1, 337), 23: (1, 337), 24: (1, 337), 35: (1, 337), 41: (1, 337), 44: (1, 337), 50: (1, 337), 52: (1, 337), 66: (1, 337), 68: (1, 337), 73: (1, 337), 74: (1, 337), 78: (1, 337), 80: (1, 337), 81: (1, 337), 83: (1, 337), 84: (1, 337), 85: (1, 337), 99: (1, 337), 100: (1, 337)},
  397: {24: (1, 319), 126: (0, 248), 19: (0, 113), 21: (1, 319), 22: (1, 319)},
  398: {25: (0, 492), 2: (0, 513), 13: (0, 423), 6: (0, 107)},
  399: {2: (1, 60), 3: (1, 60), 5: (1, 60), 6: (1, 60), 10: (1, 60), 13: (1, 60), 14: (1, 60), 17: (1, 60), 18: (1, 60), 19: (1, 60), 20: (1, 60), 21: (1, 60), 22: (1, 60), 23: (1, 60), 24: (1, 60), 34: (1, 60), 35: (1, 60), 36: (1, 60), 37: (1, 60), 38: (1, 60), 39: (1, 60), 40: (1, 60), 41: (1, 60), 42: (1, 60), 43: (1, 60), 44: (1, 60), 45: (1, 60), 46: (1, 60), 47: (1, 60), 48: (1, 60), 49: (1, 60), 50: (1, 60), 51: (1, 60), 52: (1, 60), 53: (1, 60), 54: (1, 60), 55: (1, 60), 56: (1, 60), 57: (1, 60), 58: (1, 60), 59: (1, 60), 60: (1, 60), 61: (1, 60), 62: (1, 60), 63: (1, 60), 64: (1, 60), 65: (1, 60), 66: (1, 60), 67: (1, 60), 68: (1, 60), 69: (1, 60), 70: (1, 60), 71: (1, 60), 72: (1, 60), 73: (1, 60), 74: (1, 60), 75: (1, 60), 76: (1, 60), 77: (1, 60), 78: (1, 60), 79: (1, 60), 80: (1, 60), 81: (1, 60), 82: (1, 60), 83: (1, 60)},
  400: {1: (1, 103), 2: (1, 103), 3: (1, 103), 5: (1, 103), 6: (1, 103), 8: (1, 103), 9: (1, 103), 10: (1, 103), 11: (1, 103), 12: (1, 103), 13: (1, 103), 14: (1, 103), 15: (1, 103), 16: (1, 103), 17: (1, 103), 18: (1, 103), 19: (1, 103), 20: (1, 103), 21: (1, 103), 22: (1, 103), 23: (1, 103), 24: (1, 103), 34: (1, 103), 35: (1, 103), 36: (1, 103), 37: (1, 103), 38: (1, 103), 39: (1, 103), 40: (1, 103), 41: (1, 103), 42: (1, 103), 43: (1, 103), 44: (1, 103), 45: (1, 103), 46: (1, 103), 47: (1, 103), 48: (1, 103), 49: (1, 103), 50: (1, 103), 51: (1, 103), 52: (1, 103), 53: (1, 103), 54: (1, 103), 55: (1, 103), 56: (1, 103), 57: (1, 103), 58: (1, 103), 59: (1, 103), 60: (1, 103), 61: (1, 103), 62: (1, 103), 63: (1, 103), 64: (1, 103), 65: (1, 103), 66: (1, 103), 67: (1, 103), 68: (1, 103), 69: (1, 103), 70: (1, 103), 71: (1, 103), 72: (1, 103), 73: (1, 103), 74: (1, 103), 75: (1, 103), 76: (1, 103), 77: (1, 103), 78: (1, 103), 79: (1, 103), 80: (1, 103), 81: (1, 103), 82: (1, 103), 83: (1, 103), 100: (1, 103)},
  401: {22: (1, 270), 87: (0, 487), 78: (0, 121), 17: (1, 270), 18: (1, 270), 19: (1, 270), 20: (1, 270), 21: (1, 270), 86: (0, 364), 23: (0, 64), 24: (1, 270)},
  402: {17: (1, 217), 18: (1, 217), 19: (1, 217), 20: (1, 217), 21: (1, 217), 22: (1, 217), 23: (1, 217), 24: (1, 217)},
  403: {50: (1, 133), 84: (1, 133), 85: (1, 133)},
  404: {128: (1, 366), 1: (1, 366), 2: (1, 366), 3: (1, 366), 5: (1, 366), 6: (1, 366), 8: (1, 366), 9: (1, 366), 10: (1, 366), 11: (1, 366), 12: (1, 366), 13: (1, 366), 14: (1, 366), 15: (1, 366), 16: (1, 366), 17: (1, 366), 18: (1, 366), 19: (1, 366), 20: (1, 366), 21: (1, 366), 22: (1, 366), 23: (1, 366), 24: (1, 366), 34: (1, 366), 35: (1, 366), 36: (1, 366), 37: (1, 366), 38: (1, 366), 39: (1, 366), 40: (1, 366), 41: (1, 366), 42: (1, 366), 43: (1, 366), 44: (1, 366), 45: (1, 366), 46: (1, 366), 47: (1, 366), 48: (1, 366), 49: (1, 366), 50: (1, 366), 51: (1, 366), 52: (1, 366), 53: (1, 366), 54: (1, 366), 55: (1, 366), 56: (1, 366), 57: (1, 366), 58: (1, 366), 59: (1, 366), 60: (1, 366), 61: (1, 366), 62: (1, 366), 63: (1, 366), 64: (1, 366), 65: (1, 366), 66: (1, 366), 67: (1, 366), 68: (1, 366), 69: (1, 366), 70: (1, 366), 71: (1, 366), 72: (1, 366), 73: (1, 366), 74: (1, 366), 75: (1, 366), 76: (1, 366), 77: (1, 366), 78: (1, 366), 79: (1, 366), 80: (1, 366), 81: (1, 366), 82: (1, 366), 83: (1, 366)},
  405: {50: (0, 454), 22: (0, 468)},
  406: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 80: (0, 295), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 302), 93: (0, 109), 94: (0, 237), 95: (0, 504), 101: (0, 537), 118: (0, 257), 119: (0, 115), 120: (0, 377), 122: (0, 359), 123: (0, 274), 124: (0, 232)},
  407: {14: (0, 110)},
  408: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 145: (0, 424), 152: (0, 203), 25: (0, 461), 26: (0, 488), 157: (0, 390), 30: (0, 459), 31: (0, 430), 32: (0, 4), 134: (0, 33), 61: (0, 466), 80: (0, 295), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 302), 93: (0, 109), 94: (0, 237), 95: (0, 504), 101: (0, 537), 118: (0, 257), 119: (0, 115), 120: (0, 377), 122: (0, 80), 123: (0, 274), 124: (0, 232)},
  409: {14: (0, 54), 22: (1, 65)},
  410: {23: (0, 64), 17: (1, 186), 18: (1, 186), 19: (1, 186), 20: (1, 186), 21: (1, 186), 22: (1, 186), 87: (0, 31), 24: (1, 186)},
  411: {32: (0, 47), 1: (0, 28), 2: (0, 513), 3: (0, 39), 100: (0, 360), 6: (0, 107), 8: (0, 82), 9: (0, 298), 11: (0, 168), 12: (0, 400), 13: (0, 530), 15: (0, 89), 16: (0, 279), 50: (0, 544), 115: (0, 148), 116: (0, 231), 25: (0, 285), 26: (0, 488), 30: (0, 459), 31: (0, 493)},
  412: {96: (0, 14), 97: (0, 74), 98: (0, 536), 133: (0, 71), 135: (0, 189), 137: (0, 313), 138: (0, 92), 139: (0, 196), 140: (0, 5), 141: (0, 114), 84: (0, 507), 21: (0, 362), 24: (1, 348), 85: (0, 408)},
  413: {2: (0, 513), 3: (0, 39), 6: (0, 107), 13: (0, 423), 25: (0, 453), 30: (0, 478)},
  414: {50: (1, 377), 17: (1, 377), 18: (1, 377), 19: (1, 377), 20: (1, 377), 21: (1, 377), 22: (1, 377), 23: (1, 377), 24: (1, 377)},
  415: {22: (1, 187), 87: (0, 419), 78: (0, 121), 17: (1, 187), 18: (1, 187), 19: (1, 187), 20: (1, 187), 21: (1, 187), 86: (0, 410), 23: (0, 64), 24: (1, 187)},
  416: {23: (0, 64), 17: (1, 284), 18: (1, 284), 19: (1, 284), 20: (1, 284), 21: (1, 284), 22: (1, 284), 87: (0, 418), 24: (1, 284)},
  417: {17: (1, 240), 18: (1, 240), 19: (1, 240), 20: (1, 240), 21: (1, 240), 22: (1, 240), 23: (1, 240), 24: (1, 240)},
  418: {17: (1, 253), 18: (1, 253), 19: (1, 253), 20: (1, 253), 21: (1, 253), 22: (1, 253), 23: (1, 253), 24: (1, 253)},
  419: {17: (1, 165), 18: (1, 165), 19: (1, 165), 20: (1, 165), 21: (1, 165), 22: (1, 165), 23: (1, 165), 24: (1, 165)},
  420: {35: (1, 150), 68: (1, 150), 69: (1, 150), 50: (1, 150), 78: (1, 150), 17: (1, 150), 18: (1, 150), 19: (1, 150), 20: (1, 150), 21: (1, 150), 22: (1, 150), 23: (1, 150), 24: (1, 150)},
  421: {2: (1, 57), 3: (1, 57), 5: (1, 57), 6: (1, 57), 10: (1, 57), 13: (1, 57), 14: (1, 57), 17: (1, 57), 18: (1, 57), 19: (1, 57), 20: (1, 57), 21: (1, 57), 22: (1, 57), 23: (1, 57), 24: (1, 57), 34: (1, 57), 35: (1, 57), 36: (1, 57), 37: (1, 57), 38: (1, 57), 39: (1, 57), 40: (1, 57), 41: (1, 57), 42: (1, 57), 43: (1, 57), 44: (1, 57), 45: (1, 57), 46: (1, 57), 47: (1, 57), 48: (1, 57), 49: (1, 57), 50: (1, 57), 51: (1, 57), 52: (1, 57), 53: (1, 57), 54: (1, 57), 55: (1, 57), 56: (1, 57), 57: (1, 57), 58: (1, 57), 59: (1, 57), 60: (1, 57), 61: (1, 57), 62: (1, 57), 63: (1, 57), 64: (1, 57), 65: (1, 57), 66: (1, 57), 67: (1, 57), 68: (1, 57), 69: (1, 57), 70: (1, 57), 71: (1, 57), 72: (1, 57), 73: (1, 57), 74: (1, 57), 75: (1, 57), 76: (1, 57), 77: (1, 57), 78: (1, 57), 79: (1, 57), 80: (1, 57), 81: (1, 57), 82: (1, 57), 83: (1, 57)},
  422: {22: (0, 309)},
  423: {128: (1, 320), 1: (1, 320), 2: (1, 320), 3: (1, 320), 5: (1, 320), 6: (1, 320), 8: (1, 320), 9: (1, 320), 10: (1, 320), 11: (1, 320), 12: (1, 320), 13: (1, 320), 14: (1, 320), 15: (1, 320), 16: (1, 320), 17: (1, 320), 18: (1, 320), 19: (1, 320), 20: (1, 320), 21: (1, 320), 22: (1, 320), 23: (1, 320), 24: (1, 320), 34: (1, 320), 35: (1, 320), 36: (1, 320), 37: (1, 320), 38: (1, 320), 39: (1, 320), 40: (1, 320), 41: (1, 320), 42: (1, 320), 43: (1, 320), 44: (1, 320), 45: (1, 320), 46: (1, 320), 47: (1, 320), 48: (1, 320), 49: (1, 320), 50: (1, 320), 51: (1, 320), 52: (1, 320), 53: (1, 320), 54: (1, 320), 55: (1, 320), 56: (1, 320), 57: (1, 320), 58: (1, 320), 59: (1, 320), 60: (1, 320), 61: (1, 320), 62: (1, 320), 63: (1, 320), 64: (1, 320), 65: (1, 320), 66: (1, 320), 67: (1, 320), 68: (1, 320), 69: (1, 320), 70: (1, 320), 71: (1, 320), 72: (1, 320), 73: (1, 320), 74: (1, 320), 75: (1, 320), 76: (1, 320), 77: (1, 320), 78: (1, 320), 79: (1, 320), 80: (1, 320), 81: (1, 320), 82: (1, 320), 83: (1, 320), 100: (1, 320)},
  424: {35: (0, 438), 68: (0, 194), 69: (0, 255), 102: (0, 250), 142: (0, 34), 23: (0, 64), 50: (0, 180), 78: (0, 121), 144: (0, 385), 17: (1, 238), 18: (1, 238), 19: (1, 238), 148: (0, 160), 21: (1, 238), 86: (0, 314), 87: (0, 2), 24: (1, 238), 20: (1, 238), 22: (1, 238)},
  425: {2: (1, 26), 3: (1, 26), 6: (1, 26), 13: (1, 26), 17: (1, 26), 18: (1, 26), 19: (1, 26), 20: (1, 26), 21: (1, 26), 22: (1, 26), 23: (1, 26), 24: (1, 26), 34: (1, 26), 35: (1, 26), 36: (1, 26), 41: (1, 26), 44: (1, 26), 47: (1, 26), 49: (1, 26), 50: (1, 26), 52: (1, 26), 62: (1, 26), 68: (1, 26), 69: (1, 26), 71: (1, 26), 72: (1, 26), 74: (1, 26), 76: (1, 26), 78: (1, 26), 79: (1, 26), 82: (1, 26), 83: (1, 26)},
  426: {24: (1, 312), 21: (1, 312), 22: (1, 312)},
  427: {2: (0, 513), 3: (0, 39), 6: (0, 107), 107: (0, 351), 13: (0, 423), 25: (0, 447), 30: (0, 281)},
  428: {23: (0, 64), 17: (1, 190), 18: (1, 190), 19: (1, 190), 20: (1, 190), 21: (1, 190), 22: (1, 190), 87: (0, 122), 24: (1, 190)},
  429: {47: (1, 363), 62: (1, 363), 71: (1, 363)},
  430: {2: (1, 61), 3: (1, 61), 5: (1, 61), 6: (1, 61), 10: (1, 61), 13: (1, 61), 14: (1, 61), 17: (1, 61), 18: (1, 61), 19: (1, 61), 20: (1, 61), 21: (1, 61), 22: (1, 61), 23: (1, 61), 24: (1, 61), 34: (1, 61), 35: (1, 61), 36: (1, 61), 37: (1, 61), 38: (1, 61), 39: (1, 61), 40: (1, 61), 41: (1, 61), 42: (1, 61), 43: (1, 61), 44: (1, 61), 45: (1, 61), 46: (1, 61), 47: (1, 61), 48: (1, 61), 49: (1, 61), 50: (1, 61), 51: (1, 61), 52: (1, 61), 53: (1, 61), 54: (1, 61), 55: (1, 61), 56: (1, 61), 57: (1, 61), 58: (1, 61), 59: (1, 61), 60: (1, 61), 61: (1, 61), 62: (1, 61), 63: (1, 61), 64: (1, 61), 65: (1, 61), 66: (1, 61), 67: (1, 61), 68: (1, 61), 69: (1, 61), 70: (1, 61), 71: (1, 61), 72: (1, 61), 73: (1, 61), 74: (1, 61), 75: (1, 61), 76: (1, 61), 77: (1, 61), 78: (1, 61), 79: (1, 61), 80: (1, 61), 81: (1, 61), 82: (1, 61), 83: (1, 61)},
  431: {0: (1, 88), 1: (1, 88), 2: (1, 88), 3: (1, 88), 4: (1, 88), 5: (1, 88), 6: (1, 88), 7: (1, 88), 8: (1, 88), 9: (1, 88), 10: (1, 88), 11: (1, 88), 12: (1, 88), 13: (1, 88), 14: (1, 88), 15: (1, 88), 16: (1, 88)},
  432: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 440), 93: (0, 109), 94: (0, 237), 95: (0, 504)},
  433: {50: (0, 307), 22: (0, 421)},
  434: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 93: (0, 446), 94: (0, 237), 95: (0, 504)},
  435: {2: (1, 48), 3: (1, 48), 5: (1, 48), 6: (1, 48), 10: (1, 48), 13: (1, 48), 17: (1, 48), 18: (1, 48), 19: (1, 48), 20: (1, 48), 21: (1, 48), 22: (1, 48), 23: (1, 48), 24: (1, 48), 34: (1, 48), 35: (1, 48), 36: (1, 48), 37: (1, 48), 38: (1, 48), 39: (1, 48), 40: (1, 48), 41: (1, 48), 42: (1, 48), 43: (1, 48), 44: (1, 48), 45: (1, 48), 46: (1, 48), 47: (1, 48), 48: (1, 48), 49: (1, 48), 50: (1, 48), 51: (1, 48), 52: (1, 48), 53: (1, 48), 54: (1, 48), 55: (1, 48), 56: (1, 48), 57: (1, 48), 58: (1, 48), 59: (1, 48), 60: (1, 48), 61: (1, 48), 62: (1, 48), 63: (1, 48), 64: (1, 48), 65: (1, 48), 67: (1, 48), 68: (1, 48), 69: (1, 48), 70: (1, 48), 71: (1, 48), 72: (1, 48), 74: (1, 48), 75: (1, 48), 76: (1, 48), 77: (1, 48), 78: (1, 48), 79: (1, 48), 80: (1, 48), 82: (1, 48), 83: (1, 48)},
  436: {2: (0, 513), 6: (0, 107), 104: (0, 543), 105: (0, 474), 106: (0, 165), 13: (0, 495), 14: (0, 221), 89: (0, 151), 25: (0, 461)},
  437: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 268), 93: (0, 109), 94: (0, 237), 95: (0, 504)},
  438: {112: (0, 75)},
  439: {71: (0, 379)},
  440: {2: (1, 17), 3: (1, 17), 6: (1, 17), 13: (1, 17), 17: (1, 17), 18: (1, 17), 19: (1, 17), 20: (1, 17), 21: (1, 17), 22: (1, 17), 23: (1, 17), 24: (1, 17), 34: (1, 17), 35: (1, 17), 36: (1, 17), 41: (1, 17), 44: (1, 17), 47: (1, 17), 49: (1, 17), 50: (1, 17), 52: (1, 17), 62: (1, 17), 68: (1, 17), 69: (1, 17), 71: (1, 17), 72: (1, 17), 74: (1, 17), 76: (1, 17), 78: (1, 17), 79: (1, 17), 82: (1, 17), 83: (1, 17)},
  441: {2: (1, 30), 3: (1, 30), 6: (1, 30), 13: (1, 30), 17: (1, 30), 18: (1, 30), 19: (1, 30), 20: (1, 30), 21: (1, 30), 22: (1, 30), 23: (1, 30), 24: (1, 30), 34: (1, 30), 35: (1, 30), 36: (1, 30), 41: (1, 30), 44: (1, 30), 47: (1, 30), 49: (1, 30), 50: (1, 30), 52: (1, 30), 62: (1, 30), 68: (1, 30), 69: (1, 30), 71: (1, 30), 72: (1, 30), 74: (1, 30), 76: (1, 30), 78: (1, 30), 79: (1, 30), 82: (1, 30), 83: (1, 30)},
  442: {24: (1, 316), 21: (1, 316), 22: (1, 316)},
  443: {50: (0, 391), 78: (1, 7), 17: (1, 7), 18: (1, 7), 19: (1, 7), 20: (1, 7), 21: (1, 7), 22: (1, 7), 23: (1, 7), 24: (1, 7), 158: (0, 144)},
  444: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 136: (0, 249), 80: (0, 295), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 302), 93: (0, 109), 94: (0, 237), 95: (0, 504), 101: (0, 537), 118: (0, 257), 119: (0, 115), 120: (0, 377), 122: (0, 17), 123: (0, 274), 124: (0, 232)},
  445: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 80: (0, 295), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 302), 93: (0, 109), 94: (0, 237), 95: (0, 504), 101: (0, 537), 118: (0, 257), 119: (0, 115), 120: (0, 377), 122: (0, 271), 123: (0, 274), 124: (0, 232), 127: (0, 294)},
  446: {2: (1, 358), 3: (1, 358), 5: (1, 358), 6: (1, 358), 10: (1, 358), 13: (1, 358), 17: (1, 358), 18: (1, 358), 19: (1, 358), 20: (1, 358), 21: (1, 358), 22: (1, 358), 23: (1, 358), 24: (1, 358), 34: (1, 358), 35: (1, 358), 36: (1, 358), 37: (1, 358), 38: (1, 358), 39: (1, 358), 40: (1, 358), 41: (1, 358), 42: (1, 358), 43: (1, 358), 44: (1, 358), 45: (1, 358), 46: (1, 358), 47: (1, 358), 48: (1, 358), 49: (1, 358), 50: (1, 358), 51: (1, 358), 52: (1, 358), 53: (1, 358), 54: (1, 358), 55: (1, 358), 56: (1, 358), 57: (1, 358), 58: (1, 358), 59: (1, 358), 60: (1, 358), 61: (1, 358), 62: (1, 358), 63: (1, 358), 64: (1, 358), 65: (1, 358), 67: (1, 358), 68: (1, 358), 69: (1, 358), 70: (1, 358), 71: (1, 358), 72: (1, 358), 74: (1, 358), 75: (1, 358), 76: (1, 358), 77: (0, 169), 78: (1, 358), 79: (1, 358), 80: (1, 358), 82: (1, 358), 83: (1, 358)},
  447: {1: (0, 28), 2: (0, 513), 3: (0, 39), 6: (0, 107), 8: (0, 82), 9: (0, 298), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 17: (1, 92), 18: (1, 92), 19: (1, 92), 20: (1, 92), 21: (1, 92), 22: (1, 92), 23: (1, 92), 24: (1, 92), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 35: (1, 92), 41: (1, 92), 44: (1, 92), 50: (1, 92), 52: (1, 92), 66: (1, 92), 68: (1, 92), 73: (1, 92), 74: (1, 92), 76: (1, 92), 78: (1, 92), 80: (1, 92), 81: (1, 92), 83: (1, 92), 88: (0, 126), 89: (0, 186), 90: (0, 316)},
  448: {17: (1, 205), 18: (1, 205), 19: (1, 205), 20: (1, 205), 21: (1, 205), 22: (1, 205), 23: (1, 205), 24: (1, 205)},
  449: {50: (1, 307), 17: (1, 307), 18: (1, 307), 19: (1, 307), 20: (1, 307), 21: (1, 307), 22: (1, 307), 23: (1, 307), 24: (1, 307)},
  450: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 43), 93: (0, 109), 94: (0, 237), 95: (0, 504)},
  451: {2: (0, 513), 3: (0, 39), 6: (0, 107), 107: (0, 462), 13: (0, 423), 25: (0, 447), 30: (0, 281)},
  452: {1: (1, 339), 2: (1, 339), 3: (1, 339), 6: (1, 339), 8: (1, 339), 9: (1, 339), 11: (1, 339), 12: (1, 339), 13: (1, 339), 15: (1, 339), 16: (1, 339), 17: (1, 339), 18: (1, 339), 19: (1, 339), 20: (1, 339), 21: (1, 339), 22: (1, 339), 23: (1, 339), 24: (1, 339), 35: (1, 339), 41: (1, 339), 44: (1, 339), 50: (1, 339), 52: (1, 339), 66: (1, 339), 68: (1, 339), 73: (1, 339), 74: (1, 339), 78: (1, 339), 80: (1, 339), 81: (1, 339), 83: (1, 339), 84: (1, 339), 85: (1, 339), 99: (1, 339), 100: (1, 339)},
  453: {35: (1, 151), 68: (1, 151), 69: (1, 151), 50: (1, 151), 78: (1, 151), 17: (1, 151), 18: (1, 151), 19: (1, 151), 20: (1, 151), 21: (1, 151), 22: (1, 151), 23: (1, 151), 24: (1, 151)},
  454: {8: (0, 82), 26: (0, 260)},
  455: {50: (0, 187), 17: (1, 158), 18: (1, 158), 19: (1, 158), 20: (1, 158), 21: (1, 158), 22: (1, 158), 23: (1, 158), 24: (1, 158), 159: (0, 519)},
  456: {50: (1, 376), 17: (1, 376), 18: (1, 376), 19: (1, 376), 20: (1, 376), 21: (1, 376), 22: (1, 376), 23: (1, 376), 24: (1, 376)},
  457: {0: (1, 76), 1: (1, 76), 2: (1, 76), 3: (1, 76), 4: (1, 76), 5: (1, 76), 6: (1, 76), 7: (1, 76), 8: (1, 76), 9: (1, 76), 10: (1, 76), 11: (1, 76), 12: (1, 76), 13: (1, 76), 14: (1, 76), 15: (1, 76), 16: (1, 76)},
  458: {13: (0, 61)},
  459: {1: (1, 109), 2: (1, 109), 3: (1, 109), 5: (1, 109), 6: (1, 109), 8: (1, 109), 9: (1, 109), 10: (1, 109), 11: (1, 109), 12: (1, 109), 13: (1, 109), 14: (1, 109), 15: (1, 109), 16: (1, 109), 17: (1, 109), 18: (1, 109), 19: (1, 109), 20: (1, 109), 21: (1, 109), 22: (1, 109), 23: (1, 109), 24: (1, 109), 34: (1, 109), 35: (1, 109), 36: (1, 109), 37: (1, 109), 38: (1, 109), 39: (1, 109), 40: (1, 109), 41: (1, 109), 42: (1, 109), 43: (1, 109), 44: (1, 109), 45: (1, 109), 46: (1, 109), 47: (1, 109), 48: (1, 109), 49: (1, 109), 50: (1, 109), 51: (1, 109), 52: (1, 109), 53: (1, 109), 54: (1, 109), 55: (1, 109), 56: (1, 109), 57: (1, 109), 58: (1, 109), 59: (1, 109), 60: (1, 109), 61: (1, 109), 62: (1, 109), 63: (1, 109), 64: (1, 109), 65: (1, 109), 66: (1, 109), 67: (1, 109), 68: (1, 109), 69: (1, 109), 70: (1, 109), 71: (1, 109), 72: (1, 109), 73: (1, 109), 74: (1, 109), 75: (1, 109), 76: (1, 109), 77: (1, 109), 78: (1, 109), 79: (1, 109), 80: (1, 109), 81: (1, 109), 82: (1, 109), 83: (1, 109), 100: (1, 109)},
  460: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 80: (0, 295), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 302), 93: (0, 109), 94: (0, 237), 95: (0, 504), 101: (0, 537), 118: (0, 257), 119: (0, 115), 120: (0, 377), 122: (0, 439), 123: (0, 274), 124: (0, 232)},
  461: {128: (0, 318), 1: (1, 95), 2: (1, 95), 3: (1, 95), 5: (1, 95), 6: (1, 95), 8: (1, 95), 9: (1, 95), 10: (1, 95), 11: (1, 95), 12: (1, 95), 13: (1, 95), 14: (1, 95), 15: (1, 95), 16: (1, 95), 17: (1, 95), 18: (1, 95), 19: (1, 95), 20: (1, 95), 21: (1, 95), 22: (1, 95), 23: (1, 95), 24: (1, 95), 160: (0, 209), 34: (1, 95), 35: (1, 95), 36: (1, 95), 37: (1, 95), 38: (1, 95), 39: (1, 95), 40: (1, 95), 41: (1, 95), 42: (1, 95), 43: (1, 95), 44: (1, 95), 45: (1, 95), 46: (1, 95), 47: (1, 95), 48: (1, 95), 49: (1, 95), 50: (1, 95), 51: (1, 95), 52: (1, 95), 53: (1, 95), 54: (1, 95), 55: (1, 95), 56: (1, 95), 57: (1, 95), 58: (1, 95), 59: (1, 95), 60: (1, 95), 61: (1, 95), 62: (1, 95), 63: (1, 95), 64: (1, 95), 65: (1, 95), 66: (1, 95), 67: (1, 95), 68: (1, 95), 69: (1, 95), 70: (1, 95), 71: (1, 95), 72: (1, 95), 73: (1, 95), 74: (1, 95), 75: (1, 95), 76: (1, 95), 77: (1, 95), 78: (1, 95), 79: (1, 95), 80: (1, 95), 81: (1, 95), 82: (1, 95), 83: (1, 95)},
  462: {66: (1, 122), 35: (1, 122), 68: (1, 122), 81: (1, 122), 73: (1, 122), 74: (1, 122), 83: (1, 122), 44: (1, 122), 18: (1, 122), 78: (1, 122), 24: (1, 122), 80: (1, 122), 17: (1, 122), 50: (1, 122), 19: (1, 122), 52: (1, 122), 21: (1, 122), 22: (1, 122), 41: (1, 122), 23: (1, 122), 20: (1, 122)},
  463: {50: (1, 129), 84: (1, 129), 85: (1, 129)},
  464: {2: (1, 18), 3: (1, 18), 6: (1, 18), 13: (1, 18), 17: (1, 18), 18: (1, 18), 19: (1, 18), 20: (1, 18), 21: (1, 18), 22: (1, 18), 23: (1, 18), 24: (1, 18), 34: (1, 18), 35: (1, 18), 36: (1, 18), 41: (1, 18), 44: (1, 18), 47: (1, 18), 49: (1, 18), 50: (1, 18), 52: (1, 18), 62: (1, 18), 68: (1, 18), 69: (1, 18), 71: (1, 18), 72: (1, 18), 74: (1, 18), 76: (1, 18), 78: (1, 18), 79: (1, 18), 82: (1, 18), 83: (1, 18)},
  465: {2: (1, 38), 3: (1, 38), 6: (1, 38), 13: (1, 38), 17: (1, 38), 18: (1, 38), 19: (1, 38), 20: (1, 38), 21: (1, 38), 22: (1, 38), 23: (1, 38), 24: (1, 38), 34: (1, 38), 35: (1, 38), 36: (1, 38), 39: (0, 52), 41: (1, 38), 44: (1, 38), 47: (1, 38), 49: (1, 38), 50: (1, 38), 52: (1, 38), 62: (1, 38), 68: (1, 38), 69: (1, 38), 71: (1, 38), 72: (1, 38), 74: (1, 38), 76: (1, 38), 78: (1, 38), 79: (1, 38), 82: (1, 38), 83: (1, 38)},
  466: {35: (1, 154), 68: (1, 154), 69: (1, 154), 50: (1, 154), 78: (1, 154), 17: (1, 154), 18: (1, 154), 19: (1, 154), 20: (1, 154), 21: (1, 154), 22: (1, 154), 23: (1, 154), 24: (1, 154)},
  467: {161: (0, 342), 83: (1, 372), 35: (1, 372), 68: (1, 372), 81: (0, 407), 73: (0, 264), 74: (1, 372), 23: (1, 372), 44: (1, 372), 50: (1, 372), 78: (1, 372), 17: (1, 372), 18: (1, 372), 19: (1, 372), 52: (1, 372), 21: (1, 372), 22: (1, 372), 41: (1, 372), 24: (1, 372), 20: (1, 372)},
  468: {22: (1, 67)},
  469: {66: (1, 124), 35: (1, 124), 68: (1, 124), 81: (1, 124), 73: (1, 124), 74: (1, 124), 83: (1, 124), 44: (1, 124), 18: (1, 124), 78: (1, 124), 24: (1, 124), 80: (1, 124), 17: (1, 124), 50: (1, 124), 19: (1, 124), 52: (1, 124), 21: (1, 124), 22: (1, 124), 41: (1, 124), 23: (1, 124), 20: (1, 124)},
  470: {2: (1, 147), 14: (1, 147), 13: (1, 147), 6: (1, 147)},
  471: {2: (1, 354), 3: (1, 354), 6: (1, 354), 13: (1, 354), 17: (1, 354), 18: (1, 354), 19: (1, 354), 20: (1, 354), 21: (1, 354), 22: (1, 354), 23: (1, 354), 24: (1, 354), 34: (1, 354), 35: (1, 354), 36: (1, 354), 41: (1, 354), 44: (1, 354), 47: (1, 354), 49: (1, 354), 50: (1, 354), 52: (1, 354), 62: (1, 354), 68: (1, 354), 69: (1, 354), 71: (1, 354), 72: (1, 354), 74: (1, 354), 76: (1, 354), 78: (1, 354), 79: (1, 354), 82: (1, 354), 83: (1, 354)},
  472: {17: (1, 178), 18: (1, 178), 19: (1, 178), 20: (1, 178), 21: (1, 178), 22: (1, 178), 23: (1, 178), 24: (1, 178)},
  473: {22: (0, 399)},
  474: {66: (1, 128), 35: (1, 128), 68: (1, 128), 81: (1, 128), 73: (1, 128), 74: (1, 128), 83: (1, 128), 44: (1, 128), 18: (1, 128), 78: (1, 128), 24: (1, 128), 80: (1, 128), 17: (1, 128), 50: (1, 128), 19: (1, 128), 52: (1, 128), 21: (1, 128), 22: (1, 128), 41: (1, 128), 23: (1, 128), 20: (1, 128)},
  475: {2: (1, 141), 14: (1, 141), 13: (1, 141), 6: (1, 141)},
  476: {2: (1, 15), 3: (1, 15), 6: (1, 15), 13: (1, 15), 17: (1, 15), 18: (1, 15), 19: (1, 15), 20: (1, 15), 21: (1, 15), 22: (1, 15), 23: (1, 15), 24: (1, 15), 34: (1, 15), 35: (1, 15), 36: (1, 15), 41: (1, 15), 44: (1, 15), 47: (1, 15), 49: (1, 15), 50: (1, 15), 52: (1, 15), 62: (1, 15), 68: (1, 15), 69: (1, 15), 71: (1, 15), 72: (1, 15), 74: (1, 15), 76: (1, 15), 78: (1, 15), 79: (1, 15), 82: (1, 15), 83: (1, 15)},
  477: {17: (1, 328), 18: (1, 328), 19: (1, 328), 20: (1, 328), 21: (1, 328), 22: (1, 328), 23: (1, 328), 24: (1, 328), 35: (1, 328), 41: (1, 328), 44: (1, 328), 50: (1, 328), 52: (1, 328), 66: (1, 328), 68: (1, 328), 73: (1, 328), 74: (1, 328), 78: (1, 328), 80: (1, 328), 81: (1, 328), 83: (1, 328), 84: (1, 328), 85: (1, 328), 99: (1, 328)},
  478: {35: (1, 155), 68: (1, 155), 69: (1, 155), 50: (1, 155), 78: (1, 155), 17: (1, 155), 18: (1, 155), 19: (1, 155), 20: (1, 155), 21: (1, 155), 22: (1, 155), 23: (1, 155), 24: (1, 155)},
  479: {41: (0, 321), 74: (0, 1), 83: (0, 95), 52: (0, 538)},
  480: {},
  481: {0: (1, 87), 1: (1, 87), 2: (1, 87), 3: (1, 87), 4: (1, 87), 5: (1, 87), 6: (1, 87), 7: (1, 87), 8: (1, 87), 9: (1, 87), 10: (1, 87), 11: (1, 87), 12: (1, 87), 13: (1, 87), 14: (1, 87), 15: (1, 87), 16: (1, 87)},
  482: {35: (0, 438), 22: (1, 200), 102: (0, 133), 23: (0, 64), 78: (0, 121), 17: (1, 200), 18: (1, 200), 19: (1, 200), 20: (1, 200), 21: (1, 200), 86: (0, 242), 87: (0, 310), 24: (1, 200)},
  483: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 80: (0, 295), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 302), 93: (0, 109), 94: (0, 237), 95: (0, 504), 101: (0, 537), 119: (0, 115), 120: (0, 377), 123: (0, 274), 124: (0, 125)},
  484: {2: (1, 56), 3: (1, 56), 5: (1, 56), 6: (1, 56), 10: (1, 56), 13: (1, 56), 14: (1, 56), 17: (1, 56), 18: (1, 56), 19: (1, 56), 20: (1, 56), 21: (1, 56), 22: (1, 56), 23: (1, 56), 24: (1, 56), 34: (1, 56), 35: (1, 56), 36: (1, 56), 37: (1, 56), 38: (1, 56), 39: (1, 56), 40: (1, 56), 41: (1, 56), 42: (1, 56), 43: (1, 56), 44: (1, 56), 45: (1, 56), 46: (1, 56), 47: (1, 56), 48: (1, 56), 49: (1, 56), 50: (1, 56), 51: (1, 56), 52: (1, 56), 53: (1, 56), 54: (1, 56), 55: (1, 56), 56: (1, 56), 57: (1, 56), 58: (1, 56), 59: (1, 56), 60: (1, 56), 61: (1, 56), 62: (1, 56), 63: (1, 56), 64: (1, 56), 65: (1, 56), 66: (1, 56), 67: (1, 56), 68: (1, 56), 69: (1, 56), 70: (1, 56), 71: (1, 56), 72: (1, 56), 73: (1, 56), 74: (1, 56), 75: (1, 56), 76: (1, 56), 77: (1, 56), 78: (1, 56), 79: (1, 56), 80: (1, 56), 81: (1, 56), 82: (1, 56), 83: (1, 56)},
  485: {0: (1, 89), 1: (1, 89), 2: (1, 89), 3: (1, 89), 4: (1, 89), 5: (1, 89), 6: (1, 89), 7: (1, 89), 8: (1, 89), 9: (1, 89), 10: (1, 89), 11: (1, 89), 12: (1, 89), 13: (1, 89), 14: (1, 89), 15: (1, 89), 16: (1, 89)},
  486: {162: (0, 325), 35: (1, 136), 68: (1, 136), 41: (0, 353), 74: (0, 470), 83: (0, 358), 44: (0, 479), 50: (0, 96), 78: (1, 136), 17: (1, 136), 18: (1, 136), 19: (1, 136), 20: (1, 136), 21: (1, 136), 22: (1, 136), 23: (1, 136), 24: (1, 136), 153: (0, 42), 52: (0, 58)},
  487: {17: (1, 206), 18: (1, 206), 19: (1, 206), 20: (1, 206), 21: (1, 206), 22: (1, 206), 23: (1, 206), 24: (1, 206)},
  488: {1: (1, 106), 2: (1, 106), 3: (1, 106), 5: (1, 106), 6: (1, 106), 8: (1, 106), 9: (1, 106), 10: (1, 106), 11: (1, 106), 12: (1, 106), 13: (1, 106), 14: (1, 106), 15: (1, 106), 16: (1, 106), 17: (1, 106), 18: (1, 106), 19: (1, 106), 20: (1, 106), 21: (1, 106), 22: (1, 106), 23: (1, 106), 24: (1, 106), 34: (1, 106), 35: (1, 106), 36: (1, 106), 37: (1, 106), 38: (1, 106), 39: (1, 106), 40: (1, 106), 41: (1, 106), 42: (1, 106), 43: (1, 106), 44: (1, 106), 45: (1, 106), 46: (1, 106), 47: (1, 106), 48: (1, 106), 49: (1, 106), 50: (1, 106), 51: (1, 106), 52: (1, 106), 53: (1, 106), 54: (1, 106), 55: (1, 106), 56: (1, 106), 57: (1, 106), 58: (1, 106), 59: (1, 106), 60: (1, 106), 61: (1, 106), 62: (1, 106), 63: (1, 106), 64: (1, 106), 65: (1, 106), 66: (1, 106), 67: (1, 106), 68: (1, 106), 69: (1, 106), 70: (1, 106), 71: (1, 106), 72: (1, 106), 73: (1, 106), 74: (1, 106), 75: (1, 106), 76: (1, 106), 77: (1, 106), 78: (1, 106), 79: (1, 106), 80: (1, 106), 81: (1, 106), 82: (1, 106), 83: (1, 106), 100: (1, 106)},
  489: {0: (1, 83), 1: (1, 83), 2: (1, 83), 3: (1, 83), 4: (1, 83), 5: (1, 83), 6: (1, 83), 7: (1, 83), 8: (1, 83), 9: (1, 83), 10: (1, 83), 11: (1, 83), 12: (1, 83), 13: (1, 83), 14: (1, 83), 15: (1, 83), 16: (1, 83)},
  490: {17: (1, 196), 18: (1, 196), 19: (1, 196), 20: (1, 196), 21: (1, 196), 22: (1, 196), 23: (1, 196), 24: (1, 196)},
  491: {35: (0, 438), 22: (1, 173), 102: (0, 70), 23: (0, 64), 78: (0, 121), 17: (1, 173), 18: (1, 173), 19: (1, 173), 20: (1, 173), 21: (1, 173), 86: (0, 283), 87: (0, 55), 24: (1, 173)},
  492: {50: (1, 369), 22: (1, 369)},
  493: {1: (1, 330), 2: (1, 330), 3: (1, 330), 100: (1, 330), 6: (1, 330), 8: (1, 330), 9: (1, 330), 11: (1, 330), 12: (1, 330), 13: (1, 330), 15: (1, 330), 16: (1, 330), 50: (1, 330)},
  494: {23: (0, 64), 17: (1, 193), 18: (1, 193), 19: (1, 193), 20: (1, 193), 21: (1, 193), 22: (1, 193), 87: (0, 129), 24: (1, 193)},
  495: {128: (1, 320), 1: (1, 320), 2: (1, 320), 3: (1, 320), 5: (1, 320), 6: (1, 320), 8: (1, 320), 9: (1, 320), 10: (1, 320), 11: (1, 320), 12: (1, 320), 13: (1, 320), 14: (1, 320), 15: (1, 320), 16: (1, 320), 17: (1, 320), 18: (1, 320), 19: (1, 320), 20: (1, 320), 21: (1, 320), 22: (1, 320), 23: (1, 320), 24: (1, 320), 27: (0, 452), 28: (0, 276), 29: (0, 396), 33: (0, 331), 34: (1, 320), 35: (1, 320), 36: (1, 320), 37: (1, 320), 38: (1, 320), 39: (1, 320), 40: (1, 320), 41: (1, 320), 42: (1, 320), 43: (1, 320), 44: (1, 320), 45: (1, 320), 46: (1, 320), 47: (1, 320), 48: (1, 320), 49: (1, 320), 50: (1, 320), 51: (1, 320), 52: (1, 320), 53: (1, 320), 54: (1, 320), 55: (1, 320), 56: (1, 320), 57: (1, 320), 58: (1, 320), 59: (1, 320), 60: (1, 320), 61: (1, 320), 62: (1, 320), 63: (1, 320), 64: (1, 320), 65: (1, 320), 66: (1, 320), 67: (1, 320), 68: (1, 320), 69: (1, 320), 70: (1, 320), 71: (1, 320), 72: (1, 320), 73: (1, 320), 74: (1, 320), 75: (1, 320), 76: (1, 320), 77: (1, 320), 78: (1, 320), 79: (1, 320), 80: (1, 320), 81: (1, 320), 82: (1, 320), 83: (1, 320), 100: (1, 320), 110: (0, 67), 111: (0, 134)},
  496: {17: (1, 293), 18: (1, 293), 19: (1, 293), 20: (1, 293), 21: (1, 293), 22: (1, 293), 23: (1, 293), 24: (1, 293)},
  497: {24: (1, 310), 50: (0, 215), 34: (0, 304), 22: (1, 310), 21: (1, 310)},
  498: {35: (1, 152), 68: (1, 152), 69: (1, 152), 50: (1, 152), 78: (1, 152), 17: (1, 152), 18: (1, 152), 19: (1, 152), 20: (1, 152), 21: (1, 152), 22: (1, 152), 23: (1, 152), 24: (1, 152)},
  499: {2: (0, 513), 3: (0, 39), 6: (0, 107), 13: (0, 423), 17: (1, 117), 18: (1, 117), 19: (1, 117), 20: (1, 117), 21: (1, 117), 22: (1, 117), 23: (1, 117), 24: (1, 117), 25: (0, 447), 30: (0, 281), 35: (1, 117), 41: (1, 117), 44: (1, 117), 50: (1, 117), 52: (1, 117), 68: (1, 117), 73: (1, 117), 74: (1, 117), 76: (0, 501), 78: (1, 117), 81: (1, 117), 83: (1, 117), 107: (0, 234)},
  500: {24: (1, 3), 163: (0, 223), 147: (0, 412), 21: (0, 373)},
  501: {2: (0, 513), 3: (0, 39), 6: (0, 107), 107: (0, 32), 13: (0, 423), 25: (0, 447), 30: (0, 281)},
  502: {17: (1, 381), 18: (1, 381), 19: (1, 381), 20: (1, 381), 21: (1, 381), 22: (1, 381), 23: (1, 381), 24: (1, 381)},
  503: {24: (0, 480)},
  504: {2: (1, 43), 3: (1, 43), 5: (1, 43), 6: (1, 43), 10: (1, 43), 13: (1, 43), 17: (1, 43), 18: (1, 43), 19: (1, 43), 20: (1, 43), 21: (1, 43), 22: (1, 43), 23: (1, 43), 24: (1, 43), 34: (1, 43), 35: (1, 43), 36: (1, 43), 37: (1, 43), 38: (1, 43), 39: (1, 43), 40: (1, 43), 41: (1, 43), 42: (1, 43), 43: (1, 43), 44: (1, 43), 45: (1, 43), 46: (1, 43), 47: (1, 43), 48: (1, 43), 49: (1, 43), 50: (1, 43), 51: (1, 43), 52: (1, 43), 53: (1, 43), 54: (1, 43), 55: (1, 43), 56: (1, 43), 57: (1, 43), 58: (1, 43), 59: (1, 43), 60: (1, 43), 61: (1, 43), 62: (1, 43), 63: (1, 43), 64: (1, 43), 65: (1, 43), 67: (1, 43), 68: (1, 43), 69: (1, 43), 70: (1, 43), 71: (1, 43), 72: (1, 43), 74: (1, 43), 75: (1, 43), 76: (1, 43), 77: (1, 43), 78: (1, 43), 79: (1, 43), 80: (1, 43), 82: (1, 43), 83: (1, 43)},
  505: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 210), 93: (0, 109), 94: (0, 237), 95: (0, 504)},
  506: {23: (0, 64), 17: (1, 258), 18: (1, 258), 19: (1, 258), 20: (1, 258), 21: (1, 258), 22: (1, 258), 87: (0, 356), 24: (1, 258)},
  507: {32: (0, 4), 1: (0, 28), 2: (0, 513), 3: (0, 39), 6: (0, 107), 8: (0, 82), 9: (0, 298), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 89: (0, 186), 88: (0, 126), 25: (0, 461), 90: (0, 455), 26: (0, 488), 30: (0, 459), 31: (0, 430)},
  508: {50: (1, 364), 22: (1, 364)},
  509: {0: (1, 90), 1: (1, 90), 2: (1, 90), 3: (1, 90), 4: (1, 90), 5: (1, 90), 6: (1, 90), 7: (1, 90), 8: (1, 90), 9: (1, 90), 10: (1, 90), 11: (1, 90), 12: (1, 90), 13: (1, 90), 14: (1, 90), 15: (1, 90), 16: (1, 90)},
  510: {0: (1, 75), 1: (1, 75), 2: (1, 75), 3: (1, 75), 4: (1, 75), 5: (1, 75), 6: (1, 75), 7: (1, 75), 8: (1, 75), 9: (1, 75), 10: (1, 75), 11: (1, 75), 12: (1, 75), 13: (1, 75), 14: (1, 75), 15: (1, 75), 16: (1, 75)},
  511: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 47: (0, 382), 80: (0, 295), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 302), 93: (0, 109), 94: (0, 237), 95: (0, 504), 101: (0, 537), 118: (0, 257), 119: (0, 115), 120: (0, 377), 122: (0, 87), 123: (0, 274), 124: (0, 232), 125: (0, 365)},
  512: {164: (0, 181), 13: (0, 409)},
  513: {128: (1, 322), 1: (1, 322), 2: (1, 322), 3: (1, 322), 5: (1, 322), 6: (1, 322), 8: (1, 322), 9: (1, 322), 10: (1, 322), 11: (1, 322), 12: (1, 322), 13: (1, 322), 14: (1, 322), 15: (1, 322), 16: (1, 322), 17: (1, 322), 18: (1, 322), 19: (1, 322), 20: (1, 322), 21: (1, 322), 22: (1, 322), 23: (1, 322), 24: (1, 322), 34: (1, 322), 35: (1, 322), 36: (1, 322), 37: (1, 322), 38: (1, 322), 39: (1, 322), 40: (1, 322), 41: (1, 322), 42: (1, 322), 43: (1, 322), 44: (1, 322), 45: (1, 322), 46: (1, 322), 47: (1, 322), 48: (1, 322), 49: (1, 322), 50: (1, 322), 51: (1, 322), 52: (1, 322), 53: (1, 322), 54: (1, 322), 55: (1, 322), 56: (1, 322), 57: (1, 322), 58: (1, 322), 59: (1, 322), 60: (1, 322), 61: (1, 322), 62: (1, 322), 63: (1, 322), 64: (1, 322), 65: (1, 322), 66: (1, 322), 67: (1, 322), 68: (1, 322), 69: (1, 322), 70: (1, 322), 71: (1, 322), 72: (1, 322), 73: (1, 322), 74: (1, 322), 75: (1, 322), 76: (1, 322), 77: (1, 322), 78: (1, 322), 79: (1, 322), 80: (1, 322), 81: (1, 322), 82: (1, 322), 83: (1, 322), 100: (1, 322)},
  514: {2: (0, 513), 3: (0, 39), 6: (0, 107), 107: (0, 200), 108: (0, 338), 13: (0, 423), 25: (0, 447), 30: (0, 281)},
  515: {0: (1, 79), 1: (1, 79), 2: (1, 79), 3: (1, 79), 4: (1, 79), 5: (1, 79), 6: (1, 79), 7: (1, 79), 8: (1, 79), 9: (1, 79), 10: (1, 79), 11: (1, 79), 12: (1, 79), 13: (1, 79), 14: (1, 79), 15: (1, 79), 16: (1, 79)},
  516: {0: (1, 82), 1: (1, 82), 2: (1, 82), 3: (1, 82), 4: (1, 82), 5: (1, 82), 6: (1, 82), 7: (1, 82), 8: (1, 82), 9: (1, 82), 10: (1, 82), 11: (1, 82), 12: (1, 82), 13: (1, 82), 14: (1, 82), 15: (1, 82), 16: (1, 82)},
  517: {1: (1, 96), 2: (1, 96), 3: (1, 96), 5: (1, 96), 6: (1, 96), 8: (1, 96), 9: (1, 96), 10: (1, 96), 11: (1, 96), 12: (1, 96), 13: (1, 96), 14: (1, 96), 15: (1, 96), 16: (1, 96), 17: (1, 96), 18: (1, 96), 19: (1, 96), 20: (1, 96), 21: (1, 96), 22: (1, 96), 23: (1, 96), 24: (1, 96), 34: (1, 96), 35: (1, 96), 36: (1, 96), 37: (1, 96), 38: (1, 96), 39: (1, 96), 40: (1, 96), 41: (1, 96), 42: (1, 96), 43: (1, 96), 44: (1, 96), 45: (1, 96), 46: (1, 96), 47: (1, 96), 48: (1, 96), 49: (1, 96), 50: (1, 96), 51: (1, 96), 52: (1, 96), 53: (1, 96), 54: (1, 96), 55: (1, 96), 56: (1, 96), 57: (1, 96), 58: (1, 96), 59: (1, 96), 60: (1, 96), 61: (1, 96), 62: (1, 96), 63: (1, 96), 64: (1, 96), 65: (1, 96), 66: (1, 96), 67: (1, 96), 68: (1, 96), 69: (1, 96), 70: (1, 96), 71: (1, 96), 72: (1, 96), 73: (1, 96), 74: (1, 96), 75: (1, 96), 76: (1, 96), 77: (1, 96), 78: (1, 96), 79: (1, 96), 80: (1, 96), 81: (1, 96), 82: (1, 96), 83: (1, 96)},
  518: {2: (1, 47), 3: (1, 47), 5: (1, 47), 6: (1, 47), 10: (1, 47), 13: (1, 47), 17: (1, 47), 18: (1, 47), 19: (1, 47), 20: (1, 47), 21: (1, 47), 22: (1, 47), 23: (1, 47), 24: (1, 47), 34: (1, 47), 35: (1, 47), 36: (1, 47), 37: (1, 47), 38: (1, 47), 39: (1, 47), 40: (1, 47), 41: (1, 47), 42: (1, 47), 43: (1, 47), 44: (1, 47), 45: (1, 47), 46: (1, 47), 47: (1, 47), 48: (1, 47), 49: (1, 47), 50: (1, 47), 51: (1, 47), 52: (1, 47), 53: (1, 47), 54: (1, 47), 55: (1, 47), 56: (1, 47), 57: (1, 47), 58: (1, 47), 59: (1, 47), 60: (1, 47), 61: (1, 47), 62: (1, 47), 63: (1, 47), 64: (1, 47), 65: (1, 47), 67: (1, 47), 68: (1, 47), 69: (1, 47), 70: (1, 47), 71: (1, 47), 72: (1, 47), 74: (1, 47), 75: (1, 47), 76: (1, 47), 77: (1, 47), 78: (1, 47), 79: (1, 47), 80: (1, 47), 82: (1, 47), 83: (1, 47)},
  519: {50: (0, 369), 17: (1, 159), 18: (1, 159), 19: (1, 159), 20: (1, 159), 21: (1, 159), 22: (1, 159), 23: (1, 159), 24: (1, 159)},
  520: {17: (1, 227), 18: (1, 227), 19: (1, 227), 20: (1, 227), 21: (1, 227), 22: (1, 227), 23: (1, 227), 24: (1, 227)},
  521: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 305), 93: (0, 109), 94: (0, 237), 95: (0, 504)},
  522: {0: (1, 72), 1: (1, 72), 2: (1, 72), 3: (1, 72), 4: (1, 72), 5: (1, 72), 6: (1, 72), 7: (1, 72), 8: (1, 72), 9: (1, 72), 10: (1, 72), 11: (1, 72), 12: (1, 72), 13: (1, 72), 14: (1, 72), 15: (1, 72), 16: (1, 72)},
  523: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 441), 93: (0, 109), 94: (0, 237), 95: (0, 504)},
  524: {22: (1, 242), 87: (0, 170), 78: (0, 121), 17: (1, 242), 18: (1, 242), 19: (1, 242), 20: (1, 242), 21: (1, 242), 86: (0, 361), 23: (0, 64), 24: (1, 242)},
  525: {2: (0, 513), 3: (0, 39), 6: (0, 107), 107: (0, 469), 13: (0, 423), 25: (0, 447), 30: (0, 281)},
  526: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 252), 93: (0, 109), 94: (0, 237), 95: (0, 504)},
  527: {66: (0, 147)},
  528: {23: (0, 64), 17: (1, 180), 18: (1, 180), 19: (1, 180), 20: (1, 180), 21: (1, 180), 22: (1, 180), 87: (0, 143), 24: (1, 180)},
  529: {35: (1, 291), 78: (1, 291), 17: (1, 291), 18: (1, 291), 19: (1, 291), 20: (1, 291), 21: (1, 291), 22: (1, 291), 23: (1, 291), 24: (1, 291)},
  530: {128: (1, 320), 1: (1, 320), 2: (1, 320), 3: (1, 320), 5: (1, 320), 6: (1, 320), 8: (1, 320), 9: (1, 320), 10: (1, 320), 11: (1, 320), 12: (1, 320), 13: (1, 320), 14: (1, 320), 15: (1, 320), 16: (1, 320), 17: (1, 320), 18: (1, 320), 19: (1, 320), 20: (1, 320), 21: (1, 320), 22: (1, 320), 23: (1, 320), 24: (1, 320), 34: (1, 320), 35: (1, 320), 36: (1, 320), 37: (1, 320), 38: (1, 320), 39: (1, 320), 40: (1, 320), 41: (1, 320), 42: (1, 320), 43: (1, 320), 44: (1, 320), 45: (1, 320), 46: (1, 320), 47: (1, 320), 48: (1, 320), 49: (1, 320), 50: (1, 320), 51: (1, 320), 52: (1, 320), 53: (1, 320), 54: (1, 320), 55: (1, 320), 56: (1, 320), 57: (1, 320), 58: (1, 320), 59: (1, 320), 60: (1, 320), 61: (1, 320), 62: (1, 320), 63: (1, 320), 64: (1, 320), 65: (1, 320), 66: (1, 320), 67: (1, 320), 68: (1, 320), 69: (1, 320), 70: (1, 320), 71: (1, 320), 72: (1, 320), 73: (1, 320), 74: (1, 320), 75: (1, 320), 76: (1, 320), 77: (1, 320), 78: (1, 320), 79: (1, 320), 80: (1, 320), 81: (1, 320), 82: (1, 320), 83: (1, 320), 165: (0, 3), 100: (1, 320)},
  531: {23: (0, 64), 17: (1, 241), 18: (1, 241), 19: (1, 241), 20: (1, 241), 21: (1, 241), 22: (1, 241), 87: (0, 84), 24: (1, 241)},
  532: {22: (0, 499)},
  533: {17: (1, 166), 18: (1, 166), 19: (1, 166), 20: (1, 166), 21: (1, 166), 22: (1, 166), 23: (1, 166), 24: (1, 166)},
  534: {0: (0, 511), 1: (0, 28), 2: (0, 513), 3: (0, 39), 4: (0, 485), 5: (0, 431), 6: (0, 107), 7: (0, 66), 8: (0, 82), 9: (0, 298), 10: (0, 509), 11: (0, 168), 12: (0, 400), 13: (0, 423), 14: (0, 128), 15: (0, 89), 16: (0, 279), 25: (0, 461), 26: (0, 488), 30: (0, 459), 31: (0, 430), 32: (0, 4), 88: (0, 126), 89: (0, 277), 90: (0, 435), 91: (0, 270), 92: (0, 157), 93: (0, 109), 94: (0, 237), 95: (0, 504)},
  535: {35: (0, 438), 22: (1, 231), 102: (0, 9), 23: (0, 64), 78: (0, 121), 17: (1, 231), 18: (1, 231), 19: (1, 231), 20: (1, 231), 21: (1, 231), 86: (0, 146), 87: (0, 94), 24: (1, 231)},
  536: {166: (0, 388), 17: (0, 282), 18: (0, 349), 19: (1, 295), 20: (0, 394), 21: (1, 295), 22: (1, 295), 23: (1, 295), 24: (1, 295), 156: (0, 13)},
  537: {14: (0, 323)},
  538: {74: (0, 347), 109: (0, 299)},
  539: {74: (0, 171)},
  540: {50: (1, 365), 22: (1, 365)},
  541: {2: (1, 49), 3: (1, 49), 5: (1, 49), 6: (1, 49), 10: (1, 49), 13: (1, 49), 17: (1, 49), 18: (1, 49), 19: (1, 49), 20: (1, 49), 21: (1, 49), 22: (1, 49), 23: (1, 49), 24: (1, 49), 34: (1, 49), 35: (1, 49), 36: (1, 49), 37: (1, 49), 38: (1, 49), 39: (1, 49), 40: (1, 49), 41: (1, 49), 42: (1, 49), 43: (1, 49), 44: (1, 49), 45: (1, 49), 46: (1, 49), 47: (1, 49), 48: (1, 49), 49: (1, 49), 50: (1, 49), 51: (1, 49), 52: (1, 49), 53: (1, 49), 54: (1, 49), 55: (1, 49), 56: (1, 49), 57: (1, 49), 58: (1, 49), 59: (1, 49), 60: (1, 49), 61: (1, 49), 62: (1, 49), 63: (1, 49), 64: (1, 49), 65: (1, 49), 67: (1, 49), 68: (1, 49), 69: (1, 49), 70: (1, 49), 71: (1, 49), 72: (1, 49), 74: (1, 49), 75: (1, 49), 76: (1, 49), 77: (1, 49), 78: (1, 49), 79: (1, 49), 80: (1, 49), 82: (1, 49), 83: (1, 49)},
  542: {24: (1, 318), 126: (0, 426), 19: (0, 113), 21: (1, 318), 22: (1, 318)},
  543: {161: (0, 15), 83: (1, 375), 35: (1, 375), 68: (1, 375), 81: (0, 407), 73: (0, 264), 74: (1, 375), 23: (1, 375), 44: (1, 375), 50: (1, 375), 78: (1, 375), 17: (1, 375), 18: (1, 375), 19: (1, 375), 52: (1, 375), 21: (1, 375), 22: (1, 375), 41: (1, 375), 24: (1, 375), 20: (1, 375)},
  544: {32: (0, 47), 1: (0, 28), 2: (0, 513), 3: (0, 39), 6: (0, 107), 8: (0, 82), 9: (0, 298), 11: (0, 168), 12: (0, 400), 13: (0, 530), 15: (0, 89), 16: (0, 279), 115: (0, 175), 116: (0, 231), 25: (0, 285), 26: (0, 488), 30: (0, 459), 31: (0, 493)},
  545: {22: (1, 232), 87: (0, 335), 78: (0, 121), 17: (1, 232), 18: (1, 232), 19: (1, 232), 20: (1, 232), 21: (1, 232), 86: (0, 211), 23: (0, 64), 24: (1, 232)},
  546: {17: (1, 199), 18: (1, 199), 19: (1, 199), 20: (1, 199), 21: (1, 199), 22: (1, 199), 23: (1, 199), 24: (1, 199)},
  547: {23: (0, 64), 17: (1, 175), 18: (1, 175), 19: (1, 175), 20: (1, 175), 21: (1, 175), 22: (1, 175), 87: (0, 417), 24: (1, 175)},
}
TOKEN_TYPES = (
{0: u'CASE',
 1: u'CURRENT_TIME',
 2: u'DQUOTED',
 3: u'SQUOTED',
 4: '__TILDE',
 5: '__PLUS',
 6: 'ANONRE_10',
 7: u'CAST',
 8: u'NUMERIC',
 9: 'ANONRE_8',
 10: '__MINUS',
 11: u'CURRENT_DATE',
 12: u'CURRENT_TIMESTAMP',
 13: u'CNAME',
 14: '__LPAR',
 15: u'NULL',
 16: u'PARAMETER',
 17: u'UNION',
 18: u'EXCEPT',
 19: u'LIMIT',
 20: u'INTERSECT',
 21: '__SEMICOLON',
 22: '__RPAR',
 23: u'ORDER',
 24: '$END',
 25: u'ident',
 26: u'literal_number',
 27: 'ANONRE_12',
 28: 'ANONRE_13',
 29: 'ANONRE_11',
 30: u'literal_string',
 31: u'literal',
 32: u'parameter',
 33: u'reql_block',
 34: u'__OFFSET9',
 35: u'GROUP',
 36: u'THEN',
 37: '__EQUAL',
 38: '__LESSTHAN',
 39: u'ESCAPE',
 40: '__PERCENT',
 41: u'CROSS',
 42: '__VBAR',
 43: u'NOTNULL',
 44: u'NATURAL',
 45: '__SLASH',
 46: u'IN',
 47: u'WHEN',
 48: '__AMPERSAND',
 49: u'ASC',
 50: '__COMMA',
 51: u'IS',
 52: u'LEFT',
 53: '__ANONSTR_7',
 54: '__ANONSTR_6',
 55: '__ANONSTR_5',
 56: '__ANONSTR_4',
 57: '__ANONSTR_3',
 58: '__ANONSTR_2',
 59: '__ANONSTR_1',
 60: '__ANONSTR_0',
 61: u'ASTERISK',
 62: u'ELSE',
 63: '__MORETHAN',
 64: u'GLOB',
 65: u'BETWEEN',
 66: u'INDEXED',
 67: u'REGEXP',
 68: u'WHERE',
 69: u'FROM',
 70: u'MATCH',
 71: u'END',
 72: u'AND',
 73: u'ON',
 74: u'JOIN',
 75: u'LIKE',
 76: u'AS',
 77: u'COLLATE',
 78: u'HAVING',
 79: u'DESC',
 80: u'NOT',
 81: u'USING',
 82: u'OR',
 83: u'INNER',
 84: u'VALUES',
 85: u'SELECT',
 86: u'having',
 87: u'order',
 88: u'atom',
 89: u'ident_scoped',
 90: u'expr_parens',
 91: u'op_unary',
 92: u'expr_binary',
 93: u'expr_unary',
 94: '__anon_plus_7',
 95: u'expr_func',
 96: u'values',
 97: u'select',
 98: u'select_core',
 99: '__ANONSTR_14',
 100: '__RSQB',
 101: u'EXISTS',
 102: u'group',
 103: '__anon_star_17',
 104: u'table_or_subquery',
 105: u'reql_expr',
 106: u'table_ref',
 107: u'alias',
 108: u'cte',
 109: u'OUTER',
 110: u'reql_params',
 111: '__LSQB',
 112: u'BY',
 113: '__anon_star_19',
 114: u'reql_mapper',
 115: u'reql_param',
 116: u'reql_pair',
 117: u'RECURSIVE',
 118: u'expr_or',
 119: u'expr_weird',
 120: u'expr_not',
 121: u'compound_expr',
 122: u'expr',
 123: '__anon_plus_5',
 124: u'expr_and',
 125: '__anon_plus_8',
 126: u'limit',
 127: u'ordering_term',
 128: '__DOT',
 129: '__anon_star_18',
 130: u'op_binary',
 131: '__anon_star_6',
 132: u'compound_ident',
 133: u'WITH',
 134: u'DISTINCT',
 135: u'select_stmt',
 136: u'expr_arg',
 137: u'with',
 138: u'compound_select',
 139: u'reql_set_stmt',
 140: u'stmt',
 141: u'__SET15',
 142: u'where',
 143: '__anon_star_20',
 144: u'from',
 145: u'column',
 146: u'join',
 147: '__anon_plus_0',
 148: '__anon_star_15',
 149: '__anon_star_3',
 150: 'start',
 151: '__anon_star_9',
 152: u'ALL',
 153: u'op_join',
 154: '__anon_star_11',
 155: '__anon_star_4',
 156: u'op_compound',
 157: u'select_mod',
 158: '__anon_star_2',
 159: '__anon_star_14',
 160: '__anon_star_10',
 161: u'join_constraint',
 162: '__anon_star_13',
 163: '__anon_star_1',
 164: u'type_ref',
 165: '__COLON',
 166: '__anon_star_16'}
)
parse_table.states = {s: {TOKEN_TYPES[t]: (a, RULES[x] if a is Reduce else x) for t, (a, x) in acts.items()}
                      for s, acts in STATES.items()}
parse_table.start_state = 244
parse_table.end_state = 480
class Lark_StandAlone:
  def __init__(self, transformer=None, postlex=None):
     callback = parse_tree_builder.create_callback(transformer=transformer)
     callbacks = {rule: getattr(callback, rule.alias or rule.origin, None) for rule in RULES.values()}
     self.parser = _Parser(parse_table, callbacks)
     self.postlex = postlex
  def parse(self, stream):
     tokens = lex(stream)
     if self.postlex: tokens = self.postlex.process(tokens)
     return self.parser.parse(tokens)
